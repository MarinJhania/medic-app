{
    "sourceFile": "src/app/patient-cancel-appointment/patient-cancel-appointment.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747631243817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747631243816,
            "name": "Commit-0",
            "content": "// patient-cancel-appointment.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; // Para *ngIf, *ngFor\r\nimport { PatientSidebarMenuComponent } from '../patient-sidebar-menu/patient-sidebar-menu.component'; // Tu menú lateral\r\nimport { Router, RouterModule } from '@angular/router'; // Si necesitas navegar después de cancelar\r\n\r\n@Component({\r\n  selector: 'app-patient-cancel-appointment',\r\n  standalone: true, // <--- Marca como standalone\r\n  imports: [\r\n    CommonModule, // Necesario para *ngFor si iteras sobre la lista de citas\r\n    PatientSidebarMenuComponent,\r\n    RouterModule // Si usas Router o directivas de router\r\n    // Importa otros componentes o módulos que uses\r\n  ],\r\n  templateUrl: './patient-cancel-appointment.component.html',\r\n  styleUrls: ['./patient-cancel-appointment.component.css']\r\n})\r\nexport class PatientCancelAppointmentComponent implements OnInit {\r\n\r\n  // Propiedad para almacenar la lista de citas activas\r\n  activeAppointments: any[] = [\r\n    // Datos de ejemplo (en una app real, esto vendría de un servicio/API)\r\n    {\r\n      id: 1,\r\n      doctor: 'Dr. García Martínez',\r\n      specialty: 'Medicina General',\r\n      type: 'Consulta de rutina',\r\n      date: '14/11/2023',\r\n      time: '09:00',\r\n      status: 'Programada'\r\n    },\r\n    {\r\n      id: 2,\r\n      doctor: 'Dra. Rodríguez López',\r\n      specialty: 'Cardiología',\r\n      type: 'Revisión anual',\r\n      date: '19/11/2023',\r\n      time: '10:30',\r\n      status: 'Programada'\r\n    }\r\n    // ... más citas ...\r\n  ];\r\n\r\n  constructor(private router: Router) { } // Inyecta Router si necesitas navegar\r\n\r\n  ngOnInit(): void {\r\n    // Aquí cargarías las citas activas reales del paciente desde un servicio\r\n    // Ejemplo: this.appointmentService.getActiveAppointments(patientId).subscribe(data => this.activeAppointments = data);\r\n  }\r\n\r\n  // Método para manejar el clic en el botón Cancelar\r\n  cancelAppointment(appointmentId: number): void {\r\n    console.log('Intentando cancelar cita con ID:', appointmentId);\r\n\r\n    // **Implementa la lógica de cancelación aquí:**\r\n    // 1. Confirmación al usuario (opcional pero recomendado, ej: usando un SweetAlert o un modal)\r\n    const confirmCancel = confirm('¿Estás seguro de que deseas cancelar esta cita?');\r\n\r\n    if (confirmCancel) {\r\n      // 2. Llama a un servicio para enviar la solicitud de cancelación al backend\r\n      // Ejemplo: this.appointmentService.cancelAppointment(appointmentId).subscribe({\r\n      //   next: () => {\r\n            console.log('Cita cancelada exitosamente');\r\n            // 3. Opcional: Actualiza la lista de citas en la interfaz quitando la cita cancelada\r\n            this.activeAppointments = this.activeAppointments.filter(cita => cita.id !== appointmentId);\r\n            // 4. Opcional: Muestra un mensaje de éxito al usuario\r\n      //   },\r\n      //   error: (err) => {\r\n            // Maneja errores, ej: muestra un mensaje de error al usuario\r\n      //      console.error('Error al cancelar la cita', err);\r\n      //   }\r\n      // });\r\n    }\r\n     // No se navega automáticamente después de cancelar; el usuario permanece en la lista para cancelar otras citas\r\n  }\r\n\r\n}"
        }
    ]
}