{
    "sourceFile": "src/app/patient-schedule-appointment/patient-schedule-appointment.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747630744222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747630744222,
            "name": "Commit-0",
            "content": "// patient-schedule-appointment.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; // Para *ngIf, *ngFor\r\nimport { PatientSidebarMenuComponent } from '../patient-sidebar-menu/patient-sidebar-menu.component'; // Tu menú lateral\r\nimport { Router, RouterModule } from '@angular/router'; // Para navegación\r\nimport { FormsModule } from '@angular/forms'; // Para [(ngModel)] si lo usas\r\n\r\n@Component({\r\n  selector: 'app-patient-schedule-appointment',\r\n  standalone: true, // <--- Marca como standalone\r\n  imports: [\r\n    CommonModule,\r\n    PatientSidebarMenuComponent,\r\n    RouterModule, // Si usas Router o directivas como routerLink (aunque los botones de acción final suelen usar (click))\r\n    FormsModule // Si usas two-way binding en inputs o selects\r\n    // Importa otros componentes o módulos que uses (ej: si creas un componente para un calendario)\r\n  ],\r\n  templateUrl: './patient-schedule-appointment.component.html',\r\n  styleUrls: ['./patient-schedule-appointment.component.css']\r\n})\r\nexport class PatientScheduleAppointmentComponent implements OnInit {\r\n\r\n  // Propiedades para manejar las selecciones\r\n  selectedSpecialty: string | null = null;\r\n  selectedDoctor: any | null = null; // Podría ser un objeto doctor\r\n  selectedDate: string = '';\r\n  selectedTime: string = '';\r\n\r\n  // Datos de ejemplo (en una app real vendrían de un servicio)\r\n  specialties: string[] = ['Medicina General', 'Cardiología', 'Dermatología', 'Pediatría'];\r\n  doctors: any[] = [ // Ejemplo simple\r\n      { id: 1, name: 'Dr. García Martínez', specialty: 'Medicina General' },\r\n      { id: 2, name: 'Dra. Rodríguez López', specialty: 'Medicina General' },\r\n      { id: 3, name: 'Dr. Pérez Gómez', specialty: 'Cardiología' }\r\n      // ... más doctores ...\r\n  ];\r\n  availableDoctors: any[] = []; // Doctores filtrados por especialidad\r\n  availableTimeSlots: string[] = []; // Horarios disponibles para doctor y fecha\r\n\r\n  constructor(private router: Router) { } // Inyecta Router si necesitas navegar\r\n\r\n  ngOnInit(): void {\r\n    // Lógica de inicialización si la necesitas\r\n  }\r\n\r\n  // Métodos para manejar la selección\r\n  selectSpecialty(specialty: string): void {\r\n    this.selectedSpecialty = specialty;\r\n    this.selectedDoctor = null; // Reinicia selección de doctor\r\n    this.selectedDate = '';     // Reinicia selección de fecha/hora\r\n    this.selectedTime = '';\r\n    console.log('Especialidad seleccionada:', specialty);\r\n    // Filtrar doctores basados en la especialidad seleccionada\r\n    this.availableDoctors = this.doctors.filter(doc => doc.specialty === specialty);\r\n    // Aquí podrías añadir lógica visual para activar/desactivar especialidades en el HTML\r\n  }\r\n\r\n  selectDoctor(doctor: any): void {\r\n    this.selectedDoctor = doctor;\r\n    this.selectedDate = ''; // Reinicia fecha/hora al cambiar de doctor\r\n    this.selectedTime = '';\r\n    console.log('Doctor seleccionado:', doctor.name);\r\n    // Aquí podrías cargar calendarios o fechas disponibles para este doctor\r\n     // Por ahora, limpiamos horarios\r\n     this.availableTimeSlots = [];\r\n  }\r\n\r\n  // Este método se llamaría cuando el input de fecha cambia\r\n  onDateChange(event: any): void {\r\n      this.selectedDate = event.target.value;\r\n      this.selectedTime = ''; // Reinicia hora al cambiar de fecha\r\n      console.log('Fecha seleccionada:', this.selectedDate);\r\n      // Aquí llamarías a un servicio para obtener los horarios disponibles\r\n      // para this.selectedDoctor.id y this.selectedDate\r\n      // Por ahora, simulamos algunos horarios si hay doctor y fecha\r\n      if (this.selectedDoctor && this.selectedDate) {\r\n          this.availableTimeSlots = ['09:00', '09:30', '10:00', '10:30']; // Horarios de ejemplo\r\n      } else {\r\n          this.availableTimeSlots = [];\r\n      }\r\n  }\r\n\r\n  selectTimeSlot(time: string): void {\r\n    this.selectedTime = time;\r\n    console.log('Horario seleccionado:', time);\r\n    // Lógica para aplicar estilo 'selected' en el HTML\r\n  }\r\n\r\n\r\n  // Métodos para los botones de acción final\r\n  onCancel(): void {\r\n    console.log('Cancelar proceso de agendar cita');\r\n    // Navegar a la vista principal del paciente\r\n     this.router.navigate(['/patient/dashboard']); // O donde quieras dirigir al cancelar\r\n  }\r\n\r\n  onConfirmAppointment(): void {\r\n    if (this.selectedSpecialty && this.selectedDoctor && this.selectedDate && this.selectedTime) {\r\n      console.log('Confirmar nueva cita:');\r\n      console.log('Especialidad:', this.selectedSpecialty);\r\n      console.log('Doctor:', this.selectedDoctor.name);\r\n      console.log('Fecha:', this.selectedDate);\r\n      console.log('Horario:', this.selectedTime);\r\n\r\n      // Aquí enviarías esta información a tu backend para crear la cita\r\n      // Por ejemplo: this.appointmentService.createAppointment({ ...datos de la cita ... }).subscribe(...);\r\n\r\n      // Después de crear la cita exitosamente, navegar a una página de confirmación o al historial de citas\r\n       // this.router.navigate(['/patient/appointment-confirmed']);\r\n       // O al historial:\r\n       this.router.navigate(['/patient/historial-citas']); // Ejemplo\r\n    } else {\r\n      console.log('Por favor, completa todos los pasos (Especialidad, Doctor, Fecha y Horario).');\r\n      // Muestra un mensaje de error al usuario\r\n    }\r\n  }\r\n\r\n}"
        }
    ]
}