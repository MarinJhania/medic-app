{
    "sourceFile": "src/app/login/login.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1747527883266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747532911975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n import { Component } from '@angular/core';\r\n-import { RouterLink } from '@angular/router'; // <--- Importa RouterLink\r\n+import { RouterModule } from '@angular/router';\r\n+\r\n @Component({\r\n   selector: 'app-login',\r\n-  imports: [],\r\n+  standalone: true,\r\n+  imports: [RouterModule],  // <--- Asegúrate de incluir esto\r\n   templateUrl: './login.component.html',\r\n-  styleUrl: './login.component.css'\r\n+  styleUrls: ['./login.component.css']\r\n })\r\n-export class LoginComponent {\r\n+export class LoginComponent {}\r\n \r\n-}\r\n"
                },
                {
                    "date": 1747880551267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,73 @@\n-import { Component } from '@angular/core';\r\n-import { RouterModule } from '@angular/router';\r\n+import { Component, OnInit } from '@angular/core';\r\n+import { ActivatedRoute, Router, RouterModule } from '@angular/router'; // Importa ActivatedRoute y Router\r\n+import { CommonModule } from '@angular/common'; // Necesario para directivas comunes si las usas en tu template (ej. *ngIf, *ngFor)\r\n+import { FormsModule } from '@angular/forms'; // Necesario para formularios (ej. ngModel, ngSubmit)\r\n \r\n @Component({\r\n   selector: 'app-login',\r\n   standalone: true,\r\n-  imports: [RouterModule],  // <--- Asegúrate de incluir esto\r\n+  imports: [\r\n+    RouterModule,\r\n+    CommonModule, // Asegúrate de incluir CommonModule\r\n+    FormsModule   // Asegúrate de incluir FormsModule para manejar formularios\r\n+  ],\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n })\r\n-export class LoginComponent {}\r\n+export class LoginComponent implements OnInit {\r\n+  userType: string | null = null; // Para almacenar 'doctor' o 'patient'\r\n+  email: string = ''; // Modelo para el input de email\r\n+  password: string = ''; // Modelo para el input de password\r\n \r\n+  constructor(\r\n+    private route: ActivatedRoute, // Inyecta ActivatedRoute para leer queryParams\r\n+    private router: Router         // Inyecta Router para la navegación\r\n+  ) { }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Suscribirse a los queryParams para obtener el tipo de usuario\r\n+    this.route.queryParams.subscribe(params => {\r\n+      this.userType = params['type'] || null; // Obtiene el valor de 'type'\r\n+      console.log('Tipo de usuario seleccionado:', this.userType);\r\n+      // Puedes usar this.userType aquí para personalizar la UI o mostrar mensajes\r\n+    });\r\n+  }\r\n+\r\n+  // Método que se llama al enviar el formulario de login\r\n+  onLoginSubmit(): void {\r\n+    console.log('Intento de login para:', this.userType);\r\n+    console.log('Email:', this.email);\r\n+    // console.log('Password:', this.password); // No loguear contraseñas en producción\r\n+\r\n+    // Aquí iría tu lógica de autenticación real\r\n+    // Por ejemplo, llamar a un servicio de autenticación con this.email y this.password\r\n+    // y esperar una respuesta.\r\n+\r\n+    // *** SIMULACIÓN DE AUTENTICACIÓN EXITOSA ***\r\n+    // Si la autenticación es exitosa, redirigir según el userType\r\n+    // En una aplicación real, validarías credenciales con un backend.\r\n+    if (this.email === 'doctor@example.com' && this.password === 'password123' && this.userType === 'doctor') {\r\n+      console.log('Login de doctor exitoso. Redirigiendo...');\r\n+      this.router.navigate(['/doctor/dashboard']);\r\n+    } else if (this.email === 'patient@example.com' && this.password === 'password123' && this.userType === 'patient') {\r\n+      console.log('Login de paciente exitoso. Redirigiendo...');\r\n+      this.router.navigate(['/patient/dashboard']);\r\n+    } else {\r\n+      console.error('Credenciales incorrectas o tipo de usuario no coincide.');\r\n+      // Aquí podrías mostrar un mensaje de error en la UI\r\n+      alert('Error de login: Credenciales incorrectas o tipo de usuario no válido.');\r\n+    }\r\n+  }\r\n+\r\n+  // Lógica para mostrar/ocultar la contraseña\r\n+  togglePasswordVisibility(): void {\r\n+    const passwordInput = document.getElementById('password') as HTMLInputElement;\r\n+    if (passwordInput) { // Asegurarse de que el elemento existe\r\n+      if (passwordInput.type === 'password') {\r\n+        passwordInput.type = 'text';\r\n+      } else {\r\n+        passwordInput.type = 'password';\r\n+      }\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747880814478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n import { Component, OnInit } from '@angular/core';\r\n-import { ActivatedRoute, Router, RouterModule } from '@angular/router'; // Importa ActivatedRoute y Router\r\n-import { CommonModule } from '@angular/common'; // Necesario para directivas comunes si las usas en tu template (ej. *ngIf, *ngFor)\r\n-import { FormsModule } from '@angular/forms'; // Necesario para formularios (ej. ngModel, ngSubmit)\r\n+import { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\n+import { CommonModule } from '@angular/common'; // Necesario para directivas comunes (ej. *ngIf)\r\n+import { FormsModule } from '@angular/forms'; // Necesario para ngModel\r\n \r\n @Component({\r\n   selector: 'app-login',\r\n   standalone: true,\r\n   imports: [\r\n     RouterModule,\r\n-    CommonModule, // Asegúrate de incluir CommonModule\r\n-    FormsModule   // Asegúrate de incluir FormsModule para manejar formularios\r\n+    CommonModule, // Asegúrate de que CommonModule esté aquí\r\n+    FormsModule   // Asegúrate de que FormsModule esté aquí para ngModel\r\n   ],\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n })\r\n@@ -19,51 +19,51 @@\n   email: string = ''; // Modelo para el input de email\r\n   password: string = ''; // Modelo para el input de password\r\n \r\n   constructor(\r\n-    private route: ActivatedRoute, // Inyecta ActivatedRoute para leer queryParams\r\n-    private router: Router         // Inyecta Router para la navegación\r\n+    private route: ActivatedRoute,\r\n+    private router: Router\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n-    // Suscribirse a los queryParams para obtener el tipo de usuario\r\n     this.route.queryParams.subscribe(params => {\r\n-      this.userType = params['type'] || null; // Obtiene el valor de 'type'\r\n+      this.userType = params['type'] || null;\r\n       console.log('Tipo de usuario seleccionado:', this.userType);\r\n-      // Puedes usar this.userType aquí para personalizar la UI o mostrar mensajes\r\n     });\r\n   }\r\n \r\n-  // Método que se llama al enviar el formulario de login\r\n   onLoginSubmit(): void {\r\n-    console.log('Intento de login para:', this.userType);\r\n-    console.log('Email:', this.email);\r\n-    // console.log('Password:', this.password); // No loguear contraseñas en producción\r\n+    console.log('Intentando login para:', this.userType);\r\n+    console.log('Email ingresado:', this.email);\r\n+    console.log('Password ingresada:', this.password); // Solo para depuración, NO en producción\r\n \r\n-    // Aquí iría tu lógica de autenticación real\r\n-    // Por ejemplo, llamar a un servicio de autenticación con this.email y this.password\r\n-    // y esperar una respuesta.\r\n-\r\n-    // *** SIMULACIÓN DE AUTENTICACIÓN EXITOSA ***\r\n-    // Si la autenticación es exitosa, redirigir según el userType\r\n-    // En una aplicación real, validarías credenciales con un backend.\r\n-    if (this.email === 'doctor@example.com' && this.password === 'password123' && this.userType === 'doctor') {\r\n-      console.log('Login de doctor exitoso. Redirigiendo...');\r\n-      this.router.navigate(['/doctor/dashboard']);\r\n-    } else if (this.email === 'patient@example.com' && this.password === 'password123' && this.userType === 'patient') {\r\n-      console.log('Login de paciente exitoso. Redirigiendo...');\r\n-      this.router.navigate(['/patient/dashboard']);\r\n+    // *** REVISAR ESTA LÓGICA DE SIMULACIÓN CUIDADOSAMENTE ***\r\n+    if (this.userType === 'doctor') {\r\n+      if (this.email === 'doctor@example.com' && this.password === 'password123') {\r\n+        console.log('Login de doctor exitoso. Redirigiendo...');\r\n+        this.router.navigate(['/doctor/dashboard']);\r\n+      } else {\r\n+        console.error('Error de login: Credenciales incorrectas para doctor.');\r\n+        alert('Error de login: Credenciales incorrectas para doctor.');\r\n+      }\r\n+    } else if (this.userType === 'patient') {\r\n+      if (this.email === 'patient@example.com' && this.password === 'password123') {\r\n+        console.log('Login de paciente exitoso. Redirigiendo...');\r\n+        this.router.navigate(['/patient/dashboard']);\r\n+      } else {\r\n+        console.error('Error de login: Credenciales incorrectas para paciente.');\r\n+        alert('Error de login: Credenciales incorrectas para paciente.');\r\n+      }\r\n     } else {\r\n-      console.error('Credenciales incorrectas o tipo de usuario no coincide.');\r\n-      // Aquí podrías mostrar un mensaje de error en la UI\r\n-      alert('Error de login: Credenciales incorrectas o tipo de usuario no válido.');\r\n+      // Este caso se daría si userType es null o un valor inesperado\r\n+      console.error('Error de login: Tipo de usuario no especificado o inválido.');\r\n+      alert('Error de login: Tipo de usuario no especificado o inválido. Por favor, selecciona un rol en la página principal.');\r\n     }\r\n   }\r\n \r\n-  // Lógica para mostrar/ocultar la contraseña\r\n   togglePasswordVisibility(): void {\r\n     const passwordInput = document.getElementById('password') as HTMLInputElement;\r\n-    if (passwordInput) { // Asegurarse de que el elemento existe\r\n+    if (passwordInput) {\r\n       if (passwordInput.type === 'password') {\r\n         passwordInput.type = 'text';\r\n       } else {\r\n         passwordInput.type = 'password';\r\n"
                },
                {
                    "date": 1747881336457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,44 @@\n import { Component, OnInit } from '@angular/core';\r\n import { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\n-import { CommonModule } from '@angular/common'; // Necesario para directivas comunes (ej. *ngIf)\r\n-import { FormsModule } from '@angular/forms'; // Necesario para ngModel\r\n+import { CommonModule } from '@angular/common';\r\n+import { FormsModule } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-login',\r\n   standalone: true,\r\n   imports: [\r\n     RouterModule,\r\n-    CommonModule, // Asegúrate de que CommonModule esté aquí\r\n-    FormsModule   // Asegúrate de que FormsModule esté aquí para ngModel\r\n+    CommonModule,\r\n+    FormsModule\r\n   ],\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n })\r\n export class LoginComponent implements OnInit {\r\n-  userType: string | null = null; // Para almacenar 'doctor' o 'patient'\r\n-  email: string = ''; // Modelo para el input de email\r\n-  password: string = ''; // Modelo para el input de password\r\n+  userType: string | null = null;\r\n+  email: string = '';\r\n+  password: string = '';\r\n \r\n   constructor(\r\n-    private route: ActivatedRoute,\r\n+    private route: ActivatedRoute, // Asegúrate de que esté inyectado\r\n     private router: Router\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n+    // MUY IMPORTANTE: Asegúrate de que esta suscripción se ejecute y reciba el 'type'\r\n     this.route.queryParams.subscribe(params => {\r\n       this.userType = params['type'] || null;\r\n-      console.log('Tipo de usuario seleccionado:', this.userType);\r\n+      console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType); // ¡Agrega este console.log para depurar!\r\n     });\r\n   }\r\n \r\n   onLoginSubmit(): void {\r\n-    console.log('Intentando login para:', this.userType);\r\n-    console.log('Email ingresado:', this.email);\r\n-    console.log('Password ingresada:', this.password); // Solo para depuración, NO en producción\r\n+    console.log('ONLOGINSUBMIT - Email ingresado:', this.email);\r\n+    console.log('ONLOGINSUBMIT - Password ingresada:', this.password);\r\n+    console.log('ONLOGINSUBMIT - userType actual:', this.userType); // ¡Agrega este console.log para depurar!\r\n \r\n-    // *** REVISAR ESTA LÓGICA DE SIMULACIÓN CUIDADOSAMENTE ***\r\n+    // Simulación de autenticación\r\n     if (this.userType === 'doctor') {\r\n       if (this.email === 'doctor@example.com' && this.password === 'password123') {\r\n         console.log('Login de doctor exitoso. Redirigiendo...');\r\n         this.router.navigate(['/doctor/dashboard']);\r\n@@ -53,21 +54,16 @@\n         console.error('Error de login: Credenciales incorrectas para paciente.');\r\n         alert('Error de login: Credenciales incorrectas para paciente.');\r\n       }\r\n     } else {\r\n-      // Este caso se daría si userType es null o un valor inesperado\r\n-      console.error('Error de login: Tipo de usuario no especificado o inválido.');\r\n+      console.error('Error de login: Tipo de usuario no especificado o inválido. Esto ocurre si userType es null o no reconocido.');\r\n       alert('Error de login: Tipo de usuario no especificado o inválido. Por favor, selecciona un rol en la página principal.');\r\n     }\r\n   }\r\n \r\n   togglePasswordVisibility(): void {\r\n     const passwordInput = document.getElementById('password') as HTMLInputElement;\r\n     if (passwordInput) {\r\n-      if (passwordInput.type === 'password') {\r\n-        passwordInput.type = 'text';\r\n-      } else {\r\n-        passwordInput.type = 'password';\r\n-      }\r\n+      passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747882045606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,50 +15,38 @@\n   styleUrls: ['./login.component.css']\r\n })\r\n export class LoginComponent implements OnInit {\r\n   userType: string | null = null;\r\n-  email: string = '';\r\n-  password: string = '';\r\n+  email: string = ''; // Mantener para evitar errores de plantilla si el HTML los espera\r\n+  password: string = ''; // Mantener para evitar errores de plantilla si el HTML los espera\r\n \r\n   constructor(\r\n-    private route: ActivatedRoute, // Asegúrate de que esté inyectado\r\n+    private route: ActivatedRoute,\r\n     private router: Router\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n-    // MUY IMPORTANTE: Asegúrate de que esta suscripción se ejecute y reciba el 'type'\r\n     this.route.queryParams.subscribe(params => {\r\n       this.userType = params['type'] || null;\r\n-      console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType); // ¡Agrega este console.log para depurar!\r\n+      console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType);\r\n     });\r\n   }\r\n \r\n   onLoginSubmit(): void {\r\n-    console.log('ONLOGINSUBMIT - Email ingresado:', this.email);\r\n-    console.log('ONLOGINSUBMIT - Password ingresada:', this.password);\r\n-    console.log('ONLOGINSUBMIT - userType actual:', this.userType); // ¡Agrega este console.log para depurar!\r\n+    console.log('ONLOGINSUBMIT - Intentando redireccionar basado en userType:', this.userType);\r\n \r\n-    // Simulación de autenticación\r\n+    // *** SIMPLIFICACIÓN: Redirección directa sin verificación de credenciales ***\r\n     if (this.userType === 'doctor') {\r\n-      if (this.email === 'doctor@example.com' && this.password === 'password123') {\r\n-        console.log('Login de doctor exitoso. Redirigiendo...');\r\n-        this.router.navigate(['/doctor/dashboard']);\r\n-      } else {\r\n-        console.error('Error de login: Credenciales incorrectas para doctor.');\r\n-        alert('Error de login: Credenciales incorrectas para doctor.');\r\n-      }\r\n+      console.log('Redirigiendo a Doctor Dashboard...');\r\n+      this.router.navigate(['/doctor/dashboard']);\r\n     } else if (this.userType === 'patient') {\r\n-      if (this.email === 'patient@example.com' && this.password === 'password123') {\r\n-        console.log('Login de paciente exitoso. Redirigiendo...');\r\n-        this.router.navigate(['/patient/dashboard']);\r\n-      } else {\r\n-        console.error('Error de login: Credenciales incorrectas para paciente.');\r\n-        alert('Error de login: Credenciales incorrectas para paciente.');\r\n-      }\r\n+      console.log('Redirigiendo a Patient Dashboard...');\r\n+      this.router.navigate(['/patient/dashboard']);\r\n     } else {\r\n-      console.error('Error de login: Tipo de usuario no especificado o inválido. Esto ocurre si userType es null o no reconocido.');\r\n-      alert('Error de login: Tipo de usuario no especificado o inválido. Por favor, selecciona un rol en la página principal.');\r\n+      console.error('Error: Tipo de usuario no especificado o inválido. No se puede redirigir.');\r\n+      alert('Error: Tipo de usuario no especificado o inválido. Por favor, selecciona un rol en la página principal.');\r\n     }\r\n+    // *************************************************************************\r\n   }\r\n \r\n   togglePasswordVisibility(): void {\r\n     const passwordInput = document.getElementById('password') as HTMLInputElement;\r\n"
                },
                {
                    "date": 1747882297621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,14 +23,16 @@\n     private route: ActivatedRoute,\r\n     private router: Router\r\n   ) { }\r\n \r\n-  ngOnInit(): void {\r\n-    this.route.queryParams.subscribe(params => {\r\n-      this.userType = params['type'] || null;\r\n-      console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType);\r\n-    });\r\n-  }\r\n+ ngOnInit(): void {\r\n+  console.log('LoginComponent ngOnInit iniciado.');\r\n+  this.route.queryParams.subscribe(params => {\r\n+    this.userType = params['type']; // O params.type\r\n+    console.log('NGONINIT - Objeto params:', params); // ¡Muy importante ver qué trae este objeto!\r\n+    console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType);\r\n+  });\r\n+}\r\n \r\n   onLoginSubmit(): void {\r\n     console.log('ONLOGINSUBMIT - Intentando redireccionar basado en userType:', this.userType);\r\n \r\n"
                },
                {
                    "date": 1747882807851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,9 @@\n-import { Component, OnInit } from '@angular/core';\r\n+// NO necesitas importar 'Component' ni 'OnInit' directamente aquí\r\n+// si solo los usas en el decorador @Component y en la implementación de la interfaz.\r\n+// Si tu editor los quita automáticamente al guardar, ¡déjalo así!\r\n+// import { Component, OnInit } from '@angular/core'; // <--- ELIMINA ESTA LÍNEA\r\n+\r\n import { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\n import { CommonModule } from '@angular/common';\r\n import { FormsModule } from '@angular/forms';\r\n \r\n@@ -13,26 +17,26 @@\n   ],\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n })\r\n-export class LoginComponent implements OnInit {\r\n+export class LoginComponent implements OnInit { // Mantén 'implements OnInit'\r\n   userType: string | null = null;\r\n   email: string = ''; // Mantener para evitar errores de plantilla si el HTML los espera\r\n   password: string = ''; // Mantener para evitar errores de plantilla si el HTML los espera\r\n \r\n   constructor(\r\n-    private route: ActivatedRoute,\r\n-    private router: Router\r\n+    private route: ActivatedRoute, // Asegúrate de que ActivatedRoute sea el tipo\r\n+    private router: Router         // Asegúrate de que Router sea el tipo\r\n   ) { }\r\n \r\n- ngOnInit(): void {\r\n-  console.log('LoginComponent ngOnInit iniciado.');\r\n-  this.route.queryParams.subscribe(params => {\r\n-    this.userType = params['type']; // O params.type\r\n-    console.log('NGONINIT - Objeto params:', params); // ¡Muy importante ver qué trae este objeto!\r\n-    console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType);\r\n-  });\r\n-}\r\n+  ngOnInit(): void {\r\n+    console.log('LoginComponent ngOnInit iniciado.');\r\n+    this.route.queryParams.subscribe(params => {\r\n+      this.userType = params['type']; // O params.type\r\n+      console.log('NGONINIT - Objeto params:', params); // ¡Muy importante ver qué trae este objeto!\r\n+      console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType);\r\n+    });\r\n+  }\r\n \r\n   onLoginSubmit(): void {\r\n     console.log('ONLOGINSUBMIT - Intentando redireccionar basado en userType:', this.userType);\r\n \r\n"
                },
                {
                    "date": 1747883204729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,5 @@\n-// NO necesitas importar 'Component' ni 'OnInit' directamente aquí\r\n-// si solo los usas en el decorador @Component y en la implementación de la interfaz.\r\n-// Si tu editor los quita automáticamente al guardar, ¡déjalo así!\r\n-// import { Component, OnInit } from '@angular/core'; // <--- ELIMINA ESTA LÍNEA\r\n-\r\n+import { Component, OnInit } from '@angular/core'; // <-- ¡MANTÉN ESTA LÍNEA TAL CUAL!\r\n import { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\n import { CommonModule } from '@angular/common';\r\n import { FormsModule } from '@angular/forms';\r\n \r\n@@ -17,16 +13,16 @@\n   ],\r\n   templateUrl: './login.component.html',\r\n   styleUrls: ['./login.component.css']\r\n })\r\n-export class LoginComponent implements OnInit { // Mantén 'implements OnInit'\r\n+export class LoginComponent implements OnInit {\r\n   userType: string | null = null;\r\n   email: string = ''; // Mantener para evitar errores de plantilla si el HTML los espera\r\n   password: string = ''; // Mantener para evitar errores de plantilla si el HTML los espera\r\n \r\n   constructor(\r\n-    private route: ActivatedRoute, // Asegúrate de que ActivatedRoute sea el tipo\r\n-    private router: Router         // Asegúrate de que Router sea el tipo\r\n+    private route: ActivatedRoute,\r\n+    private router: Router\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n     console.log('LoginComponent ngOnInit iniciado.');\r\n"
                },
                {
                    "date": 1748845787043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n-import { Component, OnInit } from '@angular/core'; // <-- ¡MANTÉN ESTA LÍNEA TAL CUAL!\r\n+import { Component, OnInit } from '@angular/core';\r\n import { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\n import { CommonModule } from '@angular/common';\r\n import { FormsModule } from '@angular/forms';\r\n+import { Auth, signInWithEmailAndPassword } from '@angular/fire/auth'; // <-- Importa Auth y signInWithEmailAndPassword\r\n+import { Firestore, doc, getDoc } from '@angular/fire/firestore'; // <-- Importa Firestore, doc, getDoc\r\n \r\n @Component({\r\n   selector: 'app-login',\r\n   standalone: true,\r\n@@ -15,40 +17,105 @@\n   styleUrls: ['./login.component.css']\r\n })\r\n export class LoginComponent implements OnInit {\r\n   userType: string | null = null;\r\n-  email: string = ''; // Mantener para evitar errores de plantilla si el HTML los espera\r\n-  password: string = ''; // Mantener para evitar errores de plantilla si el HTML los espera\r\n+  email: string = '';\r\n+  password: string = '';\r\n+  errorMessage: string | null = null; // Para mostrar mensajes de error al usuario\r\n \r\n   constructor(\r\n     private route: ActivatedRoute,\r\n-    private router: Router\r\n+    private router: Router,\r\n+    private auth: Auth, // <-- Inyecta el servicio Auth\r\n+    private firestore: Firestore // <-- Inyecta el servicio Firestore\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n     console.log('LoginComponent ngOnInit iniciado.');\r\n     this.route.queryParams.subscribe(params => {\r\n-      this.userType = params['type']; // O params.type\r\n-      console.log('NGONINIT - Objeto params:', params); // ¡Muy importante ver qué trae este objeto!\r\n+      this.userType = params['type'];\r\n+      console.log('NGONINIT - Objeto params:', params);\r\n       console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType);\r\n     });\r\n   }\r\n \r\n-  onLoginSubmit(): void {\r\n-    console.log('ONLOGINSUBMIT - Intentando redireccionar basado en userType:', this.userType);\r\n+  async onLoginSubmit(): Promise<void> { // Agregamos 'async' porque usaremos 'await'\r\n+    this.errorMessage = null; // Limpiar cualquier error previo\r\n+    console.log('ONLOGINSUBMIT - Intentando autenticar con correo:', this.email);\r\n \r\n-    // *** SIMPLIFICACIÓN: Redirección directa sin verificación de credenciales ***\r\n-    if (this.userType === 'doctor') {\r\n-      console.log('Redirigiendo a Doctor Dashboard...');\r\n-      this.router.navigate(['/doctor/dashboard']);\r\n-    } else if (this.userType === 'patient') {\r\n-      console.log('Redirigiendo a Patient Dashboard...');\r\n-      this.router.navigate(['/patient/dashboard']);\r\n-    } else {\r\n-      console.error('Error: Tipo de usuario no especificado o inválido. No se puede redirigir.');\r\n-      alert('Error: Tipo de usuario no especificado o inválido. Por favor, selecciona un rol en la página principal.');\r\n+    if (!this.email || !this.password) {\r\n+      this.errorMessage = 'Por favor, introduce tu correo y contraseña.';\r\n+      return;\r\n     }\r\n-    // *************************************************************************\r\n+\r\n+    try {\r\n+      // 1. Intentar iniciar sesión con Firebase Authentication\r\n+      const userCredential = await signInWithEmailAndPassword(this.auth, this.email, this.password);\r\n+      const user = userCredential.user;\r\n+\r\n+      console.log('ONLOGINSUBMIT - Inicio de sesión exitoso. UID del usuario:', user.uid);\r\n+\r\n+      // 2. Obtener el tipo de usuario (rol) desde Firestore\r\n+      // Asumimos que guardaste el rol del usuario en una colección 'users' con el UID como ID del documento\r\n+      if (user.uid) {\r\n+        const userDocRef = doc(this.firestore, 'users', user.uid);\r\n+        const userDocSnap = await getDoc(userDocRef);\r\n+\r\n+        if (userDocSnap.exists()) {\r\n+          const userData = userDocSnap.data();\r\n+          const role = userData['role']; // Asume que el campo del rol se llama 'role'\r\n+\r\n+          console.log('ONLOGINSUBMIT - Rol del usuario desde Firestore:', role);\r\n+\r\n+          // 3. Redirigir basado en el rol obtenido de Firestore\r\n+          if (role === 'doctor') {\r\n+            console.log('Redirigiendo a Doctor Dashboard...');\r\n+            this.router.navigate(['/doctor/dashboard']);\r\n+          } else if (role === 'patient') {\r\n+            console.log('Redirigiendo a Patient Dashboard...');\r\n+            this.router.navigate(['/patient/dashboard']);\r\n+          } else {\r\n+            // Si el rol existe pero no es 'doctor' ni 'patient'\r\n+            console.error('Error: Rol de usuario desconocido o inválido. No se puede redirigir.');\r\n+            this.errorMessage = 'Rol de usuario no reconocido. Contacta al administrador.';\r\n+            // Opcional: Cerrar sesión si el rol es inválido\r\n+            // await this.auth.signOut();\r\n+          }\r\n+        } else {\r\n+          // Si el documento del usuario no existe en Firestore\r\n+          console.error('Error: No se encontró el perfil de usuario en Firestore.');\r\n+          this.errorMessage = 'Perfil de usuario no encontrado. Contacta al administrador.';\r\n+          // Opcional: Cerrar sesión si no se encuentra el perfil\r\n+          // await this.auth.signOut();\r\n+        }\r\n+      } else {\r\n+        console.error('Error: UID de usuario no disponible después del inicio de sesión.');\r\n+        this.errorMessage = 'Error en el inicio de sesión. Inténtalo de nuevo.';\r\n+      }\r\n+\r\n+    } catch (error: any) { // Capturar errores de Firebase Authentication\r\n+      console.error('ONLOGINSUBMIT - Error durante el inicio de sesión:', error.message);\r\n+      switch (error.code) {\r\n+        case 'auth/user-not-found':\r\n+          this.errorMessage = 'Correo electrónico no registrado.';\r\n+          break;\r\n+        case 'auth/wrong-password':\r\n+          this.errorMessage = 'Contraseña incorrecta.';\r\n+          break;\r\n+        case 'auth/invalid-email':\r\n+          this.errorMessage = 'Formato de correo electrónico inválido.';\r\n+          break;\r\n+        case 'auth/network-request-failed':\r\n+          this.errorMessage = 'Problema de conexión a la red. Inténtalo de nuevo.';\r\n+          break;\r\n+        case 'auth/too-many-requests':\r\n+          this.errorMessage = 'Demasiados intentos fallidos. Inténtalo de nuevo más tarde.';\r\n+          break;\r\n+        default:\r\n+          this.errorMessage = 'Error en el inicio de sesión. Por favor, verifica tus credenciales.';\r\n+          break;\r\n+      }\r\n+    }\r\n   }\r\n \r\n   togglePasswordVisibility(): void {\r\n     const passwordInput = document.getElementById('password') as HTMLInputElement;\r\n"
                },
                {
                    "date": 1748846902075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+import { Component, OnInit } from '@angular/core';\r\n+import { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\n+import { CommonModule } from '@angular/common';\r\n+import { FormsModule } from '@angular/forms';\r\n+import { Auth, signInWithEmailAndPassword } from '@angular/fire/auth'; // <-- Importa Auth y signInWithEmailAndPassword\r\n+import { Firestore, doc, getDoc } from '@angular/fire/firestore'; // <-- Importa Firestore, doc, getDoc\r\n+\r\n+@Component({\r\n+  selector: 'app-login',\r\n+  standalone: true,\r\n+  imports: [\r\n+    RouterModule,\r\n+    CommonModule,\r\n+    FormsModule\r\n+  ],\r\n+  templateUrl: './login.component.html',\r\n+  styleUrls: ['./login.component.css']\r\n+})\r\n+export class LoginComponent implements OnInit {\r\n+  userType: string | null = null;\r\n+  email: string = '';\r\n+  password: string = '';\r\n+  errorMessage: string | null = null; // Para mostrar mensajes de error al usuario\r\n+\r\n+  constructor(\r\n+    private route: ActivatedRoute,\r\n+    private router: Router,\r\n+    private auth: Auth, // <-- Inyecta el servicio Auth\r\n+    private firestore: Firestore // <-- Inyecta el servicio Firestore\r\n+  ) { }\r\n+\r\n+  ngOnInit(): void {\r\n+    console.log('LoginComponent ngOnInit iniciado.');\r\n+    this.route.queryParams.subscribe(params => {\r\n+      this.userType = params['type'];\r\n+      console.log('NGONINIT - Objeto params:', params);\r\n+      console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType);\r\n+    });\r\n+  }\r\n+\r\n+  async onLoginSubmit(): Promise<void> { // Agregamos 'async' porque usaremos 'await'\r\n+    this.errorMessage = null; // Limpiar cualquier error previo\r\n+    console.log('ONLOGINSUBMIT - Intentando autenticar con correo:', this.email);\r\n+\r\n+    if (!this.email || !this.password) {\r\n+      this.errorMessage = 'Por favor, introduce tu correo y contraseña.';\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // 1. Intentar iniciar sesión con Firebase Authentication\r\n+      const userCredential = await signInWithEmailAndPassword(this.auth, this.email, this.password);\r\n+      const user = userCredential.user;\r\n+\r\n+      console.log('ONLOGINSUBMIT - Inicio de sesión exitoso. UID del usuario:', user.uid);\r\n+\r\n+      // 2. Obtener el tipo de usuario (rol) desde Firestore\r\n+      // Asumimos que guardaste el rol del usuario en una colección 'users' con el UID como ID del documento\r\n+      if (user.uid) {\r\n+        const userDocRef = doc(this.firestore, 'users', user.uid);\r\n+        const userDocSnap = await getDoc(userDocRef);\r\n+\r\n+        if (userDocSnap.exists()) {\r\n+          const userData = userDocSnap.data();\r\n+          const role = userData['role']; // Asume que el campo del rol se llama 'role'\r\n+\r\n+          console.log('ONLOGINSUBMIT - Rol del usuario desde Firestore:', role);\r\n+\r\n+          // 3. Redirigir basado en el rol obtenido de Firestore\r\n+          if (role === 'doctor') {\r\n+            console.log('Redirigiendo a Doctor Dashboard...');\r\n+            this.router.navigate(['/doctor/dashboard']);\r\n+          } else if (role === 'patient') {\r\n+            console.log('Redirigiendo a Patient Dashboard...');\r\n+            this.router.navigate(['/patient/dashboard']);\r\n+          } else {\r\n+            // Si el rol existe pero no es 'doctor' ni 'patient'\r\n+            console.error('Error: Rol de usuario desconocido o inválido. No se puede redirigir.');\r\n+            this.errorMessage = 'Rol de usuario no reconocido. Contacta al administrador.';\r\n+            // Opcional: Cerrar sesión si el rol es inválido\r\n+            // await this.auth.signOut();\r\n+          }\r\n+        } else {\r\n+          // Si el documento del usuario no existe en Firestore\r\n+          console.error('Error: No se encontró el perfil de usuario en Firestore.');\r\n+          this.errorMessage = 'Perfil de usuario no encontrado. Contacta al administrador.';\r\n+          // Opcional: Cerrar sesión si no se encuentra el perfil\r\n+          // await this.auth.signOut();\r\n+        }\r\n+      } else {\r\n+        console.error('Error: UID de usuario no disponible después del inicio de sesión.');\r\n+        this.errorMessage = 'Error en el inicio de sesión. Inténtalo de nuevo.';\r\n+      }\r\n+\r\n+    } catch (error: any) { // Capturar errores de Firebase Authentication\r\n+      console.error('ONLOGINSUBMIT - Error durante el inicio de sesión:', error.message);\r\n+      switch (error.code) {\r\n+        case 'auth/user-not-found':\r\n+          this.errorMessage = 'Correo electrónico no registrado.';\r\n+          break;\r\n+        case 'auth/wrong-password':\r\n+          this.errorMessage = 'Contraseña incorrecta.';\r\n+          break;\r\n+        case 'auth/invalid-email':\r\n+          this.errorMessage = 'Formato de correo electrónico inválido.';\r\n+          break;\r\n+        case 'auth/network-request-failed':\r\n+          this.errorMessage = 'Problema de conexión a la red. Inténtalo de nuevo.';\r\n+          break;\r\n+        case 'auth/too-many-requests':\r\n+          this.errorMessage = 'Demasiados intentos fallidos. Inténtalo de nuevo más tarde.';\r\n+          break;\r\n+        default:\r\n+          this.errorMessage = 'Error en el inicio de sesión. Por favor, verifica tus credenciales.';\r\n+          break;\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  togglePasswordVisibility(): void {\r\n+    const passwordInput = document.getElementById('password') as HTMLInputElement;\r\n+    if (passwordInput) {\r\n+      passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748847203654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,131 +122,5 @@\n     if (passwordInput) {\r\n       passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';\r\n     }\r\n   }\r\n-}\n-import { Component, OnInit } from '@angular/core';\r\n-import { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\n-import { CommonModule } from '@angular/common';\r\n-import { FormsModule } from '@angular/forms';\r\n-import { Auth, signInWithEmailAndPassword } from '@angular/fire/auth'; // <-- Importa Auth y signInWithEmailAndPassword\r\n-import { Firestore, doc, getDoc } from '@angular/fire/firestore'; // <-- Importa Firestore, doc, getDoc\r\n-\r\n-@Component({\r\n-  selector: 'app-login',\r\n-  standalone: true,\r\n-  imports: [\r\n-    RouterModule,\r\n-    CommonModule,\r\n-    FormsModule\r\n-  ],\r\n-  templateUrl: './login.component.html',\r\n-  styleUrls: ['./login.component.css']\r\n-})\r\n-export class LoginComponent implements OnInit {\r\n-  userType: string | null = null;\r\n-  email: string = '';\r\n-  password: string = '';\r\n-  errorMessage: string | null = null; // Para mostrar mensajes de error al usuario\r\n-\r\n-  constructor(\r\n-    private route: ActivatedRoute,\r\n-    private router: Router,\r\n-    private auth: Auth, // <-- Inyecta el servicio Auth\r\n-    private firestore: Firestore // <-- Inyecta el servicio Firestore\r\n-  ) { }\r\n-\r\n-  ngOnInit(): void {\r\n-    console.log('LoginComponent ngOnInit iniciado.');\r\n-    this.route.queryParams.subscribe(params => {\r\n-      this.userType = params['type'];\r\n-      console.log('NGONINIT - Objeto params:', params);\r\n-      console.log('NGONINIT - Tipo de usuario seleccionado:', this.userType);\r\n-    });\r\n-  }\r\n-\r\n-  async onLoginSubmit(): Promise<void> { // Agregamos 'async' porque usaremos 'await'\r\n-    this.errorMessage = null; // Limpiar cualquier error previo\r\n-    console.log('ONLOGINSUBMIT - Intentando autenticar con correo:', this.email);\r\n-\r\n-    if (!this.email || !this.password) {\r\n-      this.errorMessage = 'Por favor, introduce tu correo y contraseña.';\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // 1. Intentar iniciar sesión con Firebase Authentication\r\n-      const userCredential = await signInWithEmailAndPassword(this.auth, this.email, this.password);\r\n-      const user = userCredential.user;\r\n-\r\n-      console.log('ONLOGINSUBMIT - Inicio de sesión exitoso. UID del usuario:', user.uid);\r\n-\r\n-      // 2. Obtener el tipo de usuario (rol) desde Firestore\r\n-      // Asumimos que guardaste el rol del usuario en una colección 'users' con el UID como ID del documento\r\n-      if (user.uid) {\r\n-        const userDocRef = doc(this.firestore, 'users', user.uid);\r\n-        const userDocSnap = await getDoc(userDocRef);\r\n-\r\n-        if (userDocSnap.exists()) {\r\n-          const userData = userDocSnap.data();\r\n-          const role = userData['role']; // Asume que el campo del rol se llama 'role'\r\n-\r\n-          console.log('ONLOGINSUBMIT - Rol del usuario desde Firestore:', role);\r\n-\r\n-          // 3. Redirigir basado en el rol obtenido de Firestore\r\n-          if (role === 'doctor') {\r\n-            console.log('Redirigiendo a Doctor Dashboard...');\r\n-            this.router.navigate(['/doctor/dashboard']);\r\n-          } else if (role === 'patient') {\r\n-            console.log('Redirigiendo a Patient Dashboard...');\r\n-            this.router.navigate(['/patient/dashboard']);\r\n-          } else {\r\n-            // Si el rol existe pero no es 'doctor' ni 'patient'\r\n-            console.error('Error: Rol de usuario desconocido o inválido. No se puede redirigir.');\r\n-            this.errorMessage = 'Rol de usuario no reconocido. Contacta al administrador.';\r\n-            // Opcional: Cerrar sesión si el rol es inválido\r\n-            // await this.auth.signOut();\r\n-          }\r\n-        } else {\r\n-          // Si el documento del usuario no existe en Firestore\r\n-          console.error('Error: No se encontró el perfil de usuario en Firestore.');\r\n-          this.errorMessage = 'Perfil de usuario no encontrado. Contacta al administrador.';\r\n-          // Opcional: Cerrar sesión si no se encuentra el perfil\r\n-          // await this.auth.signOut();\r\n-        }\r\n-      } else {\r\n-        console.error('Error: UID de usuario no disponible después del inicio de sesión.');\r\n-        this.errorMessage = 'Error en el inicio de sesión. Inténtalo de nuevo.';\r\n-      }\r\n-\r\n-    } catch (error: any) { // Capturar errores de Firebase Authentication\r\n-      console.error('ONLOGINSUBMIT - Error durante el inicio de sesión:', error.message);\r\n-      switch (error.code) {\r\n-        case 'auth/user-not-found':\r\n-          this.errorMessage = 'Correo electrónico no registrado.';\r\n-          break;\r\n-        case 'auth/wrong-password':\r\n-          this.errorMessage = 'Contraseña incorrecta.';\r\n-          break;\r\n-        case 'auth/invalid-email':\r\n-          this.errorMessage = 'Formato de correo electrónico inválido.';\r\n-          break;\r\n-        case 'auth/network-request-failed':\r\n-          this.errorMessage = 'Problema de conexión a la red. Inténtalo de nuevo.';\r\n-          break;\r\n-        case 'auth/too-many-requests':\r\n-          this.errorMessage = 'Demasiados intentos fallidos. Inténtalo de nuevo más tarde.';\r\n-          break;\r\n-        default:\r\n-          this.errorMessage = 'Error en el inicio de sesión. Por favor, verifica tus credenciales.';\r\n-          break;\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  togglePasswordVisibility(): void {\r\n-    const passwordInput = document.getElementById('password') as HTMLInputElement;\r\n-    if (passwordInput) {\r\n-      passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1747527883266,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\nimport { RouterLink } from '@angular/router'; // <--- Importa RouterLink\r\n@Component({\r\n  selector: 'app-login',\r\n  imports: [],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.css'\r\n})\r\nexport class LoginComponent {\r\n\r\n}\r\n"
        }
    ]
}