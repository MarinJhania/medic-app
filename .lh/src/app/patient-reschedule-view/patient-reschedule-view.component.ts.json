{
    "sourceFile": "src/app/patient-reschedule-view/patient-reschedule-view.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747630218094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747630218094,
            "name": "Commit-0",
            "content": "// patient-reschedule-view.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; // Para ngIf, ngFor si los necesitas\r\nimport { PatientSidebarMenuComponent } from '../patient-sidebar-menu/patient-sidebar-menu.component'; // Importa tu menú lateral\r\nimport { Router, RouterModule } from '@angular/router'; // Para navegación programática si la necesitas\r\nimport { FormsModule } from '@angular/forms'; // Si usas two-way binding [(ngModel)]\r\n\r\n@Component({\r\n  selector: 'app-patient-reschedule-view',\r\n  standalone: true, // <--- Marca como standalone\r\n  imports: [\r\n    CommonModule,\r\n    PatientSidebarMenuComponent,\r\n    RouterModule, // Necesario si usas Router o directivas de router\r\n    FormsModule // Necesario si usas formularios y ngModel\r\n    // Importa otros componentes o módulos que uses en la plantilla\r\n  ],\r\n  templateUrl: './patient-reschedule-view.component.html',\r\n  styleUrls: ['./patient-reschedule-view.component.css']\r\n})\r\nexport class PatientRescheduleViewComponent implements OnInit {\r\n\r\n  // Propiedades para manejar la selección\r\n  selectedDate: string = '';\r\n  selectedTime: string = ''; // O un objeto de horario\r\n  citaOriginal: any; // Propiedad para guardar los datos de la cita que se está reagendando\r\n\r\n  // Puedes inyectar el Router si vas a navegar programáticamente\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    // Aquí podrías cargar los datos de la cita que el paciente quiere reagendar\r\n    // Quizás recibas un ID de la cita por la URL (usando ActivatedRoute)\r\n    // Por ahora, podrías simular cargar los datos\r\n    this.citaOriginal = {\r\n        id: 123,\r\n        doctor: 'Dr. García Martínez',\r\n        fecha: '2023-06-15', // Fecha original\r\n        hora: '10:00' // Hora original\r\n    };\r\n\r\n    // También podrías cargar la disponibilidad de horarios para el doctor seleccionado/mostrado\r\n  }\r\n\r\n  // Método para seleccionar un horario\r\n  // Necesitarías lógica para activar/desactivar botones y guardar la selección\r\n  selectTime(time: string): void {\r\n    this.selectedTime = time;\r\n    console.log('Horario seleccionado:', this.selectedTime);\r\n    // Añadir/quitar clase 'selected' a los botones de horario en el HTML\r\n  }\r\n\r\n  // Método para el botón Cancelar\r\n  onCancel(): void {\r\n    console.log('Cancelar reagendamiento');\r\n    // Por ejemplo, navegar de regreso a la vista principal del paciente o al historial\r\n     this.router.navigate(['/patient/dashboard']); // O '/patient/historial-citas'\r\n  }\r\n\r\n  // Método para el botón Confirmar cambio\r\n  onConfirmChange(): void {\r\n    if (this.selectedDate && this.selectedTime) {\r\n      console.log('Confirmar cambio para cita', this.citaOriginal.id);\r\n      console.log('Nueva Fecha:', this.selectedDate);\r\n      console.log('Nuevo Horario:', this.selectedTime);\r\n\r\n      // Aquí llamarías a un servicio para enviar los datos al backend\r\n      // Por ejemplo: this.appointmentService.updateAppointment(this.citaOriginal.id, this.selectedDate, this.selectedTime).subscribe(...);\r\n\r\n      // Después de la confirmación exitosa, podrías navegar a una página de confirmación o al historial\r\n       // this.router.navigate(['/patient/confirmation', this.citaOriginal.id]);\r\n       // O simplemente navegar al historial:\r\n       this.router.navigate(['/patient/historial-citas']); // Ejemplo\r\n    } else {\r\n      console.log('Por favor, selecciona una fecha y horario.');\r\n      // Mostrar un mensaje al usuario\r\n    }\r\n  }\r\n\r\n  // Podrías necesitar lógica adicional para manejar cambios en el input de fecha, etc.\r\n}"
        }
    ]
}