{
    "sourceFile": "src/app/patient-appointment-history/patient-appointment-history.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747631963035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747631963035,
            "name": "Commit-0",
            "content": "// patient-appointment-history.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; // Para *ngIf, *ngFor\r\nimport { PatientSidebarMenuComponent } from '../patient-sidebar-menu/patient-sidebar-menu.component'; // Tu menú lateral\r\nimport { Router, RouterModule } from '@angular/router'; // Si necesitas navegar\r\nimport { FormsModule } from '@angular/forms'; // <--- Necesario para [(ngModel)] en los filtros\r\n\r\n@Component({\r\n  selector: 'app-patient-appointment-history',\r\n  standalone: true, // <--- Marca como standalone\r\n  imports: [\r\n    CommonModule, // Necesario para *ngFor y *ngIf\r\n    PatientSidebarMenuComponent,\r\n    RouterModule, // Si usas Router\r\n    FormsModule // <-- Necesario para el two-way binding en los inputs/selects de filtro\r\n    // Importa otros componentes o módulos que uses\r\n  ],\r\n  templateUrl: './patient-appointment-history.component.html',\r\n  styleUrls: ['./patient-appointment-history.component.css']\r\n})\r\nexport class PatientAppointmentHistoryComponent implements OnInit {\r\n\r\n  // Lista completa de citas\r\n  appointments: any[] = [\r\n    // Datos de ejemplo (en una app real, esto vendría de un servicio/API)\r\n     { id: 1, doctor: 'Dr. García Martínez', specialty: 'Medicina General', type: 'Consulta de rutina', date: '2023-11-14', time: '09:00', status: 'Programada' },\r\n     { id: 2, doctor: 'Dra. Rodríguez López', specialty: 'Cardiología', type: 'Revisión anual', date: '2023-11-19', time: '10:30', status: 'Programada' },\r\n     { id: 3, doctor: 'Dr. Fernández Ruiz', specialty: 'Dermatología', type: 'Revisión de lunar', date: '2023-10-04', time: '16:00', status: 'Completada' },\r\n     { id: 4, doctor: 'Dra. Sánchez Vega', specialty: 'Oftalmología', type: 'Revisión de vista', date: '2023-09-21', time: '11:15', status: 'Cancelada' },\r\n     // Agrega más citas de ejemplo si quieres probar los filtros\r\n     { id: 5, doctor: 'Dr. García Martínez', specialty: 'Medicina General', type: 'Seguimiento', date: '2024-01-20', time: '14:00', status: 'Programada' },\r\n     { id: 6, doctor: 'Dra. Rodríguez López', specialty: 'Cardiología', type: 'Primera consulta', date: '2023-08-10', time: '11:00', status: 'Completada' },\r\n\r\n  ];\r\n\r\n  // Lista de citas mostradas después de aplicar filtros\r\n  filteredAppointments: any[] = [];\r\n\r\n  // Variables para los filtros (enlazar con [(ngModel)] en el HTML)\r\n  statusFilter: string = 'Todas';\r\n  dateFrom: string = ''; // Usar formato YYYY-MM-DD para coincidir con input type=\"date\"\r\n  dateTo: string = '';\r\n\r\n  // Contador de resultados\r\n  resultsCount: number = 0;\r\n\r\n  constructor(private router: Router) { } // Inyecta Router si necesitas navegar\r\n\r\n  ngOnInit(): void {\r\n    // Cargar datos reales aquí:\r\n    // Ejemplo: this.appointmentService.getPatientHistory(patientId).subscribe(data => {\r\n    //   this.appointments = data;\r\n    //   this.applyFilters(); // Aplicar filtros iniciales\r\n    // });\r\n\r\n    // Por ahora, usamos los datos de ejemplo y aplicamos filtros al inicio\r\n    this.applyFilters();\r\n  }\r\n\r\n  // Método para aplicar los filtros\r\n  applyFilters(): void {\r\n    console.log('Aplicando filtros:', this.statusFilter, this.dateFrom, this.dateTo);\r\n\r\n    let tempAppointments = [...this.appointments]; // Copia la lista completa\r\n\r\n    // 1. Filtrar por estado\r\n    if (this.statusFilter !== 'Todas') {\r\n      tempAppointments = tempAppointments.filter(cita => cita.status === this.statusFilter);\r\n    }\r\n\r\n    // 2. Filtrar por rango de fechas\r\n    if (this.dateFrom) {\r\n        // Asegurarse de que la fecha de la cita también esté en formato comparable (YYYY-MM-DD)\r\n        tempAppointments = tempAppointments.filter(cita => new Date(cita.date) >= new Date(this.dateFrom));\r\n    }\r\n     if (this.dateTo) {\r\n         // Asegurarse de que la fecha de la cita también esté en formato comparable (YYYY-MM-DD)\r\n         tempAppointments = tempAppointments.filter(cita => new Date(cita.date) <= new Date(this.dateTo));\r\n     }\r\n\r\n    // 3. Actualizar la lista filtrada y el contador\r\n    this.filteredAppointments = tempAppointments;\r\n    this.resultsCount = this.filteredAppointments.length;\r\n  }\r\n\r\n  // Este método se llamaría al hacer clic en \"Descargar PDF\"\r\n  downloadPdf(): void {\r\n    console.log('Generando PDF de historial de citas...');\r\n    // Aquí implementarías la lógica para generar o descargar el PDF\r\n    // Esto podría implicar llamar a un servicio backend o usar una librería JS para generar PDFs desde el HTML.\r\n    alert('Funcionalidad de descargar PDF no implementada en este ejemplo.'); // Placeholder\r\n  }\r\n\r\n  // Puedes añadir métodos para manejar el cambio en cada filtro\r\n  // Por ejemplo, llamar a applyFilters() cada vez que cambia un filtro\r\n  onFilterChange(): void {\r\n      this.applyFilters();\r\n  }\r\n\r\n}"
        }
    ]
}