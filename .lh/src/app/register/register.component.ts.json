{
    "sourceFile": "src/app/register/register.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1747534416230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748830556666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,119 @@\n import { Component } from '@angular/core';\r\n-import { RouterModule } from '@angular/router';\r\n+import { RouterModule, Router } from '@angular/router';\r\n+import { FormsModule } from '@angular/forms';\r\n \r\n+// Importa los servicios de Firebase de AngularFire\r\n+// NO necesitas importar firebaseConfig aqu√≠ si ya lo est√°s usando en main.ts\r\n+// import { firebaseConfig } from '../../environments/firebase-config'; // Eliminar esta l√≠nea si auth y db se inyectan\r\n+\r\n+// Importa los servicios Auth y Firestore de AngularFire\r\n+import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n+import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n+\r\n+\r\n @Component({\r\n   selector: 'app-register',\r\n   standalone: true,\r\n-  imports: [RouterModule],  // <--- Importa el m√≥dulo de enrutamiento\r\n+  imports: [\r\n+    RouterModule,\r\n+    FormsModule,\r\n+  ],\r\n   templateUrl: './register.component.html',\r\n   styleUrls: ['./register.component.css']\r\n })\r\n-export class RegisterComponent {}\r\n+export class RegisterComponent {\r\n+  fullName!: string;\r\n+  email!: string;\r\n+  phone!: string;\r\n+  birthDate!: string;\r\n+  password!: string;\r\n+  confirmPassword!: string;\r\n+  acceptTerms: boolean = false;\r\n+\r\n+  message: string = '';\r\n+  messageType: 'success' | 'error' | '' = '';\r\n+\r\n+  // Inyecta el Router, Auth y Firestore en el constructor\r\n+  constructor(\r\n+    private router: Router,\r\n+    private auth: Auth, // Inyecta el servicio de autenticaci√≥n de Firebase\r\n+    private firestore: Firestore // Inyecta el servicio de Firestore\r\n+  ) {}\r\n+\r\n+  async onRegisterSubmit(): Promise<void> {\r\n+    this.message = '';\r\n+    this.messageType = '';\r\n+\r\n+    if (this.password !== this.confirmPassword) {\r\n+      this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n+      return;\r\n+    }\r\n+\r\n+    if (this.password.length < 6) {\r\n+      this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n+      return;\r\n+    }\r\n+\r\n+    if (!this.acceptTerms) {\r\n+      this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // 1. Crear el usuario en Firebase Authentication\r\n+      // Usa 'this.auth' que es la instancia inyectada\r\n+      const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n+      const user = userCredential.user;\r\n+      console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n+\r\n+      // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n+      // Usa 'this.firestore' que es la instancia inyectada\r\n+      await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n+        fullName: this.fullName,\r\n+        email: this.email,\r\n+        phone: this.phone,\r\n+        birthDate: this.birthDate,\r\n+        createdAt: new Date(),\r\n+      });\r\n+\r\n+      this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n+\r\n+      setTimeout(() => {\r\n+        this.router.navigate(['/login']);\r\n+      }, 2000);\r\n+\r\n+    } catch (error: any) {\r\n+      console.error(\"Error durante el registro:\", error);\r\n+      let errorMessage = 'Error al registrar la cuenta.';\r\n+\r\n+      switch (error.code) {\r\n+        case 'auth/email-already-in-use':\r\n+          errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n+          break;\r\n+        case 'auth/invalid-email':\r\n+          errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n+          break;\r\n+        case 'auth/operation-not-allowed':\r\n+          errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n+          break;\r\n+        case 'auth/weak-password':\r\n+          errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n+          break;\r\n+        default:\r\n+          errorMessage += ` (${error.message})`;\r\n+      }\r\n+      this.showMessage(errorMessage, 'error');\r\n+    }\r\n+  }\r\n+\r\n+  showMessage(msg: string, type: 'success' | 'error'): void {\r\n+    this.message = msg;\r\n+    this.messageType = type;\r\n+  }\r\n+\r\n+  togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n+    const type = inputElement.type === 'password' ? 'text' : 'password';\r\n+    inputElement.type = type;\r\n+    buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748831768748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,9 @@\n import { Component } from '@angular/core';\r\n import { RouterModule, Router } from '@angular/router';\r\n import { FormsModule } from '@angular/forms';\r\n+import { CommonModule } from '@angular/common'; // <--- ¬°A√ëADE ESTA IMPORTACI√ìN!\r\n \r\n-// Importa los servicios de Firebase de AngularFire\r\n-// NO necesitas importar firebaseConfig aqu√≠ si ya lo est√°s usando en main.ts\r\n-// import { firebaseConfig } from '../../environments/firebase-config'; // Eliminar esta l√≠nea si auth y db se inyectan\r\n-\r\n-// Importa los servicios Auth y Firestore de AngularFire\r\n import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n \r\n \r\n@@ -16,8 +12,9 @@\n   standalone: true,\r\n   imports: [\r\n     RouterModule,\r\n     FormsModule,\r\n+    CommonModule, // <--- ¬°A√ëADE CommonModule AQU√ç!\r\n   ],\r\n   templateUrl: './register.component.html',\r\n   styleUrls: ['./register.component.css']\r\n })\r\n@@ -32,13 +29,12 @@\n \r\n   message: string = '';\r\n   messageType: 'success' | 'error' | '' = '';\r\n \r\n-  // Inyecta el Router, Auth y Firestore en el constructor\r\n   constructor(\r\n     private router: Router,\r\n-    private auth: Auth, // Inyecta el servicio de autenticaci√≥n de Firebase\r\n-    private firestore: Firestore // Inyecta el servicio de Firestore\r\n+    private auth: Auth,\r\n+    private firestore: Firestore\r\n   ) {}\r\n \r\n   async onRegisterSubmit(): Promise<void> {\r\n     this.message = '';\r\n@@ -59,16 +55,12 @@\n       return;\r\n     }\r\n \r\n     try {\r\n-      // 1. Crear el usuario en Firebase Authentication\r\n-      // Usa 'this.auth' que es la instancia inyectada\r\n       const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n       const user = userCredential.user;\r\n       console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n \r\n-      // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n-      // Usa 'this.firestore' que es la instancia inyectada\r\n       await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n         fullName: this.fullName,\r\n         email: this.email,\r\n         phone: this.phone,\r\n"
                },
                {
                    "date": 1748832201330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,13 @@\n import { Component } from '@angular/core';\r\n import { RouterModule, Router } from '@angular/router';\r\n import { FormsModule } from '@angular/forms';\r\n-import { CommonModule } from '@angular/common'; // <--- ¬°A√ëADE ESTA IMPORTACI√ìN!\r\n \r\n+// Importa los servicios de Firebase de AngularFire\r\n+// NO necesitas importar firebaseConfig aqu√≠ si ya lo est√°s usando en main.ts\r\n+// import { firebaseConfig } from '../../environments/firebase-config'; // Eliminar esta l√≠nea si auth y db se inyectan\r\n+\r\n+// Importa los servicios Auth y Firestore de AngularFire\r\n import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n \r\n \r\n@@ -12,9 +16,8 @@\n   standalone: true,\r\n   imports: [\r\n     RouterModule,\r\n     FormsModule,\r\n-    CommonModule, // <--- ¬°A√ëADE CommonModule AQU√ç!\r\n   ],\r\n   templateUrl: './register.component.html',\r\n   styleUrls: ['./register.component.css']\r\n })\r\n@@ -29,12 +32,13 @@\n \r\n   message: string = '';\r\n   messageType: 'success' | 'error' | '' = '';\r\n \r\n+  // Inyecta el Router, Auth y Firestore en el constructor\r\n   constructor(\r\n     private router: Router,\r\n-    private auth: Auth,\r\n-    private firestore: Firestore\r\n+    private auth: Auth, // Inyecta el servicio de autenticaci√≥n de Firebase\r\n+    private firestore: Firestore // Inyecta el servicio de Firestore\r\n   ) {}\r\n \r\n   async onRegisterSubmit(): Promise<void> {\r\n     this.message = '';\r\n@@ -55,12 +59,16 @@\n       return;\r\n     }\r\n \r\n     try {\r\n+      // 1. Crear el usuario en Firebase Authentication\r\n+      // Usa 'this.auth' que es la instancia inyectada\r\n       const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n       const user = userCredential.user;\r\n       console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n \r\n+      // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n+      // Usa 'this.firestore' que es la instancia inyectada\r\n       await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n         fullName: this.fullName,\r\n         email: this.email,\r\n         phone: this.phone,\r\n"
                },
                {
                    "date": 1748834315143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,119 +1,11 @@\n import { Component } from '@angular/core';\r\n-import { RouterModule, Router } from '@angular/router';\r\n-import { FormsModule } from '@angular/forms';\r\n+import { RouterModule } from '@angular/router';\r\n \r\n-// Importa los servicios de Firebase de AngularFire\r\n-// NO necesitas importar firebaseConfig aqu√≠ si ya lo est√°s usando en main.ts\r\n-// import { firebaseConfig } from '../../environments/firebase-config'; // Eliminar esta l√≠nea si auth y db se inyectan\r\n-\r\n-// Importa los servicios Auth y Firestore de AngularFire\r\n-import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n-import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n-\r\n-\r\n @Component({\r\n   selector: 'app-register',\r\n   standalone: true,\r\n-  imports: [\r\n-    RouterModule,\r\n-    FormsModule,\r\n-  ],\r\n+  imports: [RouterModule],  // <--- Importa el m√≥dulo de enrutamiento\r\n   templateUrl: './register.component.html',\r\n   styleUrls: ['./register.component.css']\r\n })\r\n-export class RegisterComponent {\r\n-  fullName!: string;\r\n-  email!: string;\r\n-  phone!: string;\r\n-  birthDate!: string;\r\n-  password!: string;\r\n-  confirmPassword!: string;\r\n-  acceptTerms: boolean = false;\r\n-\r\n-  message: string = '';\r\n-  messageType: 'success' | 'error' | '' = '';\r\n-\r\n-  // Inyecta el Router, Auth y Firestore en el constructor\r\n-  constructor(\r\n-    private router: Router,\r\n-    private auth: Auth, // Inyecta el servicio de autenticaci√≥n de Firebase\r\n-    private firestore: Firestore // Inyecta el servicio de Firestore\r\n-  ) {}\r\n-\r\n-  async onRegisterSubmit(): Promise<void> {\r\n-    this.message = '';\r\n-    this.messageType = '';\r\n-\r\n-    if (this.password !== this.confirmPassword) {\r\n-      this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n-      return;\r\n-    }\r\n-\r\n-    if (this.password.length < 6) {\r\n-      this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n-      return;\r\n-    }\r\n-\r\n-    if (!this.acceptTerms) {\r\n-      this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // 1. Crear el usuario en Firebase Authentication\r\n-      // Usa 'this.auth' que es la instancia inyectada\r\n-      const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n-      const user = userCredential.user;\r\n-      console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n-\r\n-      // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n-      // Usa 'this.firestore' que es la instancia inyectada\r\n-      await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n-        fullName: this.fullName,\r\n-        email: this.email,\r\n-        phone: this.phone,\r\n-        birthDate: this.birthDate,\r\n-        createdAt: new Date(),\r\n-      });\r\n-\r\n-      this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n-\r\n-      setTimeout(() => {\r\n-        this.router.navigate(['/login']);\r\n-      }, 2000);\r\n-\r\n-    } catch (error: any) {\r\n-      console.error(\"Error durante el registro:\", error);\r\n-      let errorMessage = 'Error al registrar la cuenta.';\r\n-\r\n-      switch (error.code) {\r\n-        case 'auth/email-already-in-use':\r\n-          errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n-          break;\r\n-        case 'auth/invalid-email':\r\n-          errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n-          break;\r\n-        case 'auth/operation-not-allowed':\r\n-          errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n-          break;\r\n-        case 'auth/weak-password':\r\n-          errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n-          break;\r\n-        default:\r\n-          errorMessage += ` (${error.message})`;\r\n-      }\r\n-      this.showMessage(errorMessage, 'error');\r\n-    }\r\n-  }\r\n-\r\n-  showMessage(msg: string, type: 'success' | 'error'): void {\r\n-    this.message = msg;\r\n-    this.messageType = type;\r\n-  }\r\n-\r\n-  togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n-    const type = inputElement.type === 'password' ? 'text' : 'password';\r\n-    inputElement.type = type;\r\n-    buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n\\ No newline at end of file\n-  }\r\n-}\n+export class RegisterComponent {}\r\n"
                },
                {
                    "date": 1748834349040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,119 @@\n import { Component } from '@angular/core';\r\n-import { RouterModule } from '@angular/router';\r\n+import { RouterModule, Router } from '@angular/router';\r\n+import { FormsModule } from '@angular/forms';\r\n \r\n+// Importa los servicios de Firebase de AngularFire\r\n+// NO necesitas importar firebaseConfig aqu√≠ si ya lo est√°s usando en main.ts\r\n+// import { firebaseConfig } from '../../environments/firebase-config'; // Eliminar esta l√≠nea si auth y db se inyectan\r\n+\r\n+// Importa los servicios Auth y Firestore de AngularFire\r\n+import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n+import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n+\r\n+\r\n @Component({\r\n   selector: 'app-register',\r\n   standalone: true,\r\n-  imports: [RouterModule],  // <--- Importa el m√≥dulo de enrutamiento\r\n+  imports: [\r\n+    RouterModule,\r\n+    FormsModule,\r\n+  ],\r\n   templateUrl: './register.component.html',\r\n   styleUrls: ['./register.component.css']\r\n })\r\n-export class RegisterComponent {}\r\n+export class RegisterComponent {\r\n+  fullName!: string;\r\n+  email!: string;\r\n+  phone!: string;\r\n+  birthDate!: string;\r\n+  password!: string;\r\n+  confirmPassword!: string;\r\n+  acceptTerms: boolean = false;\r\n+\r\n+  message: string = '';\r\n+  messageType: 'success' | 'error' | '' = '';\r\n+\r\n+  // Inyecta el Router, Auth y Firestore en el constructor\r\n+  constructor(\r\n+    private router: Router,\r\n+    private auth: Auth, // Inyecta el servicio de autenticaci√≥n de Firebase\r\n+    private firestore: Firestore // Inyecta el servicio de Firestore\r\n+  ) {}\r\n+\r\n+  async onRegisterSubmit(): Promise<void> {\r\n+    this.message = '';\r\n+    this.messageType = '';\r\n+\r\n+    if (this.password !== this.confirmPassword) {\r\n+      this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n+      return;\r\n+    }\r\n+\r\n+    if (this.password.length < 6) {\r\n+      this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n+      return;\r\n+    }\r\n+\r\n+    if (!this.acceptTerms) {\r\n+      this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // 1. Crear el usuario en Firebase Authentication\r\n+      // Usa 'this.auth' que es la instancia inyectada\r\n+      const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n+      const user = userCredential.user;\r\n+      console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n+\r\n+      // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n+      // Usa 'this.firestore' que es la instancia inyectada\r\n+      await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n+        fullName: this.fullName,\r\n+        email: this.email,\r\n+        phone: this.phone,\r\n+        birthDate: this.birthDate,\r\n+        createdAt: new Date(),\r\n+      });\r\n+\r\n+      this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n+\r\n+      setTimeout(() => {\r\n+        this.router.navigate(['/login']);\r\n+      }, 2000);\r\n+\r\n+    } catch (error: any) {\r\n+      console.error(\"Error durante el registro:\", error);\r\n+      let errorMessage = 'Error al registrar la cuenta.';\r\n+\r\n+      switch (error.code) {\r\n+        case 'auth/email-already-in-use':\r\n+          errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n+          break;\r\n+        case 'auth/invalid-email':\r\n+          errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n+          break;\r\n+        case 'auth/operation-not-allowed':\r\n+          errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n+          break;\r\n+        case 'auth/weak-password':\r\n+          errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n+          break;\r\n+        default:\r\n+          errorMessage += ` (${error.message})`;\r\n+      }\r\n+      this.showMessage(errorMessage, 'error');\r\n+    }\r\n+  }\r\n+\r\n+  showMessage(msg: string, type: 'success' | 'error'): void {\r\n+    this.message = msg;\r\n+    this.messageType = type;\r\n+  }\r\n+\r\n+  togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n+    const type = inputElement.type === 'password' ? 'text' : 'password';\r\n+    inputElement.type = type;\r\n+    buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748836314192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,8 @@\n import { Component } from '@angular/core';\r\n import { RouterModule, Router } from '@angular/router';\r\n-import { FormsModule } from '@angular/forms';\r\n+import { FormsModule } from '@angular/forms'; // Importa FormsModule para el two-way data binding\r\n \r\n-// Importa los servicios de Firebase de AngularFire\r\n-// NO necesitas importar firebaseConfig aqu√≠ si ya lo est√°s usando en main.ts\r\n-// import { firebaseConfig } from '../../environments/firebase-config'; // Eliminar esta l√≠nea si auth y db se inyectan\r\n-\r\n // Importa los servicios Auth y Firestore de AngularFire\r\n import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n \r\n@@ -15,36 +11,40 @@\n   selector: 'app-register',\r\n   standalone: true,\r\n   imports: [\r\n     RouterModule,\r\n-    FormsModule,\r\n+    FormsModule, // ¬°Aseg√∫rate de que FormsModule est√© aqu√≠!\r\n   ],\r\n   templateUrl: './register.component.html',\r\n   styleUrls: ['./register.component.css']\r\n })\r\n export class RegisterComponent {\r\n+  // Propiedades para los campos del formulario\r\n   fullName!: string;\r\n   email!: string;\r\n   phone!: string;\r\n   birthDate!: string;\r\n   password!: string;\r\n   confirmPassword!: string;\r\n   acceptTerms: boolean = false;\r\n \r\n+  // Propiedades para mensajes de usuario\r\n   message: string = '';\r\n   messageType: 'success' | 'error' | '' = '';\r\n \r\n   // Inyecta el Router, Auth y Firestore en el constructor\r\n   constructor(\r\n     private router: Router,\r\n-    private auth: Auth, // Inyecta el servicio de autenticaci√≥n de Firebase\r\n-    private firestore: Firestore // Inyecta el servicio de Firestore\r\n+    private auth: Auth, // Servicio de autenticaci√≥n de Firebase\r\n+    private firestore: Firestore // Servicio de Firestore\r\n   ) {}\r\n \r\n   async onRegisterSubmit(): Promise<void> {\r\n+    // Limpia mensajes anteriores\r\n     this.message = '';\r\n     this.messageType = '';\r\n \r\n+    // Validaciones b√°sicas del formulario\r\n     if (this.password !== this.confirmPassword) {\r\n       this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n       return;\r\n     }\r\n@@ -60,33 +60,35 @@\n     }\r\n \r\n     try {\r\n       // 1. Crear el usuario en Firebase Authentication\r\n-      // Usa 'this.auth' que es la instancia inyectada\r\n+      // `createUserWithEmailAndPassword` requiere la instancia de Auth, el email y la contrase√±a\r\n       const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n       const user = userCredential.user;\r\n       console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n \r\n       // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n-      // Usa 'this.firestore' que es la instancia inyectada\r\n+      // `setDoc` requiere la instancia de Firestore, la referencia al documento (doc) y los datos\r\n       await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n         fullName: this.fullName,\r\n         email: this.email,\r\n         phone: this.phone,\r\n         birthDate: this.birthDate,\r\n-        createdAt: new Date(),\r\n+        createdAt: new Date(), // Guarda la fecha de creaci√≥n\r\n       });\r\n \r\n       this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n \r\n+      // Redirige al usuario a la p√°gina de inicio de sesi√≥n despu√©s de 2 segundos\r\n       setTimeout(() => {\r\n         this.router.navigate(['/login']);\r\n       }, 2000);\r\n \r\n     } catch (error: any) {\r\n       console.error(\"Error durante el registro:\", error);\r\n       let errorMessage = 'Error al registrar la cuenta.';\r\n \r\n+      // Manejo de errores espec√≠ficos de Firebase Authentication\r\n       switch (error.code) {\r\n         case 'auth/email-already-in-use':\r\n           errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n           break;\r\n@@ -99,19 +101,21 @@\n         case 'auth/weak-password':\r\n           errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n           break;\r\n         default:\r\n-          errorMessage += ` (${error.message})`;\r\n+          errorMessage += ` (${error.message})`; // Muestra el mensaje de error original si no es conocido\r\n       }\r\n       this.showMessage(errorMessage, 'error');\r\n     }\r\n   }\r\n \r\n+  // Funci√≥n para mostrar mensajes al usuario\r\n   showMessage(msg: string, type: 'success' | 'error'): void {\r\n     this.message = msg;\r\n     this.messageType = type;\r\n   }\r\n \r\n+  // Funci√≥n para alternar la visibilidad de la contrase√±a\r\n   togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n     const type = inputElement.type === 'password' ? 'text' : 'password';\r\n     inputElement.type = type;\r\n     buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n"
                },
                {
                    "date": 1748836566299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,21 @@\n import { Component } from '@angular/core';\r\n-import { RouterModule, Router } from '@angular/router';\r\n-import { FormsModule } from '@angular/forms'; // Importa FormsModule para el two-way data binding\r\n \r\n-// Importa los servicios Auth y Firestore de AngularFire\r\n-import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n-import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n+import { RouterModule } from '@angular/router';\r\n \r\n \r\n+\r\n @Component({\r\n-  selector: 'app-register',\r\n-  standalone: true,\r\n-  imports: [\r\n-    RouterModule,\r\n-    FormsModule, // ¬°Aseg√∫rate de que FormsModule est√© aqu√≠!\r\n-  ],\r\n-  templateUrl: './register.component.html',\r\n-  styleUrls: ['./register.component.css']\r\n-})\r\n-export class RegisterComponent {\r\n-  // Propiedades para los campos del formulario\r\n-  fullName!: string;\r\n-  email!: string;\r\n-  phone!: string;\r\n-  birthDate!: string;\r\n-  password!: string;\r\n-  confirmPassword!: string;\r\n-  acceptTerms: boolean = false;\r\n \r\n-  // Propiedades para mensajes de usuario\r\n-  message: string = '';\r\n-  messageType: 'success' | 'error' | '' = '';\r\n+¬† selector: 'app-register',\r\n \r\n-  // Inyecta el Router, Auth y Firestore en el constructor\r\n-  constructor(\r\n-    private router: Router,\r\n-    private auth: Auth, // Servicio de autenticaci√≥n de Firebase\r\n-    private firestore: Firestore // Servicio de Firestore\r\n-  ) {}\r\n+¬† standalone: true,\r\n \r\n-  async onRegisterSubmit(): Promise<void> {\r\n-    // Limpia mensajes anteriores\r\n-    this.message = '';\r\n-    this.messageType = '';\r\n+¬† imports: [RouterModule], ¬†// <--- Importa el m√≥dulo de enrutamiento\r\n \r\n-    // Validaciones b√°sicas del formulario\r\n-    if (this.password !== this.confirmPassword) {\r\n-      this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n-      return;\r\n-    }\r\n+¬† templateUrl: './register.component.html',\r\n \r\n-    if (this.password.length < 6) {\r\n-      this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n-      return;\r\n-    }\r\n+¬† styleUrls: ['./register.component.css']\r\n \r\n-    if (!this.acceptTerms) {\r\n-      this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n-      return;\r\n-    }\r\n+})\r\n \r\n-    try {\r\n-      // 1. Crear el usuario en Firebase Authentication\r\n-      // `createUserWithEmailAndPassword` requiere la instancia de Auth, el email y la contrase√±a\r\n-      const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n-      const user = userCredential.user;\r\n-      console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n-\r\n-      // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n-      // `setDoc` requiere la instancia de Firestore, la referencia al documento (doc) y los datos\r\n-      await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n-        fullName: this.fullName,\r\n-        email: this.email,\r\n-        phone: this.phone,\r\n-        birthDate: this.birthDate,\r\n-        createdAt: new Date(), // Guarda la fecha de creaci√≥n\r\n-      });\r\n-\r\n-      this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n-\r\n-      // Redirige al usuario a la p√°gina de inicio de sesi√≥n despu√©s de 2 segundos\r\n-      setTimeout(() => {\r\n-        this.router.navigate(['/login']);\r\n-      }, 2000);\r\n-\r\n-    } catch (error: any) {\r\n-      console.error(\"Error durante el registro:\", error);\r\n-      let errorMessage = 'Error al registrar la cuenta.';\r\n-\r\n-      // Manejo de errores espec√≠ficos de Firebase Authentication\r\n-      switch (error.code) {\r\n-        case 'auth/email-already-in-use':\r\n-          errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n-          break;\r\n-        case 'auth/invalid-email':\r\n-          errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n-          break;\r\n-        case 'auth/operation-not-allowed':\r\n-          errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n-          break;\r\n-        case 'auth/weak-password':\r\n-          errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n-          break;\r\n-        default:\r\n-          errorMessage += ` (${error.message})`; // Muestra el mensaje de error original si no es conocido\r\n-      }\r\n-      this.showMessage(errorMessage, 'error');\r\n-    }\r\n-  }\r\n-\r\n-  // Funci√≥n para mostrar mensajes al usuario\r\n-  showMessage(msg: string, type: 'success' | 'error'): void {\r\n-    this.message = msg;\r\n-    this.messageType = type;\r\n-  }\r\n\\ No newline at end of file\n-\r\n-  // Funci√≥n para alternar la visibilidad de la contrase√±a\r\n-  togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n-    const type = inputElement.type === 'password' ? 'text' : 'password';\r\n-    inputElement.type = type;\r\n-    buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n-  }\r\n-}\n+export class RegisterComponent {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748836677282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,144 @@\n import { Component } from '@angular/core';\r\n+import { RouterModule, Router } from '@angular/router'; // Ensure Router is imported for navigation\r\n+import { FormsModule } from '@angular/forms'; // Required for ngModel\r\n \r\n-import { RouterModule } from '@angular/router';\r\n+// Import Firebase services from AngularFire\r\n+import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n+import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n \r\n+@Component({\r\n+  selector: 'app-register',\r\n+  standalone: true,\r\n+  imports: [\r\n+    RouterModule, // For routerLink\r\n+    FormsModule, ¬†// For two-way data binding [(ngModel)]\r\n+  ],\r\n+  templateUrl: './register.component.html',\r\n+  styleUrls: ['./register.component.css']\r\n+})\r\n+export class RegisterComponent {\r\n+  // Form fields\r\n\\ No newline at end of file\n+  fullName!: string;\r\n+  email!: string;\r\n+  phone!: string;\r\n+  birthDate!: string;\r\n+  password!: string;\r\n+  confirmPassword!: string;\r\n+  acceptTerms: boolean = false;\r\n \r\n+  // Messages for user feedback\r\n+  message: string = '';\r\n+  messageType: 'success' | 'error' | '' = '';\r\n \r\n-@Component({\r\n+  /**\r\n+   * Injects the Router, Auth (Firebase Authentication), and Firestore (Firebase Database) services.\r\n+   * @param router Angular's Router service for navigation.\r\n+   * @param auth AngularFire's Auth service.\r\n+   * @param firestore AngularFire's Firestore service.\r\n+   */\r\n+  constructor(\r\n+    private router: Router,\r\n+    private auth: Auth,\r\n+    private firestore: Firestore\r\n+  ) {}\r\n \r\n-¬† selector: 'app-register',\r\n+  /**\r\n+   * Handles the registration form submission.\r\n+   * Performs client-side validation and interacts with Firebase for user creation and data storage.\r\n+   */\r\n+  async onRegisterSubmit(): Promise<void> {\r\n+    this.resetMessages(); // Clear previous messages\r\n \r\n-¬† standalone: true,\r\n+    // Client-side validation checks\r\n+    if (this.password !== this.confirmPassword) {\r\n+      this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n+      return;\r\n+    }\r\n \r\n-¬† imports: [RouterModule], ¬†// <--- Importa el m√≥dulo de enrutamiento\r\n+    if (this.password.length < 6) {\r\n+      this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n+      return;\r\n+    }\r\n \r\n-¬† templateUrl: './register.component.html',\r\n+    if (!this.acceptTerms) {\r\n+      this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n+      return;\r\n+    }\r\n \r\n-¬† styleUrls: ['./register.component.css']\r\n+    try {\r\n+      // 1. Create user in Firebase Authentication\r\n+      const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n+      const user = userCredential.user;\r\n+      console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n \r\n-})\r\n+      // 2. Save additional user information to Firestore\r\n+      await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n+        fullName: this.fullName,\r\n+        email: this.email,\r\n+        phone: this.phone,\r\n+        birthDate: this.birthDate,\r\n+        createdAt: new Date(), // Timestamp of user creation\r\n+      });\r\n \r\n-export class RegisterComponent {}\n+      this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n+\r\n+      // Redirect to login page after a short delay\r\n+      setTimeout(() => {\r\n+        this.router.navigate(['/login']);\r\n+      }, 2000);\r\n+\r\n+    } catch (error: any) {\r\n+      console.error(\"Error durante el registro:\", error);\r\n+      let errorMessage = 'Error al registrar la cuenta.';\r\n+\r\n+      // Provide user-friendly error messages based on Firebase error codes\r\n+      switch (error.code) {\r\n+        case 'auth/email-already-in-use':\r\n+          errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n+          break;\r\n+        case 'auth/invalid-email':\r\n+          errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n+          break;\r\n+        case 'auth/operation-not-allowed':\r\n+          errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n+          break;\r\n+        case 'auth/weak-password':\r\n+          errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n+          break;\r\n+        default:\r\n+          errorMessage += ` (${error.message})`; // Fallback for unhandled errors\r\n+      }\r\n+      this.showMessage(errorMessage, 'error');\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * Displays a message to the user.\r\n+   * @param msg The message to display.\r\n+   * @param type The type of message ('success' or 'error') for styling.\r\n+   */\r\n+  showMessage(msg: string, type: 'success' | 'error'): void {\r\n+    this.message = msg;\r\n+    this.messageType = type;\r\n+  }\r\n+\r\n+  /**\r\n+   * Resets the message and message type.\r\n+   */\r\n+  resetMessages(): void {\r\n+    this.message = '';\r\n+    this.messageType = '';\r\n+  }\r\n+\r\n+  /**\r\n+   * Toggles the visibility of a password input field.\r\n+   * @param inputElement The HTML input element for the password.\r\n+   * @param buttonElement The HTML button element that triggers the toggle.\r\n+   */\r\n+  togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n+    const type = inputElement.type === 'password' ? 'text' : 'password';\r\n+    inputElement.type = type;\r\n+    // Update the button text/icon based on visibility\r\n+    buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748837113147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,144 +1,21 @@\n import { Component } from '@angular/core';\r\n-import { RouterModule, Router } from '@angular/router'; // Ensure Router is imported for navigation\r\n-import { FormsModule } from '@angular/forms'; // Required for ngModel\r\n \r\n-// Import Firebase services from AngularFire\r\n-import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n-import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n+import { RouterModule } from '@angular/router';\r\n \r\n-@Component({\r\n-  selector: 'app-register',\r\n-  standalone: true,\r\n-  imports: [\r\n-    RouterModule, // For routerLink\r\n-    FormsModule, ¬†// For two-way data binding [(ngModel)]\r\n-  ],\r\n-  templateUrl: './register.component.html',\r\n-  styleUrls: ['./register.component.css']\r\n-})\r\n-export class RegisterComponent {\r\n-  // Form fields\r\n-  fullName!: string;\r\n-  email!: string;\r\n-  phone!: string;\r\n-  birthDate!: string;\r\n-  password!: string;\r\n-  confirmPassword!: string;\r\n-  acceptTerms: boolean = false;\r\n \r\n-  // Messages for user feedback\r\n-  message: string = '';\r\n-  messageType: 'success' | 'error' | '' = '';\r\n \r\n-  /**\r\n-   * Injects the Router, Auth (Firebase Authentication), and Firestore (Firebase Database) services.\r\n-   * @param router Angular's Router service for navigation.\r\n-   * @param auth AngularFire's Auth service.\r\n-   * @param firestore AngularFire's Firestore service.\r\n-   */\r\n-  constructor(\r\n-    private router: Router,\r\n-    private auth: Auth,\r\n-    private firestore: Firestore\r\n-  ) {}\r\n+@Component({\r\n \r\n-  /**\r\n-   * Handles the registration form submission.\r\n-   * Performs client-side validation and interacts with Firebase for user creation and data storage.\r\n-   */\r\n-  async onRegisterSubmit(): Promise<void> {\r\n-    this.resetMessages(); // Clear previous messages\r\n+¬† selector: 'app-register',\r\n \r\n-    // Client-side validation checks\r\n-    if (this.password !== this.confirmPassword) {\r\n-      this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n-      return;\r\n-    }\r\n+¬† standalone: true,\r\n \r\n-    if (this.password.length < 6) {\r\n-      this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n-      return;\r\n-    }\r\n+¬† imports: [RouterModule], ¬†// <--- Importa el m√≥dulo de enrutamiento\r\n \r\n-    if (!this.acceptTerms) {\r\n-      this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n-      return;\r\n-    }\r\n+¬† templateUrl: './register.component.html',\r\n \r\n-    try {\r\n-      // 1. Create user in Firebase Authentication\r\n-      const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n-      const user = userCredential.user;\r\n-      console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n+¬† styleUrls: ['./register.component.css']\r\n \r\n-      // 2. Save additional user information to Firestore\r\n-      await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n-        fullName: this.fullName,\r\n-        email: this.email,\r\n-        phone: this.phone,\r\n-        birthDate: this.birthDate,\r\n-        createdAt: new Date(), // Timestamp of user creation\r\n-      });\r\n+})\r\n \r\n-      this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n-\r\n-      // Redirect to login page after a short delay\r\n-      setTimeout(() => {\r\n-        this.router.navigate(['/login']);\r\n-      }, 2000);\r\n-\r\n-    } catch (error: any) {\r\n-      console.error(\"Error durante el registro:\", error);\r\n-      let errorMessage = 'Error al registrar la cuenta.';\r\n-\r\n-      // Provide user-friendly error messages based on Firebase error codes\r\n-      switch (error.code) {\r\n-        case 'auth/email-already-in-use':\r\n-          errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n-          break;\r\n-        case 'auth/invalid-email':\r\n-          errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n-          break;\r\n-        case 'auth/operation-not-allowed':\r\n-          errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n-          break;\r\n-        case 'auth/weak-password':\r\n-          errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n-          break;\r\n-        default:\r\n-          errorMessage += ` (${error.message})`; // Fallback for unhandled errors\r\n-      }\r\n-      this.showMessage(errorMessage, 'error');\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Displays a message to the user.\r\n-   * @param msg The message to display.\r\n-   * @param type The type of message ('success' or 'error') for styling.\r\n-   */\r\n-  showMessage(msg: string, type: 'success' | 'error'): void {\r\n-    this.message = msg;\r\n-    this.messageType = type;\r\n-  }\r\n-\r\n-  /**\r\n-   * Resets the message and message type.\r\n-   */\r\n-  resetMessages(): void {\r\n-    this.message = '';\r\n-    this.messageType = '';\r\n-  }\r\n-\r\n-  /**\r\n-   * Toggles the visibility of a password input field.\r\n-   * @param inputElement The HTML input element for the password.\r\n-   * @param buttonElement The HTML button element that triggers the toggle.\r\n\\ No newline at end of file\n-   */\r\n-  togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n-    const type = inputElement.type === 'password' ? 'text' : 'password';\r\n-    inputElement.type = type;\r\n-    // Update the button text/icon based on visibility\r\n-    buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n-  }\r\n-}\n+export class RegisterComponent {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748837183869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,237 @@\n-import { Component } from '@angular/core';\r\n+ import { Component } from '@angular/core';\r\n \r\n-import { RouterModule } from '@angular/router';\r\n+import { RouterModule, Router } from '@angular/router';\r\n \r\n+import { FormsModule } from '@angular/forms';\r\n \r\n \r\n+\r\n+// Importa los servicios de Firebase de AngularFire\r\n+\r\n+// NO necesitas importar firebaseConfig aqu√≠ si ya lo est√°s usando en main.ts\r\n+\r\n+// import { firebaseConfig } from '../../environments/firebase-config'; // Eliminar esta l√≠nea si auth y db se inyectan\r\n+\r\n+\r\n+\r\n+// Importa los servicios Auth y Firestore de AngularFire\r\n+\r\n+import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n\\ No newline at end of file\n+\r\n+import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n+\r\n+\r\n+\r\n+\r\n+\r\n @Component({\r\n \r\n ¬† selector: 'app-register',\r\n \r\n ¬† standalone: true,\r\n \r\n-¬† imports: [RouterModule], ¬†// <--- Importa el m√≥dulo de enrutamiento\r\n+¬† imports: [\r\n \r\n+¬† ¬† RouterModule,\r\n+\r\n+¬† ¬† FormsModule,\r\n+\r\n+¬† ],\r\n+\r\n ¬† templateUrl: './register.component.html',\r\n \r\n ¬† styleUrls: ['./register.component.css']\r\n \r\n })\r\n \r\n-export class RegisterComponent {}\n+export class RegisterComponent {\r\n+\r\n+¬† fullName!: string;\r\n+\r\n+¬† email!: string;\r\n+\r\n+¬† phone!: string;\r\n+\r\n+¬† birthDate!: string;\r\n+\r\n+¬† password!: string;\r\n+\r\n+¬† confirmPassword!: string;\r\n+\r\n+¬† acceptTerms: boolean = false;\r\n+\r\n+\r\n+\r\n+¬† message: string = '';\r\n+\r\n+¬† messageType: 'success' | 'error' | '' = '';\r\n+\r\n+\r\n+\r\n+¬† // Inyecta el Router, Auth y Firestore en el constructor\r\n+\r\n+¬† constructor(\r\n+\r\n+¬† ¬† private router: Router,\r\n+\r\n+¬† ¬† private auth: Auth, // Inyecta el servicio de autenticaci√≥n de Firebase\r\n+\r\n+¬† ¬† private firestore: Firestore // Inyecta el servicio de Firestore\r\n+\r\n+¬† ) {}\r\n+\r\n+\r\n+\r\n+¬† async onRegisterSubmit(): Promise<void> {\r\n+\r\n+¬† ¬† this.message = '';\r\n+\r\n+¬† ¬† this.messageType = '';\r\n+\r\n+\r\n+\r\n+¬† ¬† if (this.password !== this.confirmPassword) {\r\n+\r\n+¬† ¬† ¬† this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n+\r\n+¬† ¬† ¬† return;\r\n+\r\n+¬† ¬† }\r\n+\r\n+\r\n+\r\n+¬† ¬† if (this.password.length < 6) {\r\n+\r\n+¬† ¬† ¬† this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n+\r\n+¬† ¬† ¬† return;\r\n+\r\n+¬† ¬† }\r\n+\r\n+\r\n+\r\n+¬† ¬† if (!this.acceptTerms) {\r\n+\r\n+¬† ¬† ¬† this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n+\r\n+¬† ¬† ¬† return;\r\n+\r\n+¬† ¬† }\r\n+\r\n+\r\n+\r\n+¬† ¬† try {\r\n+\r\n+¬† ¬† ¬† // 1. Crear el usuario en Firebase Authentication\r\n+\r\n+¬† ¬† ¬† // Usa 'this.auth' que es la instancia inyectada\r\n+\r\n+¬† ¬† ¬† const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n+\r\n+¬† ¬† ¬† const user = userCredential.user;\r\n+\r\n+¬† ¬† ¬† console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n+\r\n+\r\n+\r\n+¬† ¬† ¬† // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n+\r\n+¬† ¬† ¬† // Usa 'this.firestore' que es la instancia inyectada\r\n+\r\n+¬† ¬† ¬† await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n+\r\n+¬† ¬† ¬† ¬† fullName: this.fullName,\r\n+\r\n+¬† ¬† ¬† ¬† email: this.email,\r\n+\r\n+¬† ¬† ¬† ¬† phone: this.phone,\r\n+\r\n+¬† ¬† ¬† ¬† birthDate: this.birthDate,\r\n+\r\n+¬† ¬† ¬† ¬† createdAt: new Date(),\r\n+\r\n+¬† ¬† ¬† });\r\n+\r\n+\r\n+\r\n+¬† ¬† ¬† this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n+\r\n+\r\n+\r\n+¬† ¬† ¬† setTimeout(() => {\r\n+\r\n+¬† ¬† ¬† ¬† this.router.navigate(['/login']);\r\n+\r\n+¬† ¬† ¬† }, 2000);\r\n+\r\n+\r\n+\r\n+¬† ¬† } catch (error: any) {\r\n+\r\n+¬† ¬† ¬† console.error(\"Error durante el registro:\", error);\r\n+\r\n+¬† ¬† ¬† let errorMessage = 'Error al registrar la cuenta.';\r\n+\r\n+\r\n+\r\n+¬† ¬† ¬† switch (error.code) {\r\n+\r\n+¬† ¬† ¬† ¬† case 'auth/email-already-in-use':\r\n+\r\n+¬† ¬† ¬† ¬† ¬† errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n+\r\n+¬† ¬† ¬† ¬† ¬† break;\r\n+\r\n+¬† ¬† ¬† ¬† case 'auth/invalid-email':\r\n+\r\n+¬† ¬† ¬† ¬† ¬† errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n+\r\n+¬† ¬† ¬† ¬† ¬† break;\r\n+\r\n+¬† ¬† ¬† ¬† case 'auth/operation-not-allowed':\r\n+\r\n+¬† ¬† ¬† ¬† ¬† errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n+\r\n+¬† ¬† ¬† ¬† ¬† break;\r\n+\r\n+¬† ¬† ¬† ¬† case 'auth/weak-password':\r\n+\r\n+¬† ¬† ¬† ¬† ¬† errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n+\r\n+¬† ¬† ¬† ¬† ¬† break;\r\n+\r\n+¬† ¬† ¬† ¬† default:\r\n+\r\n+¬† ¬† ¬† ¬† ¬† errorMessage += ` (${error.message})`;\r\n+\r\n+¬† ¬† ¬† }\r\n+\r\n+¬† ¬† ¬† this.showMessage(errorMessage, 'error');\r\n+\r\n+¬† ¬† }\r\n+\r\n+¬† }\r\n+\r\n+\r\n+\r\n+¬† showMessage(msg: string, type: 'success' | 'error'): void {\r\n+\r\n+¬† ¬† this.message = msg;\r\n+\r\n+¬† ¬† this.messageType = type;\r\n+\r\n+¬† }\r\n+\r\n+\r\n+\r\n+¬† togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n+\r\n+¬† ¬† const type = inputElement.type === 'password' ? 'text' : 'password';\r\n+\r\n+¬† ¬† inputElement.type = type;\r\n+\r\n+¬† ¬† buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n+\r\n+¬† }\r\n+\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748837340883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,237 +1,21 @@\n- import { Component } from '@angular/core';\r\n+import { Component } from '@angular/core';\r\n \r\n-import { RouterModule, Router } from '@angular/router';\r\n+import { RouterModule } from '@angular/router';\r\n \r\n-import { FormsModule } from '@angular/forms';\r\n \r\n \r\n-\r\n-// Importa los servicios de Firebase de AngularFire\r\n-\r\n-// NO necesitas importar firebaseConfig aqu√≠ si ya lo est√°s usando en main.ts\r\n-\r\n-// import { firebaseConfig } from '../../environments/firebase-config'; // Eliminar esta l√≠nea si auth y db se inyectan\r\n-\r\n-\r\n-\r\n-// Importa los servicios Auth y Firestore de AngularFire\r\n-\r\n-import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n-\r\n-import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n-\r\n-\r\n-\r\n-\r\n-\r\n @Component({\r\n \r\n ¬† selector: 'app-register',\r\n \r\n ¬† standalone: true,\r\n \r\n-¬† imports: [\r\n+¬† imports: [RouterModule], ¬†// <--- Importa el m√≥dulo de enrutamiento\r\n \r\n-¬† ¬† RouterModule,\r\n-\r\n-¬† ¬† FormsModule,\r\n-\r\n-¬† ],\r\n-\r\n ¬† templateUrl: './register.component.html',\r\n \r\n ¬† styleUrls: ['./register.component.css']\r\n \r\n })\r\n \r\n-export class RegisterComponent {\r\n-\r\n-¬† fullName!: string;\r\n-\r\n-¬† email!: string;\r\n-\r\n-¬† phone!: string;\r\n-\r\n-¬† birthDate!: string;\r\n-\r\n-¬† password!: string;\r\n-\r\n-¬† confirmPassword!: string;\r\n-\r\n-¬† acceptTerms: boolean = false;\r\n-\r\n-\r\n-\r\n-¬† message: string = '';\r\n-\r\n-¬† messageType: 'success' | 'error' | '' = '';\r\n-\r\n-\r\n-\r\n-¬† // Inyecta el Router, Auth y Firestore en el constructor\r\n-\r\n-¬† constructor(\r\n-\r\n-¬† ¬† private router: Router,\r\n-\r\n-¬† ¬† private auth: Auth, // Inyecta el servicio de autenticaci√≥n de Firebase\r\n-\r\n-¬† ¬† private firestore: Firestore // Inyecta el servicio de Firestore\r\n-\r\n-¬† ) {}\r\n-\r\n-\r\n-\r\n-¬† async onRegisterSubmit(): Promise<void> {\r\n-\r\n-¬† ¬† this.message = '';\r\n-\r\n-¬† ¬† this.messageType = '';\r\n-\r\n-\r\n-\r\n-¬† ¬† if (this.password !== this.confirmPassword) {\r\n-\r\n-¬† ¬† ¬† this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n-\r\n-¬† ¬† ¬† return;\r\n-\r\n-¬† ¬† }\r\n-\r\n-\r\n-\r\n-¬† ¬† if (this.password.length < 6) {\r\n-\r\n-¬† ¬† ¬† this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n-\r\n-¬† ¬† ¬† return;\r\n-\r\n-¬† ¬† }\r\n-\r\n-\r\n-\r\n-¬† ¬† if (!this.acceptTerms) {\r\n-\r\n-¬† ¬† ¬† this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n-\r\n-¬† ¬† ¬† return;\r\n-\r\n-¬† ¬† }\r\n-\r\n-\r\n-\r\n-¬† ¬† try {\r\n-\r\n-¬† ¬† ¬† // 1. Crear el usuario en Firebase Authentication\r\n-\r\n-¬† ¬† ¬† // Usa 'this.auth' que es la instancia inyectada\r\n-\r\n-¬† ¬† ¬† const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n-\r\n-¬† ¬† ¬† const user = userCredential.user;\r\n-\r\n-¬† ¬† ¬† console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n-\r\n-\r\n-\r\n-¬† ¬† ¬† // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n-\r\n-¬† ¬† ¬† // Usa 'this.firestore' que es la instancia inyectada\r\n-\r\n-¬† ¬† ¬† await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n-\r\n-¬† ¬† ¬† ¬† fullName: this.fullName,\r\n-\r\n-¬† ¬† ¬† ¬† email: this.email,\r\n-\r\n-¬† ¬† ¬† ¬† phone: this.phone,\r\n-\r\n-¬† ¬† ¬† ¬† birthDate: this.birthDate,\r\n-\r\n-¬† ¬† ¬† ¬† createdAt: new Date(),\r\n-\r\n-¬† ¬† ¬† });\r\n-\r\n-\r\n-\r\n-¬† ¬† ¬† this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n-\r\n-\r\n-\r\n-¬† ¬† ¬† setTimeout(() => {\r\n-\r\n-¬† ¬† ¬† ¬† this.router.navigate(['/login']);\r\n-\r\n-¬† ¬† ¬† }, 2000);\r\n-\r\n-\r\n-\r\n-¬† ¬† } catch (error: any) {\r\n-\r\n-¬† ¬† ¬† console.error(\"Error durante el registro:\", error);\r\n-\r\n-¬† ¬† ¬† let errorMessage = 'Error al registrar la cuenta.';\r\n-\r\n-\r\n-\r\n-¬† ¬† ¬† switch (error.code) {\r\n-\r\n-¬† ¬† ¬† ¬† case 'auth/email-already-in-use':\r\n-\r\n-¬† ¬† ¬† ¬† ¬† errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n-\r\n-¬† ¬† ¬† ¬† ¬† break;\r\n-\r\n-¬† ¬† ¬† ¬† case 'auth/invalid-email':\r\n-\r\n-¬† ¬† ¬† ¬† ¬† errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n-\r\n-¬† ¬† ¬† ¬† ¬† break;\r\n-\r\n-¬† ¬† ¬† ¬† case 'auth/operation-not-allowed':\r\n-\r\n-¬† ¬† ¬† ¬† ¬† errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n-\r\n-¬† ¬† ¬† ¬† ¬† break;\r\n-\r\n-¬† ¬† ¬† ¬† case 'auth/weak-password':\r\n-\r\n-¬† ¬† ¬† ¬† ¬† errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n-\r\n-¬† ¬† ¬† ¬† ¬† break;\r\n-\r\n-¬† ¬† ¬† ¬† default:\r\n-\r\n-¬† ¬† ¬† ¬† ¬† errorMessage += ` (${error.message})`;\r\n-\r\n-¬† ¬† ¬† }\r\n-\r\n-¬† ¬† ¬† this.showMessage(errorMessage, 'error');\r\n-\r\n-¬† ¬† }\r\n-\r\n-¬† }\r\n-\r\n-\r\n-\r\n-¬† showMessage(msg: string, type: 'success' | 'error'): void {\r\n-\r\n-¬† ¬† this.message = msg;\r\n-\r\n-¬† ¬† this.messageType = type;\r\n-\r\n-¬† }\r\n-\r\n-\r\n-\r\n-¬† togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n-\r\n-¬† ¬† const type = inputElement.type === 'password' ? 'text' : 'password';\r\n-\r\n-¬† ¬† inputElement.type = type;\r\n-\r\n-¬† ¬† buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n-\r\n\\ No newline at end of file\n-¬† }\r\n-\r\n-} \n+export class RegisterComponent {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748838150789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,144 @@\n import { Component } from '@angular/core';\r\n+import { RouterModule, Router } from '@angular/router'; // Ensure Router is imported for navigation\r\n+import { FormsModule } from '@angular/forms'; // Required for ngModel\r\n \r\n-import { RouterModule } from '@angular/router';\r\n+// Import Firebase services from AngularFire\r\n+import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n+import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n \r\n+@Component({\r\n+  selector: 'app-register',\r\n+  standalone: true,\r\n+  imports: [\r\n+    RouterModule, // For routerLink\r\n+    FormsModule, ¬†// For two-way data binding [(ngModel)]\r\n+  ],\r\n+  templateUrl: './register.component.html',\r\n+  styleUrls: ['./register.component.css']\r\n+})\r\n+export class RegisterComponent {\r\n+  // Form fields\r\n\\ No newline at end of file\n+  fullName!: string;\r\n+  email!: string;\r\n+  phone!: string;\r\n+  birthDate!: string;\r\n+  password!: string;\r\n+  confirmPassword!: string;\r\n+  acceptTerms: boolean = false;\r\n \r\n+  // Messages for user feedback\r\n+  message: string = '';\r\n+  messageType: 'success' | 'error' | '' = '';\r\n \r\n-@Component({\r\n+  /**\r\n+   * Injects the Router, Auth (Firebase Authentication), and Firestore (Firebase Database) services.\r\n+   * @param router Angular's Router service for navigation.\r\n+   * @param auth AngularFire's Auth service.\r\n+   * @param firestore AngularFire's Firestore service.\r\n+   */\r\n+  constructor(\r\n+    private router: Router,\r\n+    private auth: Auth,\r\n+    private firestore: Firestore\r\n+  ) {}\r\n \r\n-¬† selector: 'app-register',\r\n+  /**\r\n+   * Handles the registration form submission.\r\n+   * Performs client-side validation and interacts with Firebase for user creation and data storage.\r\n+   */\r\n+  async onRegisterSubmit(): Promise<void> {\r\n+    this.resetMessages(); // Clear previous messages\r\n \r\n-¬† standalone: true,\r\n+    // Client-side validation checks\r\n+    if (this.password !== this.confirmPassword) {\r\n+      this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n+      return;\r\n+    }\r\n \r\n-¬† imports: [RouterModule], ¬†// <--- Importa el m√≥dulo de enrutamiento\r\n+    if (this.password.length < 6) {\r\n+      this.showMessage('La contrase√±a debe tener al menos 6 caracteres.', 'error');\r\n+      return;\r\n+    }\r\n \r\n-¬† templateUrl: './register.component.html',\r\n+    if (!this.acceptTerms) {\r\n+      this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n+      return;\r\n+    }\r\n \r\n-¬† styleUrls: ['./register.component.css']\r\n+    try {\r\n+      // 1. Create user in Firebase Authentication\r\n+      const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n+      const user = userCredential.user;\r\n+      console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n \r\n-})\r\n+      // 2. Save additional user information to Firestore\r\n+      await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n+        fullName: this.fullName,\r\n+        email: this.email,\r\n+        phone: this.phone,\r\n+        birthDate: this.birthDate,\r\n+        createdAt: new Date(), // Timestamp of user creation\r\n+      });\r\n \r\n-export class RegisterComponent {}\n+      this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n+\r\n+      // Redirect to login page after a short delay\r\n+      setTimeout(() => {\r\n+        this.router.navigate(['/login']);\r\n+      }, 2000);\r\n+\r\n+    } catch (error: any) {\r\n+      console.error(\"Error durante el registro:\", error);\r\n+      let errorMessage = 'Error al registrar la cuenta.';\r\n+\r\n+      // Provide user-friendly error messages based on Firebase error codes\r\n+      switch (error.code) {\r\n+        case 'auth/email-already-in-use':\r\n+          errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n+          break;\r\n+        case 'auth/invalid-email':\r\n+          errorMessage = 'El formato del correo electr√≥nico es inv√°lido.';\r\n+          break;\r\n+        case 'auth/operation-not-allowed':\r\n+          errorMessage = 'El registro con email/contrase√±a no est√° habilitado. Contacta al administrador.';\r\n+          break;\r\n+        case 'auth/weak-password':\r\n+          errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n+          break;\r\n+        default:\r\n+          errorMessage += ` (${error.message})`; // Fallback for unhandled errors\r\n+      }\r\n+      this.showMessage(errorMessage, 'error');\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * Displays a message to the user.\r\n+   * @param msg The message to display.\r\n+   * @param type The type of message ('success' or 'error') for styling.\r\n+   */\r\n+  showMessage(msg: string, type: 'success' | 'error'): void {\r\n+    this.message = msg;\r\n+    this.messageType = type;\r\n+  }\r\n+\r\n+  /**\r\n+   * Resets the message and message type.\r\n+   */\r\n+  resetMessages(): void {\r\n+    this.message = '';\r\n+    this.messageType = '';\r\n+  }\r\n+\r\n+  /**\r\n+   * Toggles the visibility of a password input field.\r\n+   * @param inputElement The HTML input element for the password.\r\n+   * @param buttonElement The HTML button element that triggers the toggle.\r\n+   */\r\n+  togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n+    const type = inputElement.type === 'password' ? 'text' : 'password';\r\n+    inputElement.type = type;\r\n+    // Update the button text/icon based on visibility\r\n+    buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748839297312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,58 @@\n import { Component } from '@angular/core';\r\n-import { RouterModule, Router } from '@angular/router'; // Ensure Router is imported for navigation\r\n-import { FormsModule } from '@angular/forms'; // Required for ngModel\r\n+import { RouterModule, Router } from '@angular/router'; // Asegura que Router est√© importado para la navegaci√≥n\r\n+import { FormsModule } from '@angular/forms'; // Necesario para ngModel\r\n+import { CommonModule } from '@angular/common'; // ¬°IMPORTANTE: A√±ade esta l√≠nea!\r\n \r\n-// Import Firebase services from AngularFire\r\n+// Importa los servicios de Firebase de AngularFire\r\n import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n \r\n @Component({\r\n   selector: 'app-register',\r\n   standalone: true,\r\n   imports: [\r\n-    RouterModule, // For routerLink\r\n-    FormsModule, ¬†// For two-way data binding [(ngModel)]\r\n+    RouterModule, // Para routerLink\r\n+    FormsModule,  // Para el enlace de datos bidireccional [(ngModel)]\r\n+    CommonModule, // ¬°IMPORTANTE: A√±ade CommonModule aqu√≠ para ngIf y ngClass!\r\n   ],\r\n   templateUrl: './register.component.html',\r\n   styleUrls: ['./register.component.css']\r\n })\r\n export class RegisterComponent {\r\n-  // Form fields\r\n+  // Campos del formulario\r\n   fullName!: string;\r\n   email!: string;\r\n   phone!: string;\r\n   birthDate!: string;\r\n   password!: string;\r\n   confirmPassword!: string;\r\n   acceptTerms: boolean = false;\r\n \r\n-  // Messages for user feedback\r\n+  // Mensajes para la retroalimentaci√≥n del usuario\r\n   message: string = '';\r\n   messageType: 'success' | 'error' | '' = '';\r\n \r\n   /**\r\n-   * Injects the Router, Auth (Firebase Authentication), and Firestore (Firebase Database) services.\r\n-   * @param router Angular's Router service for navigation.\r\n-   * @param auth AngularFire's Auth service.\r\n-   * @param firestore AngularFire's Firestore service.\r\n+   * Inyecta los servicios Router, Auth (Autenticaci√≥n de Firebase) y Firestore (Base de datos de Firebase).\r\n+   * @param router El servicio Router de Angular para la navegaci√≥n.\r\n+   * @param auth El servicio Auth de AngularFire.\r\n+   * @param firestore El servicio Firestore de AngularFire.\r\n    */\r\n   constructor(\r\n     private router: Router,\r\n     private auth: Auth,\r\n     private firestore: Firestore\r\n   ) {}\r\n \r\n   /**\r\n-   * Handles the registration form submission.\r\n-   * Performs client-side validation and interacts with Firebase for user creation and data storage.\r\n+   * Maneja el env√≠o del formulario de registro.\r\n+   * Realiza la validaci√≥n del lado del cliente e interact√∫a con Firebase para la creaci√≥n de usuarios y el almacenamiento de datos.\r\n    */\r\n   async onRegisterSubmit(): Promise<void> {\r\n-    this.resetMessages(); // Clear previous messages\r\n+    this.resetMessages(); // Limpia los mensajes anteriores\r\n \r\n-    // Client-side validation checks\r\n+    // Validaciones del lado del cliente\r\n     if (this.password !== this.confirmPassword) {\r\n       this.showMessage('Las contrase√±as no coinciden.', 'error');\r\n       return;\r\n     }\r\n@@ -65,34 +67,34 @@\n       return;\r\n     }\r\n \r\n     try {\r\n-      // 1. Create user in Firebase Authentication\r\n+      // 1. Crear el usuario en Firebase Authentication\r\n       const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n       const user = userCredential.user;\r\n       console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n \r\n-      // 2. Save additional user information to Firestore\r\n+      // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n       await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n         fullName: this.fullName,\r\n         email: this.email,\r\n         phone: this.phone,\r\n         birthDate: this.birthDate,\r\n-        createdAt: new Date(), // Timestamp of user creation\r\n+        createdAt: new Date(), // Marca de tiempo de la creaci√≥n del usuario\r\n       });\r\n \r\n       this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n \r\n-      // Redirect to login page after a short delay\r\n+      // Redirigir a la p√°gina de inicio de sesi√≥n despu√©s de un breve retraso\r\n       setTimeout(() => {\r\n         this.router.navigate(['/login']);\r\n       }, 2000);\r\n \r\n     } catch (error: any) {\r\n       console.error(\"Error durante el registro:\", error);\r\n       let errorMessage = 'Error al registrar la cuenta.';\r\n \r\n-      // Provide user-friendly error messages based on Firebase error codes\r\n+      // Proporcionar mensajes de error amigables basados en los c√≥digos de error de Firebase\r\n       switch (error.code) {\r\n         case 'auth/email-already-in-use':\r\n           errorMessage = 'El correo electr√≥nico ya est√° registrado.';\r\n           break;\r\n@@ -105,40 +107,40 @@\n         case 'auth/weak-password':\r\n           errorMessage = 'La contrase√±a es demasiado d√©bil.';\r\n           break;\r\n         default:\r\n-          errorMessage += ` (${error.message})`; // Fallback for unhandled errors\r\n+          errorMessage += ` (${error.message})`; // Fallback para errores no manejados\r\n       }\r\n       this.showMessage(errorMessage, 'error');\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Displays a message to the user.\r\n-   * @param msg The message to display.\r\n-   * @param type The type of message ('success' or 'error') for styling.\r\n+   * Muestra un mensaje al usuario.\r\n+   * @param msg El mensaje a mostrar.\r\n+   * @param type El tipo de mensaje ('success' o 'error') para el estilo.\r\n    */\r\n   showMessage(msg: string, type: 'success' | 'error'): void {\r\n     this.message = msg;\r\n     this.messageType = type;\r\n   }\r\n \r\n   /**\r\n-   * Resets the message and message type.\r\n+   * Restablece el mensaje y el tipo de mensaje.\r\n    */\r\n   resetMessages(): void {\r\n     this.message = '';\r\n     this.messageType = '';\r\n   }\r\n \r\n   /**\r\n-   * Toggles the visibility of a password input field.\r\n-   * @param inputElement The HTML input element for the password.\r\n-   * @param buttonElement The HTML button element that triggers the toggle.\r\n+   * Alterna la visibilidad de un campo de entrada de contrase√±a.\r\n+   * @param inputElement El elemento HTML input para la contrase√±a.\r\n+   * @param buttonElement El elemento HTML button que activa el cambio.\r\n    */\r\n   togglePasswordVisibility(inputElement: HTMLInputElement, buttonElement: HTMLButtonElement): void {\r\n     const type = inputElement.type === 'password' ? 'text' : 'password';\r\n     inputElement.type = type;\r\n-    // Update the button text/icon based on visibility\r\n+    // Actualiza el texto/icono del bot√≥n seg√∫n la visibilidad\r\n     buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748846448601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-import { Component } from '@angular/core';\r\n-import { RouterModule, Router } from '@angular/router'; // Asegura que Router est√© importado para la navegaci√≥n\r\n-import { FormsModule } from '@angular/forms'; // Necesario para ngModel\r\n-import { CommonModule } from '@angular/common'; // ¬°IMPORTANTE: A√±ade esta l√≠nea!\r\n+import { Component, OnInit } from '@angular/core'; // A√±ade OnInit aqu√≠\r\n+import { RouterModule, Router, ActivatedRoute } from '@angular/router'; // Asegura que ActivatedRoute tambi√©n est√© importado\r\n+import { FormsModule } from '@angular/forms';\r\n+import { CommonModule } from '@angular/common'; // Importante para ngIf y ngClass\r\n \r\n // Importa los servicios de Firebase de AngularFire\r\n import { Auth, createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n import { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\n@@ -12,14 +12,14 @@\n   standalone: true,\r\n   imports: [\r\n     RouterModule, // Para routerLink\r\n     FormsModule,  // Para el enlace de datos bidireccional [(ngModel)]\r\n-    CommonModule, // ¬°IMPORTANTE: A√±ade CommonModule aqu√≠ para ngIf y ngClass!\r\n+    CommonModule, // Importante para ngIf y ngClass\r\n   ],\r\n   templateUrl: './register.component.html',\r\n   styleUrls: ['./register.component.css']\r\n })\r\n-export class RegisterComponent {\r\n+export class RegisterComponent implements OnInit { // Implementa OnInit\r\n   // Campos del formulario\r\n   fullName!: string;\r\n   email!: string;\r\n   phone!: string;\r\n@@ -27,25 +27,46 @@\n   password!: string;\r\n   confirmPassword!: string;\r\n   acceptTerms: boolean = false;\r\n \r\n+  // Propiedad para almacenar el tipo de usuario (doctor/patient) de la URL\r\n+  userType: string | null = null;\r\n+\r\n   // Mensajes para la retroalimentaci√≥n del usuario\r\n   message: string = '';\r\n   messageType: 'success' | 'error' | '' = '';\r\n \r\n   /**\r\n-   * Inyecta los servicios Router, Auth (Autenticaci√≥n de Firebase) y Firestore (Base de datos de Firebase).\r\n+   * Inyecta los servicios Router, Auth (Autenticaci√≥n de Firebase), Firestore (Base de datos de Firebase)\r\n+   * y ActivatedRoute (para leer par√°metros de la URL).\r\n    * @param router El servicio Router de Angular para la navegaci√≥n.\r\n    * @param auth El servicio Auth de AngularFire.\r\n    * @param firestore El servicio Firestore de AngularFire.\r\n+   * @param route El servicio ActivatedRoute para acceder a los par√°metros de consulta de la URL.\r\n    */\r\n   constructor(\r\n     private router: Router,\r\n     private auth: Auth,\r\n-    private firestore: Firestore\r\n+    private firestore: Firestore,\r\n+    private route: ActivatedRoute // Inyecta ActivatedRoute\r\n   ) {}\r\n \r\n   /**\r\n+   * Se ejecuta al inicializar el componente. Lee el par√°metro 'type' de la URL.\r\n+   */\r\n+  ngOnInit(): void {\r\n+    this.route.queryParams.subscribe(params => {\r\n+      this.userType = params['type'];\r\n+      console.log('RegisterComponent ngOnInit - Tipo de usuario para registro (desde URL):', this.userType);\r\n+      if (!this.userType || (this.userType !== 'doctor' && this.userType !== 'patient')) {\r\n+        console.warn('Advertencia: El tipo de usuario en la URL de registro no es v√°lido o no est√° especificado. Se recomienda usar ?type=doctor o ?type=patient.');\r\n+        // Puedes establecer un valor por defecto o mostrar un mensaje al usuario\r\n+        // this.userType = 'patient'; // Ejemplo: por defecto a paciente\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  /**\r\n    * Maneja el env√≠o del formulario de registro.\r\n    * Realiza la validaci√≥n del lado del cliente e interact√∫a con Firebase para la creaci√≥n de usuarios y el almacenamiento de datos.\r\n    */\r\n   async onRegisterSubmit(): Promise<void> {\r\n@@ -66,29 +87,41 @@\n       this.showMessage('Debes aceptar la pol√≠tica de privacidad y el tratamiento de datos personales.', 'error');\r\n       return;\r\n     }\r\n \r\n+    // Validaci√≥n adicional: Asegurarse de que tenemos un tipo de usuario v√°lido para guardar\r\n+    if (!this.userType || (this.userType !== 'doctor' && this.userType !== 'patient')) {\r\n+      this.showMessage('Error: El tipo de usuario para el registro no est√° definido o es inv√°lido. Por favor, aseg√∫rate de acceder a esta p√°gina con un tipo de usuario v√°lido (ej. /register?type=patient).', 'error');\r\n+      return;\r\n+    }\r\n+\r\n     try {\r\n       // 1. Crear el usuario en Firebase Authentication\r\n       const userCredential = await createUserWithEmailAndPassword(this.auth, this.email, this.password);\r\n       const user = userCredential.user;\r\n       console.log(\"Usuario registrado en Authentication:\", user.uid);\r\n \r\n-      // 2. Guardar informaci√≥n adicional del usuario en Firestore\r\n-      await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n-        fullName: this.fullName,\r\n-        email: this.email,\r\n-        phone: this.phone,\r\n-        birthDate: this.birthDate,\r\n-        createdAt: new Date(), // Marca de tiempo de la creaci√≥n del usuario\r\n-      });\r\n+      // 2. Guardar informaci√≥n adicional del usuario en Firestore, incluyendo el rol\r\n+      if (user && user.uid) {\r\n+        await setDoc(doc(this.firestore, \"users\", user.uid), {\r\n+          fullName: this.fullName,\r\n+          email: this.email,\r\n+          phone: this.phone,\r\n+          birthDate: this.birthDate,\r\n+          createdAt: new Date(), // Marca de tiempo de la creaci√≥n del usuario\r\n+          role: this.userType // <-- ¬°AQU√ç ES DONDE SE GUARDA EL ROL EN FIRESTORE!\r\n+        });\r\n \r\n-      this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n+        this.showMessage('¬°Registro exitoso! Redirigiendo a iniciar sesi√≥n...', 'success');\r\n \r\n-      // Redirigir a la p√°gina de inicio de sesi√≥n despu√©s de un breve retraso\r\n-      setTimeout(() => {\r\n-        this.router.navigate(['/login']);\r\n-      }, 2000);\r\n+        // Redirigir a la p√°gina de inicio de sesi√≥n despu√©s de un breve retraso\r\n+        setTimeout(() => {\r\n+          // Opcional: pasar el tipo de usuario al login si tu login lo usa para pre-seleccionar algo\r\n+          this.router.navigate(['/login'], { queryParams: { type: this.userType } });\r\n+        }, 2000);\r\n+      } else {\r\n+        this.showMessage('Error: No se pudo obtener el UID del usuario despu√©s del registro.', 'error');\r\n+      }\r\n \r\n     } catch (error: any) {\r\n       console.error(\"Error durante el registro:\", error);\r\n       let errorMessage = 'Error al registrar la cuenta.';\r\n"
                },
                {
                    "date": 1748847551584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,5 +175,5 @@\n     inputElement.type = type;\r\n     // Actualiza el texto/icono del bot√≥n seg√∫n la visibilidad\r\n     buttonElement.textContent = (type === 'password') ? 'üëÅÔ∏è' : 'üîí';\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1747534416230,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [RouterModule],  // <--- Importa el m√≥dulo de enrutamiento\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {}\r\n"
        }
    ]
}