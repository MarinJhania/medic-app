{
    "sourceFile": "src/app/patient-profile/patient-profile.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747631623316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747631623316,
            "name": "Commit-0",
            "content": "// patient-profile.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; // Para ngIf, ngFor\r\nimport { PatientSidebarMenuComponent } from '../patient-sidebar-menu/patient-sidebar-menu.component'; // Tu menú lateral\r\nimport { Router, RouterModule } from '@angular/router'; // Si necesitas navegar después de guardar\r\nimport { FormsModule } from '@angular/forms'; // <--- Importa FormsModule para [(ngModel)]\r\n\r\n@Component({\r\n  selector: 'app-patient-profile',\r\n  standalone: true, // <--- Marca como standalone\r\n  imports: [\r\n    CommonModule,\r\n    PatientSidebarMenuComponent,\r\n    RouterModule, // Si usas Router o directivas de router\r\n    FormsModule // <-- Necesario para el two-way binding en los inputs\r\n    // Importa otros componentes o módulos que uses\r\n  ],\r\n  templateUrl: './patient-profile.component.html',\r\n  styleUrls: ['./patient-profile.component.css']\r\n})\r\nexport class PatientProfileComponent implements OnInit {\r\n\r\n  // Propiedad para almacenar los datos del usuario\r\n  userData: any = {\r\n    fullName: '',\r\n    email: '',\r\n    phone: '',\r\n    birthDate: '',\r\n    address: '',\r\n    insuranceNumber: '',\r\n    emergencyContactName: '',\r\n    emergencyContactPhone: ''\r\n  };\r\n\r\n  constructor(private router: Router) { } // Inyecta Router si necesitas navegar\r\n\r\n  ngOnInit(): void {\r\n    // Aquí cargarías los datos del usuario actual desde un servicio\r\n    // Ejemplo: this.userService.getUserProfile().subscribe(data => this.userData = data);\r\n    // Por ahora, puedes inicializar con datos de ejemplo si quieres ver el layout con datos\r\n    this.userData = {\r\n       fullName: 'María González López',\r\n       email: 'maria.gonzalez@example.com',\r\n       phone: '555-123-4567',\r\n       birthDate: '1985-06-15', // Formato 'YYYY-MM-DD' para input type=\"date\"\r\n       address: 'Calle Principal 123, Ciudad de México',\r\n       insuranceNumber: 'SEG-987654321',\r\n       emergencyContactName: 'Juan González',\r\n       emergencyContactPhone: '555-987-6543'\r\n    };\r\n  }\r\n\r\n  // Método para manejar el clic en el botón \"Guardar cambios\"\r\n  saveChanges(): void {\r\n    console.log('Guardando cambios del usuario:', this.userData);\r\n\r\n    // **Implementa la lógica de guardado aquí:**\r\n    // 1. Validar los datos del formulario si es necesario\r\n    // 2. Llama a un servicio para enviar los datos actualizados al backend\r\n    // Ejemplo: this.userService.updateUserProfile(this.userData).subscribe({\r\n    //   next: () => {\r\n            console.log('Perfil actualizado exitosamente');\r\n            // 3. Opcional: Muestra un mensaje de éxito al usuario\r\n            // 4. Opcional: Navega a otra página (ej: dashboard)\r\n            // this.router.navigate(['/patient/dashboard']);\r\n    //   },\r\n    //   error: (err) => {\r\n            // Maneja errores, ej: muestra un mensaje de error al usuario\r\n    //       console.error('Error al actualizar el perfil', err);\r\n    //    }\r\n    // });\r\n  }\r\n\r\n  // Si añades un botón Cancelar, podrías tener un método similar\r\n  onCancel(): void {\r\n      console.log('Cancelar edición de perfil');\r\n      // Navegar de regreso sin guardar\r\n      // this.router.navigate(['/patient/dashboard']);\r\n  }\r\n\r\n}"
        }
    ]
}