{
    "sourceFile": "src/app/patient-sidebar-menu/patient-sidebar-menu.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1747613253475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748748084000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,45 @@\n-import { Component, OnInit } from '@angular/core';\r\n-import { CommonModule } from '@angular/common'; // Si usas directivas como ngIf, ngFor, etc. en la plantilla del menú\r\n-// --- Importa RouterLink y RouterLinkActive para que routerLink funcione ---\r\n+import { Component, OnInit, HostBinding } from '@angular/core'; // Importa HostBinding\r\n+import { CommonModule } from '@angular/common';\r\n import { RouterLink, RouterLinkActive } from '@angular/router';\r\n \r\n-\r\n @Component({\r\n-  selector: 'app-patient-sidebar-menu', // Este es el selector que usarás en tus layouts de paciente\r\n-  standalone: true, // <--- Marca como standalone\r\n+  selector: 'app-patient-sidebar-menu',\r\n+  standalone: true,\r\n   imports: [\r\n-    CommonModule, // Si aplica\r\n-    // --- **Asegúrate de que RouterLink y RouterLinkActive estén en este array** ---\r\n+    CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n+  // Propiedad para controlar si el sidebar está abierto o cerrado\r\n+  // Por defecto, lo iniciamos como 'true' para pantallas grandes,\r\n+  // pero lo ajustaremos en ngOnInit para móviles.\r\n+  isSidebarOpen: boolean = true;\r\n+\r\n+  // Usa HostBinding para aplicar la clase 'open' al elemento <app-patient-sidebar-menu>\r\n+  // Esto permite que el CSS en patient-sidebar-menu.component.css que usa '.sidebar.open' funcione\r\n+  @HostBinding('class.open') get opened() {\r\n+    return this.isSidebarOpen;\r\n+  }\r\n+\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n+    // En el inicio del componente, verifica el tamaño de la ventana.\r\n+    // Si es una pantalla pequeña (menos de 768px), el sidebar debe estar cerrado por defecto.\r\n+    if (window.innerWidth < 768) {\r\n+      this.isSidebarOpen = false;\r\n+    }\r\n   }\r\n \r\n+  // Método para alternar el estado del sidebar (abrir/cerrar)\r\n+  toggleSidebar(): void {\r\n+    this.isSidebarOpen = !this.isSidebarOpen;\r\n+    // Aquí puedes emitir un evento si el componente padre necesita saber el estado del sidebar\r\n+    // Por ejemplo: this.sidebarToggle.emit(this.isSidebarOpen);\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748748183091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, OnInit, HostBinding } from '@angular/core'; // Importa HostBinding\r\n+import { Component, OnInit, HostBinding } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n import { RouterLink, RouterLinkActive } from '@angular/router';\r\n \r\n @Component({\r\n@@ -14,15 +14,10 @@\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Propiedad para controlar si el sidebar está abierto o cerrado\r\n-  // Por defecto, lo iniciamos como 'true' para pantallas grandes,\r\n-  // pero lo ajustaremos en ngOnInit para móviles.\r\n-  isSidebarOpen: boolean = true;\r\n+  isSidebarOpen: boolean = true; // Por defecto, lo iniciamos como 'true' para pantallas grandes\r\n \r\n-  // Usa HostBinding para aplicar la clase 'open' al elemento <app-patient-sidebar-menu>\r\n-  // Esto permite que el CSS en patient-sidebar-menu.component.css que usa '.sidebar.open' funcione\r\n   @HostBinding('class.open') get opened() {\r\n     return this.isSidebarOpen;\r\n   }\r\n \r\n@@ -35,11 +30,8 @@\n       this.isSidebarOpen = false;\r\n     }\r\n   }\r\n \r\n-  // Método para alternar el estado del sidebar (abrir/cerrar)\r\n   toggleSidebar(): void {\r\n     this.isSidebarOpen = !this.isSidebarOpen;\r\n-    // Aquí puedes emitir un evento si el componente padre necesita saber el estado del sidebar\r\n-    // Por ejemplo: this.sidebarToggle.emit(this.isSidebarOpen);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748749449828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, OnInit, HostBinding } from '@angular/core';\r\n+import { Component, OnInit, HostListener } from '@angular/core'; // Agregamos HostListener\r\n import { CommonModule } from '@angular/common';\r\n import { RouterLink, RouterLinkActive } from '@angular/router';\r\n \r\n @Component({\r\n@@ -14,24 +14,91 @@\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  isSidebarOpen: boolean = true; // Por defecto, lo iniciamos como 'true' para pantallas grandes\r\n+  // Propiedades para controlar el estado del sidebar\r\n+  isSidebarHidden: boolean = false; // True si el sidebar está completamente oculto\r\n+  isSidebarCollapsed: boolean = false; // True si el sidebar está visible pero colapsado (ancho reducido)\r\n+  isSidebarVisibleMobile: boolean = false; // True si el sidebar es visible en pantallas móviles\r\n \r\n-  @HostBinding('class.open') get opened() {\r\n-    return this.isSidebarOpen;\r\n+  constructor() { }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n+    this.checkScreenSize();\r\n   }\r\n \r\n-  constructor() { }\r\n+  // Escucha los cambios de tamaño de la ventana del navegador\r\n+  @HostListener('window:resize', ['$event'])\r\n+  onResize(event: any) {\r\n+    this.checkScreenSize();\r\n+  }\r\n \r\n-  ngOnInit(): void {\r\n-    // En el inicio del componente, verifica el tamaño de la ventana.\r\n-    // Si es una pantalla pequeña (menos de 768px), el sidebar debe estar cerrado por defecto.\r\n-    if (window.innerWidth < 768) {\r\n-      this.isSidebarOpen = false;\r\n+  /**\r\n+   * Determina el estado inicial o por defecto del sidebar\r\n+   * basándose en el ancho actual de la pantalla.\r\n+   */\r\n+  checkScreenSize() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n+      this.isSidebarHidden = true;\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n+      this.isSidebarCollapsed = true;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n+    } else {\r\n+      // En escritorios grandes (más de 1024px), expandido por defecto\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n-  toggleSidebar(): void {\r\n-    this.isSidebarOpen = !this.isSidebarOpen;\r\n+  /**\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   */\r\n+  toggleSidebar() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n+      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n+      // Si es visible en móvil, no debe estar \"hidden\" en el sentido de escritorio\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      if (this.isSidebarCollapsed) {\r\n+          // Si está colapsado, al hacer clic, pasa a oculto\r\n+          this.isSidebarHidden = true;\r\n+          this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+          // Si está oculto, al hacer clic, pasa a colapsado\r\n+          this.isSidebarCollapsed = true;\r\n+          this.isSidebarHidden = false;\r\n+      } else {\r\n+          // Si por alguna razón no tiene ninguna de las dos clases (quizás estaba expandido por CSS), lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n+      }\r\n+    } else {\r\n+      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+    }\r\n   }\r\n+\r\n+  /**\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   * Esto es opcional, pero mejora la UX en dispositivos pequeños.\r\n+   */\r\n+  closeSidebarOnMobile() {\r\n+    if (window.innerWidth < 768) {\r\n+      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = true;\r\n+    }\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748754409432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-import { Component, OnInit, HostListener } from '@angular/core'; // Agregamos HostListener\r\n-import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive } from '@angular/router';\r\n+import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n+import { CommonModule } from '@angular/common'; // Si usas directivas como ngIf, ngFor, etc. en la plantilla del menú\r\n+import { RouterLink, RouterLinkActive } from '@angular/router'; // Importa RouterLink y RouterLinkActive para que routerLink funcione\r\n \r\n @Component({\r\n-  selector: 'app-patient-sidebar-menu',\r\n-  standalone: true,\r\n+  selector: 'app-patient-sidebar-menu', // Este es el selector que usarás en tus layouts de paciente\r\n+  standalone: true, // <--- Marca como standalone\r\n   imports: [\r\n-    CommonModule,\r\n+    CommonModule, // Si aplica\r\n     RouterLink,\r\n     RouterLinkActive\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n"
                },
                {
                    "date": 1748755052927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,25 @@\n import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n-import { CommonModule } from '@angular/common'; // Si usas directivas como ngIf, ngFor, etc. en la plantilla del menú\r\n-import { RouterLink, RouterLinkActive } from '@angular/router'; // Importa RouterLink y RouterLinkActive para que routerLink funcione\r\n+import { CommonModule } from '@angular/common';\r\n+import { RouterLink, RouterLinkActive } from '@angular/router';\r\n \r\n @Component({\r\n-  selector: 'app-patient-sidebar-menu', // Este es el selector que usarás en tus layouts de paciente\r\n-  standalone: true, // <--- Marca como standalone\r\n+  selector: 'app-patient-sidebar-menu', // Mantén tu selector específico para el paciente\r\n+  standalone: true,\r\n   imports: [\r\n-    CommonModule, // Si aplica\r\n+    CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Propiedades para controlar el estado del sidebar\r\n-  isSidebarHidden: boolean = false; // True si el sidebar está completamente oculto\r\n-  isSidebarCollapsed: boolean = false; // True si el sidebar está visible pero colapsado (ancho reducido)\r\n-  isSidebarVisibleMobile: boolean = false; // True si el sidebar es visible en pantallas móviles\r\n+  // Propiedades para controlar el estado del sidebar del paciente\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n@@ -28,17 +28,19 @@\n   }\r\n \r\n   // Escucha los cambios de tamaño de la ventana del navegador\r\n   @HostListener('window:resize', ['$event'])\r\n-  onResize(event: any) {\r\n+  onResize(event: Event): void { // Usa 'Event' en lugar de 'any' para mejor tipado\r\n     this.checkScreenSize();\r\n   }\r\n \r\n+  // --- Lógica para Controlar el Sidebar ---\r\n+\r\n   /**\r\n    * Determina el estado inicial o por defecto del sidebar\r\n    * basándose en el ancho actual de la pantalla.\r\n    */\r\n-  checkScreenSize() {\r\n+  checkScreenSize(): void {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n       // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n@@ -59,46 +61,32 @@\n   }\r\n \r\n   /**\r\n    * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   * dependiendo del tamaño de la pantalla actual.\r\n    */\r\n-  toggleSidebar() {\r\n+  toggleSidebar(): void {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n       // Comportamiento en móviles: solo alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      // Si es visible en móvil, no debe estar \"hidden\" en el sentido de escritorio\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n       // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n       if (this.isSidebarCollapsed) {\r\n-          // Si está colapsado, al hacer clic, pasa a oculto\r\n-          this.isSidebarHidden = true;\r\n-          this.isSidebarCollapsed = false;\r\n+        this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n+        this.isSidebarCollapsed = false;\r\n       } else if (this.isSidebarHidden) {\r\n-          // Si está oculto, al hacer clic, pasa a colapsado\r\n-          this.isSidebarCollapsed = true;\r\n-          this.isSidebarHidden = false;\r\n+        this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n+        this.isSidebarHidden = false;\r\n       } else {\r\n-          // Si por alguna razón no tiene ninguna de las dos clases (quizás estaba expandido por CSS), lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n+        // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n+        this.isSidebarCollapsed = true;\r\n       }\r\n     } else {\r\n       // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n       this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n     }\r\n   }\r\n-\r\n-  /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n-   * Esto es opcional, pero mejora la UX en dispositivos pequeños.\r\n-   */\r\n-  closeSidebarOnMobile() {\r\n-    if (window.innerWidth < 768) {\r\n-      this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true;\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748756376492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,26 @@\n-import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n-import { CommonModule } from '@angular/common';\r\n+import { Component, OnInit } from '@angular/core';\r\n+import { CommonModule } from '@angular/common'; // Si usas directivas como ngIf, ngFor, etc. en la plantilla del menú\r\n+// --- Importa RouterLink y RouterLinkActive para que routerLink funcione ---\r\n import { RouterLink, RouterLinkActive } from '@angular/router';\r\n \r\n+\r\n @Component({\r\n-  selector: 'app-patient-sidebar-menu', // Mantén tu selector específico para el paciente\r\n-  standalone: true,\r\n+  selector: 'app-patient-sidebar-menu', // Este es el selector que usarás en tus layouts de paciente\r\n+  standalone: true, // <--- Marca como standalone\r\n   imports: [\r\n-    CommonModule,\r\n+    CommonModule, // Si aplica\r\n+    // --- **Asegúrate de que RouterLink y RouterLinkActive estén en este array** ---\r\n     RouterLink,\r\n     RouterLinkActive\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Propiedades para controlar el estado del sidebar del paciente\r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n-\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n-    this.checkScreenSize();\r\n   }\r\n \r\n-  // Escucha los cambios de tamaño de la ventana del navegador\r\n-  @HostListener('window:resize', ['$event'])\r\n-  onResize(event: Event): void { // Usa 'Event' en lugar de 'any' para mejor tipado\r\n-    this.checkScreenSize();\r\n-  }\r\n-\r\n-  // --- Lógica para Controlar el Sidebar ---\r\n-\r\n-  /**\r\n-   * Determina el estado inicial o por defecto del sidebar\r\n-   * basándose en el ancho actual de la pantalla.\r\n-   */\r\n-  checkScreenSize(): void {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true;\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n-      this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n-    } else {\r\n-      // En escritorios grandes (más de 1024px), expandido por defecto\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual.\r\n-   */\r\n-  toggleSidebar(): void {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n-      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n-      if (this.isSidebarCollapsed) {\r\n-        this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n-        this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-        this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n-        this.isSidebarHidden = false;\r\n-      } else {\r\n-        // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n-        this.isSidebarCollapsed = true;\r\n-      }\r\n-    } else {\r\n-      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n-      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748756785874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n+import { CommonModule } from '@angular/common';\r\n+import { RouterLink, RouterLinkActive } from '@angular/router';\r\n+\r\n+@Component({\r\n+  selector: 'app-patient-sidebar-menu', // Mantén tu selector específico para el paciente\r\n+  standalone: true,\r\n+  imports: [\r\n+    CommonModule,\r\n+    RouterLink,\r\n+    RouterLinkActive\r\n+  ],\r\n+  templateUrl: './patient-sidebar-menu.component.html',\r\n+  styleUrls: ['./patient-sidebar-menu.component.css']\r\n+})\r\n+export class PatientSidebarMenuComponent implements OnInit {\r\n+\r\n+  // Propiedades para controlar el estado del sidebar del paciente\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n+\r\n+  constructor() { }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n+    this.checkScreenSize();\r\n+  }\r\n+\r\n+  // Escucha los cambios de tamaño de la ventana del navegador\r\n+  @HostListener('window:resize', ['$event'])\r\n+  onResize(event: Event): void { // Usa 'Event' en lugar de 'any' para mejor tipado\r\n+    this.checkScreenSize();\r\n+  }\r\n+\r\n+  // --- Lógica para Controlar el Sidebar ---\r\n+\r\n+  /**\r\n+   * Determina el estado inicial o por defecto del sidebar\r\n+   * basándose en el ancho actual de la pantalla.\r\n+   */\r\n+  checkScreenSize(): void {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n+      this.isSidebarHidden = true;\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n+      this.isSidebarCollapsed = true;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n+    } else {\r\n+      // En escritorios grandes (más de 1024px), expandido por defecto\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño de la pantalla actual.\r\n+   */\r\n+  toggleSidebar(): void {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n+      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      if (this.isSidebarCollapsed) {\r\n+        this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n+        this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+        this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n+        this.isSidebarHidden = false;\r\n+      } else {\r\n+        // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n+        this.isSidebarCollapsed = true;\r\n+      }\r\n+    } else {\r\n+      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748757442297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,30 @@\n-import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n+import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive } from '@angular/router';\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n \r\n @Component({\r\n-  selector: 'app-patient-sidebar-menu', // Mantén tu selector específico para el paciente\r\n+  selector: 'app-patient-sidebar-menu', // Selector para el componente del menú del paciente\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n-    RouterLinkActive\r\n+    RouterLinkActive,\r\n+    RouterOutlet // <--- ¡Importa RouterOutlet aquí!\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Propiedades para controlar el estado del sidebar del paciente\r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n+  // Propiedades para controlar el estado del sidebar\r\n+  isSidebarHidden: boolean = false; // True si el sidebar está completamente oculto\r\n+  isSidebarCollapsed: boolean = false; // True si el sidebar está visible pero colapsado (ancho reducido)\r\n+  isSidebarVisibleMobile: boolean = false; // True si el sidebar es visible en pantallas móviles\r\n \r\n+  // Propiedad para acceder a window.innerWidth en el template (necesaria para *ngIfs en íconos)\r\n+  window: Window = window;\r\n+\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n     // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n@@ -28,91 +32,83 @@\n   }\r\n \r\n   // Escucha los cambios de tamaño de la ventana del navegador\r\n   @HostListener('window:resize', ['$event'])\r\n-  onResize(event: Event): void { // Usa 'Event' en lugar de 'any' para mejor tipado\r\n+  onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n-  // --- Lógica para Controlar el Sidebar ---\r\n-\r\n   /**\r\n    * Determina el estado inicial o por defecto del sidebar\r\n    * basándose en el ancho actual de la pantalla.\r\n    */\r\n-  checkScreenSize(): void {\r\n+  checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n       // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true;\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n+      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n+      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n+      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n+      // En tabletas/escritorios pequeños, colapsado por defecto\r\n       this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = false; // No está completamente oculto\r\n+      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n     } else {\r\n-      // En escritorios grandes (más de 1024px), expandido por defecto\r\n+      // En escritorios grandes, expandido por defecto\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n    * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual.\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n    */\r\n-  toggleSidebar(): void {\r\n+  toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n+      // Comportamiento en móviles: alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n+      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y expandido/oculto\r\n+      // En este rango, el botón principal colapsa/expande el sidebar.\r\n+      // Si está colapsado, al hacer clic, pasa a expandido (o completamente oculto si se prefiere esa UX)\r\n+      // Dado que el default es colapsado, este clic debería llevarlo a expandido si se permitiera,\r\n+      // o a hidden si se busca un comportamiento \"toggle\" de 2 estados (colapsado <-> hidden)\r\n+      // Para este CSS, pasaremos de colapsado (60px) a hidden.\r\n       if (this.isSidebarCollapsed) {\r\n-        this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n-        this.isSidebarCollapsed = false;\r\n+          // Si está colapsado (60px), al hacer clic, lo descolapsa (vuelve a 400px o a oculto si quieres eso)\r\n+          // Dado que el default es colapsado, este clic debería llevarlo a expandido si se permitiera,\r\n+          // o a hidden si se busca un comportamiento \"toggle\" de 2 estados (colapsado <-> hidden)\r\n+          // Para este CSS, pasaremos de colapsado (60px) a hidden.\r\n+          this.isSidebarHidden = true; // Lo oculta completamente\r\n+          this.isSidebarCollapsed = false; // No está colapsado\r\n       } else if (this.isSidebarHidden) {\r\n-        this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n-        this.isSidebarHidden = false;\r\n-      } else {\r\n-        // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n-        this.isSidebarCollapsed = true;\r\n+          // Si está oculto, al hacer clic, lo vuelve a colapsar (60px)\r\n+          this.isSidebarCollapsed = true;\r\n+          this.isSidebarHidden = false;\r\n       }\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     } else {\r\n       // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n\\ No newline at end of file\n       this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     }\r\n   }\r\n-}\n-import { Component, OnInit } from '@angular/core';\r\n-import { CommonModule } from '@angular/common'; // Si usas directivas como ngIf, ngFor, etc. en la plantilla del menú\r\n-// --- Importa RouterLink y RouterLinkActive para que routerLink funcione ---\r\n-import { RouterLink, RouterLinkActive } from '@angular/router';\r\n \r\n-\r\n-@Component({\r\n-  selector: 'app-patient-sidebar-menu', // Este es el selector que usarás en tus layouts de paciente\r\n-  standalone: true, // <--- Marca como standalone\r\n-  imports: [\r\n-    CommonModule, // Si aplica\r\n-    // --- **Asegúrate de que RouterLink y RouterLinkActive estén en este array** ---\r\n-    RouterLink,\r\n-    RouterLinkActive\r\n-  ],\r\n-  templateUrl: './patient-sidebar-menu.component.html',\r\n-  styleUrls: ['./patient-sidebar-menu.component.css']\r\n-})\r\n-export class PatientSidebarMenuComponent implements OnInit {\r\n-\r\n-  constructor() { }\r\n-\r\n-  ngOnInit(): void {\r\n+  /**\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   */\r\n+  closeSidebarOnMobile() {\r\n+    if (window.innerWidth < 768) {\r\n+      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n+    }\r\n   }\r\n-\r\n-}\n+}\r\n"
                },
                {
                    "date": 1748757536840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,26 @@\n-import { Component, OnInit, HostListener } from '@angular/core';\r\n+import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n+import { RouterLink, RouterLinkActive } from '@angular/router';\r\n \r\n @Component({\r\n-  selector: 'app-patient-sidebar-menu', // Selector para el componente del menú del paciente\r\n+  selector: 'app-patient-sidebar-menu', // Mantén tu selector específico para el paciente\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n-    RouterLinkActive,\r\n-    RouterOutlet // <--- ¡Importa RouterOutlet aquí!\r\n+    RouterLinkActive\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Propiedades para controlar el estado del sidebar\r\n-  isSidebarHidden: boolean = false; // True si el sidebar está completamente oculto\r\n-  isSidebarCollapsed: boolean = false; // True si el sidebar está visible pero colapsado (ancho reducido)\r\n-  isSidebarVisibleMobile: boolean = false; // True si el sidebar es visible en pantallas móviles\r\n+  // Propiedades para controlar el estado del sidebar del paciente\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n \r\n-  // Propiedad para acceder a window.innerWidth en el template (necesaria para *ngIfs en íconos)\r\n-  window: Window = window;\r\n-\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n     // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n@@ -32,83 +28,65 @@\n   }\r\n \r\n   // Escucha los cambios de tamaño de la ventana del navegador\r\n   @HostListener('window:resize', ['$event'])\r\n-  onResize(event: any) {\r\n+  onResize(event: Event): void { // Usa 'Event' en lugar de 'any' para mejor tipado\r\n     this.checkScreenSize();\r\n   }\r\n \r\n+  // --- Lógica para Controlar el Sidebar ---\r\n+\r\n   /**\r\n    * Determina el estado inicial o por defecto del sidebar\r\n    * basándose en el ancho actual de la pantalla.\r\n    */\r\n-  checkScreenSize() {\r\n+  checkScreenSize(): void {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n       // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n-      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n-      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n+      this.isSidebarHidden = true;\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños, colapsado por defecto\r\n+      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n       this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false; // No está completamente oculto\r\n-      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n     } else {\r\n-      // En escritorios grandes, expandido por defecto\r\n+      // En escritorios grandes (más de 1024px), expandido por defecto\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n    * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   * dependiendo del tamaño de la pantalla actual.\r\n    */\r\n-  toggleSidebar() {\r\n+  toggleSidebar(): void {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre visible y oculto\r\n+      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n-      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y expandido/oculto\r\n-      // En este rango, el botón principal colapsa/expande el sidebar.\r\n-      // Si está colapsado, al hacer clic, pasa a expandido (o completamente oculto si se prefiere esa UX)\r\n-      // Dado que el default es colapsado, este clic debería llevarlo a expandido si se permitiera,\r\n-      // o a hidden si se busca un comportamiento \"toggle\" de 2 estados (colapsado <-> hidden)\r\n-      // Para este CSS, pasaremos de colapsado (60px) a hidden.\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n       if (this.isSidebarCollapsed) {\r\n-          // Si está colapsado (60px), al hacer clic, lo descolapsa (vuelve a 400px o a oculto si quieres eso)\r\n-          // Dado que el default es colapsado, este clic debería llevarlo a expandido si se permitiera,\r\n-          // o a hidden si se busca un comportamiento \"toggle\" de 2 estados (colapsado <-> hidden)\r\n-          // Para este CSS, pasaremos de colapsado (60px) a hidden.\r\n-          this.isSidebarHidden = true; // Lo oculta completamente\r\n-          this.isSidebarCollapsed = false; // No está colapsado\r\n+        this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n+        this.isSidebarCollapsed = false;\r\n       } else if (this.isSidebarHidden) {\r\n-          // Si está oculto, al hacer clic, lo vuelve a colapsar (60px)\r\n-          this.isSidebarCollapsed = true;\r\n-          this.isSidebarHidden = false;\r\n+        this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n+        this.isSidebarHidden = false;\r\n+      } else {\r\n+        // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n+        this.isSidebarCollapsed = true;\r\n       }\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     } else {\r\n       // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n       this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     }\r\n   }\r\n-\r\n-  /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n-   */\r\n-  closeSidebarOnMobile() {\r\n-    if (window.innerWidth < 768) {\r\n-      this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n-    }\r\n-  }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748758021591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,104 @@\n-import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n+import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive } from '@angular/router';\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n \r\n @Component({\r\n-  selector: 'app-patient-sidebar-menu', // Mantén tu selector específico para el paciente\r\n+  selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n-    RouterLinkActive\r\n+    RouterLinkActive,\r\n+    RouterOutlet // Necesario para <router-outlet>\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Propiedades para controlar el estado del sidebar del paciente\r\n   isSidebarHidden: boolean = false;\r\n   isSidebarCollapsed: boolean = false;\r\n   isSidebarVisibleMobile: boolean = false;\r\n \r\n+  window: Window = window; // Para usar window.innerWidth en el template\r\n+\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n     this.checkScreenSize();\r\n   }\r\n \r\n-  // Escucha los cambios de tamaño de la ventana del navegador\r\n   @HostListener('window:resize', ['$event'])\r\n-  onResize(event: Event): void { // Usa 'Event' en lugar de 'any' para mejor tipado\r\n+  onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n-  // --- Lógica para Controlar el Sidebar ---\r\n-\r\n   /**\r\n    * Determina el estado inicial o por defecto del sidebar\r\n    * basándose en el ancho actual de la pantalla.\r\n    */\r\n-  checkScreenSize(): void {\r\n+  checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n       // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true;\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n+      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n+      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n+      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n+      // En tabletas/escritorios pequeños, colapsado por defecto\r\n       this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = false; // No está completamente oculto\r\n+      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n     } else {\r\n-      // En escritorios grandes (más de 1024px), expandido por defecto\r\n+      // En escritorios grandes, expandido por defecto\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n    * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual.\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n    */\r\n-  toggleSidebar(): void {\r\n+  toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n+      // Comportamiento en móviles: alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n+      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n       // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n       if (this.isSidebarCollapsed) {\r\n-        this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n-        this.isSidebarCollapsed = false;\r\n+          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n+          this.isSidebarCollapsed = false;\r\n       } else if (this.isSidebarHidden) {\r\n-        this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n-        this.isSidebarHidden = false;\r\n+          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n+          this.isSidebarHidden = false;\r\n       } else {\r\n-        // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n-        this.isSidebarCollapsed = true;\r\n+          // Si por alguna razón está expandido en este rango, lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n+          this.isSidebarHidden = false;\r\n       }\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     } else {\r\n       // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n       this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     }\r\n   }\r\n+\r\n+  /**\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   */\r\n+  closeSidebarOnMobile() {\r\n+    if (window.innerWidth < 768) {\r\n+      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n+    }\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748763446823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,39 @@\n import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-    RouterOutlet // Necesario para <router-outlet>\r\n+    RouterOutlet\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n+  // Variables de estado del sidebar\r\n+  isSidebarCollapsed: boolean = false; // Controla si el sidebar está colapsado (60px) en desktop/tablet\r\n+  isSidebarHidden: boolean = false;    // Controla si el sidebar está completamente oculto (0px) en desktop\r\n+  isSidebarVisibleMobile: boolean = false; // Controla si el sidebar está visible como overlay en móvil\r\n \r\n-  window: Window = window; // Para usar window.innerWidth en el template\r\n+  // Propiedad para acceder a window.innerWidth en el template\r\n+  get window(): Window {\r\n+    return window;\r\n+  }\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    this.checkScreenSize();\r\n+    this.checkScreenSize(); // Establecer el estado inicial al cargar\r\n   }\r\n \r\n+  // Escucha los cambios de tamaño de la ventana\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n@@ -40,65 +45,60 @@\n   checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n-      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n-      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n+      // En móviles (menos de 768px):\r\n+      // El sidebar está oculto por defecto (no aplica la clase 'visible-mobile' inicialmente).\r\n+      // Las clases 'hidden' y 'collapsed' son para desktop, así que se desactivan aquí.\r\n+      this.isSidebarHidden = false; // El estado de oculto en móvil lo maneja visible-mobile\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarVisibleMobile = false; // Oculto inicialmente en móvil\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños, colapsado por defecto\r\n+      // En tabletas/escritorios pequeños (768px a 1024px):\r\n+      // Sidebar colapsado por defecto.\r\n       this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false; // No está completamente oculto\r\n-      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n-    } else {\r\n-      // En escritorios grandes, expandido por defecto\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n+    } else { // screenWidth > 1024 (Escritorios Grandes):\r\n+      // En escritorios grandes:\r\n+      // Sidebar expandido por defecto.\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   * Alterna el estado del sidebar según el contexto (móvil/desktop).\r\n+   * Este método debe ser llamado por AMBOS botones de alternancia (el flotante y el interno).\r\n    */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre visible y oculto\r\n+      // Comportamiento en móviles: alterna la visibilidad del overlay\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n-      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n-      if (this.isSidebarCollapsed) {\r\n-          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n-          this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n-          this.isSidebarHidden = false;\r\n-      } else {\r\n-          // Si por alguna razón está expandido en este rango, lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n-          this.isSidebarHidden = false;\r\n-      }\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      // En móvil, cuando el overlay se abre o cierra, los otros estados no aplican\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarCollapsed = false;\r\n     } else {\r\n-      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      // Comportamiento en tabletas/escritorios: alterna entre colapsado y expandido.\r\n+      // (Opcionalmente, podría tener un estado 'hidden' para escritorio si lo quieres ocultar completamente).\r\n+      // Por ahora, asumimos que solo alterna entre expandido (400px) y colapsado (60px).\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      this.isSidebarHidden = false; // Siempre visible (colapsado o expandido)\r\n+      this.isSidebarVisibleMobile = false; // No aplica en desktop\r\n     }\r\n   }\r\n \r\n   /**\r\n    * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   * Se llama en el (click) de los RouterLink.\r\n    */\r\n   closeSidebarOnMobile() {\r\n     if (window.innerWidth < 768) {\r\n       this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n+      // No seteamos isSidebarHidden = true aquí, ya que el estado oculto en móvil\r\n+      // se logra simplemente con la ausencia de la clase 'visible-mobile'.\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748763547631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,34 @@\n import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-    RouterOutlet\r\n+    RouterOutlet // Necesario para <router-outlet>\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Variables de estado del sidebar\r\n-  isSidebarCollapsed: boolean = false; // Controla si el sidebar está colapsado (60px) en desktop/tablet\r\n-  isSidebarHidden: boolean = false;    // Controla si el sidebar está completamente oculto (0px) en desktop\r\n-  isSidebarVisibleMobile: boolean = false; // Controla si el sidebar está visible como overlay en móvil\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n \r\n-  // Propiedad para acceder a window.innerWidth en el template\r\n-  get window(): Window {\r\n-    return window;\r\n-  }\r\n+  window: Window = window; // Para usar window.innerWidth en el template\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    this.checkScreenSize(); // Establecer el estado inicial al cargar\r\n+    this.checkScreenSize();\r\n   }\r\n \r\n-  // Escucha los cambios de tamaño de la ventana\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n@@ -45,60 +40,65 @@\n   checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px):\r\n-      // El sidebar está oculto por defecto (no aplica la clase 'visible-mobile' inicialmente).\r\n-      // Las clases 'hidden' y 'collapsed' son para desktop, así que se desactivan aquí.\r\n-      this.isSidebarHidden = false; // El estado de oculto en móvil lo maneja visible-mobile\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarVisibleMobile = false; // Oculto inicialmente en móvil\r\n+      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n+      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n+      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n+      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños (768px a 1024px):\r\n-      // Sidebar colapsado por defecto.\r\n+      // En tabletas/escritorios pequeños, colapsado por defecto\r\n       this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n-    } else { // screenWidth > 1024 (Escritorios Grandes):\r\n-      // En escritorios grandes:\r\n-      // Sidebar expandido por defecto.\r\n+      this.isSidebarHidden = false; // No está completamente oculto\r\n+      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n+    } else {\r\n+      // En escritorios grandes, expandido por defecto\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar según el contexto (móvil/desktop).\r\n-   * Este método debe ser llamado por AMBOS botones de alternancia (el flotante y el interno).\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n    */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna la visibilidad del overlay\r\n+      // Comportamiento en móviles: alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      // En móvil, cuando el overlay se abre o cierra, los otros estados no aplican\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n+      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      if (this.isSidebarCollapsed) {\r\n+          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n+          this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n+          this.isSidebarHidden = false;\r\n+      } else {\r\n+          // Si por alguna razón está expandido en este rango, lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n+          this.isSidebarHidden = false;\r\n+      }\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     } else {\r\n-      // Comportamiento en tabletas/escritorios: alterna entre colapsado y expandido.\r\n-      // (Opcionalmente, podría tener un estado 'hidden' para escritorio si lo quieres ocultar completamente).\r\n-      // Por ahora, asumimos que solo alterna entre expandido (400px) y colapsado (60px).\r\n+      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Siempre visible (colapsado o expandido)\r\n-      this.isSidebarVisibleMobile = false; // No aplica en desktop\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     }\r\n   }\r\n \r\n   /**\r\n    * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n-   * Se llama en el (click) de los RouterLink.\r\n    */\r\n   closeSidebarOnMobile() {\r\n     if (window.innerWidth < 768) {\r\n       this.isSidebarVisibleMobile = false;\r\n-      // No seteamos isSidebarHidden = true aquí, ya que el estado oculto en móvil\r\n-      // se logra simplemente con la ausencia de la clase 'visible-mobile'.\r\n+      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748764178186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,104 +1,102 @@\n-import { Component, OnInit, HostListener } from '@angular/core';\r\n+import { Component, OnInit, HostListener, OnDestroy } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-    RouterOutlet // Necesario para <router-outlet>\r\n+    RouterOutlet\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n-export class PatientSidebarMenuComponent implements OnInit {\r\n+export class PatientSidebarMenuComponent implements OnInit, OnDestroy {\r\n \r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n+  // Variables de estado principal del sidebar:\r\n+  // - isSidebarExpanded: true para expandido (400px), false para colapsado (60px) en desktop/tablet.\r\n+  // - isMobileOverlayOpen: true si el sidebar móvil está visible como overlay, false si está oculto.\r\n+  isSidebarExpanded: boolean = true; // Por defecto, el sidebar está expandido (para desktop grande)\r\n+  isMobileOverlayOpen: boolean = false; // Por defecto, el overlay móvil está cerrado\r\n \r\n-  window: Window = window; // Para usar window.innerWidth en el template\r\n+  // Variable interna para detectar si estamos en un tamaño de pantalla móvil\r\n+  private isMobileScreen: boolean = false;\r\n \r\n+  // Propiedad para acceder a window.innerWidth en el template\r\n+  get window(): Window {\r\n+    return window;\r\n+  }\r\n+\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    this.checkScreenSize();\r\n+    this.checkScreenSize(); // Establecer el estado inicial al cargar\r\n   }\r\n \r\n+  // Escucha los cambios de tamaño de la ventana para ajustar el sidebar\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   /**\r\n-   * Determina el estado inicial o por defecto del sidebar\r\n-   * basándose en el ancho actual de la pantalla.\r\n+   * Determina el estado por defecto del sidebar basándose en el ancho actual de la pantalla.\r\n+   * Se llama al iniciar el componente y al redimensionar la ventana.\r\n    */\r\n-  checkScreenSize() {\r\n+  private checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n+    this.isMobileScreen = screenWidth < 768; // Actualiza el estado de la pantalla móvil\r\n \r\n-    if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n-      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n-      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n+    if (this.isMobileScreen) {\r\n+      // Si es móvil (< 768px):\r\n+      // El sidebar debe estar oculto por defecto y solo aparecer como overlay.\r\n+      this.isMobileOverlayOpen = false; // El overlay está cerrado inicialmente\r\n+      this.isSidebarExpanded = false; // El estado expandido/colapsado de desktop no aplica aquí\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños, colapsado por defecto\r\n-      this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false; // No está completamente oculto\r\n-      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n-    } else {\r\n-      // En escritorios grandes, expandido por defecto\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+      // Si es Tablet o Escritorio Pequeño (768px a 1024px):\r\n+      // Sidebar colapsado por defecto.\r\n+      this.isSidebarExpanded = false; // Colapsado (equivale a 60px)\r\n+      this.isMobileOverlayOpen = false; // No es un overlay móvil\r\n+    } else { // screenWidth > 1024 (Escritorios Grandes):\r\n+      // Si es Escritorio Grande (> 1024px):\r\n+      // Sidebar expandido por defecto.\r\n+      this.isSidebarExpanded = true; // Expandido (equivale a 400px)\r\n+      this.isMobileOverlayOpen = false; // No es un overlay móvil\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   * Alterna el estado del sidebar (expandido/colapsado en desktop, abrir/cerrar overlay en móvil).\r\n+   * Este método debe ser llamado por AMBOS botones de alternancia (el flotante y el interno).\r\n    */\r\n   toggleSidebar() {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre visible y oculto\r\n-      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n-      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n-      if (this.isSidebarCollapsed) {\r\n-          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n-          this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n-          this.isSidebarHidden = false;\r\n-      } else {\r\n-          // Si por alguna razón está expandido en este rango, lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n-          this.isSidebarHidden = false;\r\n-      }\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+    if (this.isMobileScreen) {\r\n+      // Si es móvil: alterna la visibilidad del overlay\r\n+      this.isMobileOverlayOpen = !this.isMobileOverlayOpen;\r\n+      // Los estados de desktop no aplican cuando el overlay móvil está abierto/cerrado\r\n+      this.isSidebarExpanded = false;\r\n     } else {\r\n-      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n-      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      // Si es desktop/tablet: alterna entre expandido y colapsado\r\n+      this.isSidebarExpanded = !this.isSidebarExpanded;\r\n+      // El overlay móvil no aplica en desktop\r\n+      this.isMobileOverlayOpen = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   * Cierra el sidebar cuando se hace clic en un enlace de navegación, solo si es móvil.\r\n+   * Se llama en el (click) de los RouterLink.\r\n    */\r\n   closeSidebarOnMobile() {\r\n-    if (window.innerWidth < 768) {\r\n-      this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n+    if (this.isMobileScreen) {\r\n+      this.isMobileOverlayOpen = false; // Cierra el overlay móvil\r\n     }\r\n   }\r\n+\r\n+  ngOnDestroy(): void {\r\n+    // @HostListener se limpia automáticamente al destruir el componente.\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748764236027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,102 +1,104 @@\n-import { Component, OnInit, HostListener, OnDestroy } from '@angular/core';\r\n+import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-    RouterOutlet\r\n+    RouterOutlet // Necesario para <router-outlet>\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n-export class PatientSidebarMenuComponent implements OnInit, OnDestroy {\r\n+export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Variables de estado principal del sidebar:\r\n-  // - isSidebarExpanded: true para expandido (400px), false para colapsado (60px) en desktop/tablet.\r\n-  // - isMobileOverlayOpen: true si el sidebar móvil está visible como overlay, false si está oculto.\r\n-  isSidebarExpanded: boolean = true; // Por defecto, el sidebar está expandido (para desktop grande)\r\n-  isMobileOverlayOpen: boolean = false; // Por defecto, el overlay móvil está cerrado\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n \r\n-  // Variable interna para detectar si estamos en un tamaño de pantalla móvil\r\n-  private isMobileScreen: boolean = false;\r\n+  window: Window = window; // Para usar window.innerWidth en el template\r\n \r\n-  // Propiedad para acceder a window.innerWidth en el template\r\n-  get window(): Window {\r\n-    return window;\r\n-  }\r\n-\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    this.checkScreenSize(); // Establecer el estado inicial al cargar\r\n+    this.checkScreenSize();\r\n   }\r\n \r\n-  // Escucha los cambios de tamaño de la ventana para ajustar el sidebar\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   /**\r\n-   * Determina el estado por defecto del sidebar basándose en el ancho actual de la pantalla.\r\n-   * Se llama al iniciar el componente y al redimensionar la ventana.\r\n+   * Determina el estado inicial o por defecto del sidebar\r\n+   * basándose en el ancho actual de la pantalla.\r\n    */\r\n-  private checkScreenSize() {\r\n+  checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n-    this.isMobileScreen = screenWidth < 768; // Actualiza el estado de la pantalla móvil\r\n \r\n-    if (this.isMobileScreen) {\r\n-      // Si es móvil (< 768px):\r\n-      // El sidebar debe estar oculto por defecto y solo aparecer como overlay.\r\n-      this.isMobileOverlayOpen = false; // El overlay está cerrado inicialmente\r\n-      this.isSidebarExpanded = false; // El estado expandido/colapsado de desktop no aplica aquí\r\n+    if (screenWidth < 768) {\r\n+      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n+      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n+      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n+      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Si es Tablet o Escritorio Pequeño (768px a 1024px):\r\n-      // Sidebar colapsado por defecto.\r\n-      this.isSidebarExpanded = false; // Colapsado (equivale a 60px)\r\n-      this.isMobileOverlayOpen = false; // No es un overlay móvil\r\n-    } else { // screenWidth > 1024 (Escritorios Grandes):\r\n-      // Si es Escritorio Grande (> 1024px):\r\n-      // Sidebar expandido por defecto.\r\n-      this.isSidebarExpanded = true; // Expandido (equivale a 400px)\r\n-      this.isMobileOverlayOpen = false; // No es un overlay móvil\r\n+      // En tabletas/escritorios pequeños, colapsado por defecto\r\n+      this.isSidebarCollapsed = true;\r\n+      this.isSidebarHidden = false; // No está completamente oculto\r\n+      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n+    } else {\r\n+      // En escritorios grandes, expandido por defecto\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar (expandido/colapsado en desktop, abrir/cerrar overlay en móvil).\r\n-   * Este método debe ser llamado por AMBOS botones de alternancia (el flotante y el interno).\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n    */\r\n   toggleSidebar() {\r\n-    if (this.isMobileScreen) {\r\n-      // Si es móvil: alterna la visibilidad del overlay\r\n-      this.isMobileOverlayOpen = !this.isMobileOverlayOpen;\r\n-      // Los estados de desktop no aplican cuando el overlay móvil está abierto/cerrado\r\n-      this.isSidebarExpanded = false;\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // Comportamiento en móviles: alterna entre visible y oculto\r\n+      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n+      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      if (this.isSidebarCollapsed) {\r\n+          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n+          this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n+          this.isSidebarHidden = false;\r\n+      } else {\r\n+          // Si por alguna razón está expandido en este rango, lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n+          this.isSidebarHidden = false;\r\n+      }\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     } else {\r\n-      // Si es desktop/tablet: alterna entre expandido y colapsado\r\n-      this.isSidebarExpanded = !this.isSidebarExpanded;\r\n-      // El overlay móvil no aplica en desktop\r\n-      this.isMobileOverlayOpen = false;\r\n+      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace de navegación, solo si es móvil.\r\n-   * Se llama en el (click) de los RouterLink.\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n    */\r\n   closeSidebarOnMobile() {\r\n-    if (this.isMobileScreen) {\r\n-      this.isMobileOverlayOpen = false; // Cierra el overlay móvil\r\n+    if (window.innerWidth < 768) {\r\n+      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n     }\r\n   }\r\n-\r\n-  ngOnDestroy(): void {\r\n-    // @HostListener se limpia automáticamente al destruir el componente.\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748769065041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,104 +1,37 @@\n-import { Component, OnInit, HostListener } from '@angular/core';\r\n+import { Component, OnInit, HostBinding } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n+import { RouterLink, RouterLinkActive } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n-    RouterLinkActive,\r\n-    RouterOutlet // Necesario para <router-outlet>\r\n+    RouterLinkActive\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n+  isSidebarOpen: boolean = true; // Por defecto, lo iniciamos como 'true' para pantallas grandes\r\n \r\n-  window: Window = window; // Para usar window.innerWidth en el template\r\n+  @HostBinding('class.open') get opened() {\r\n+    return this.isSidebarOpen;\r\n+  }\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    this.checkScreenSize();\r\n-  }\r\n-\r\n-  @HostListener('window:resize', ['$event'])\r\n-  onResize(event: any) {\r\n-    this.checkScreenSize();\r\n-  }\r\n-\r\n-  /**\r\n-   * Determina el estado inicial o por defecto del sidebar\r\n-   * basándose en el ancho actual de la pantalla.\r\n-   */\r\n-  checkScreenSize() {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n-      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n-      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños, colapsado por defecto\r\n-      this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false; // No está completamente oculto\r\n-      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n-    } else {\r\n-      // En escritorios grandes, expandido por defecto\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+    // En el inicio del componente, verifica el tamaño de la ventana.\r\n+    // Si es una pantalla pequeña (menos de 768px), el sidebar debe estar cerrado por defecto.\r\n+    if (window.innerWidth < 768) {\r\n+      this.isSidebarOpen = false;\r\n     }\r\n   }\r\n \r\n-  /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n-   */\r\n-  toggleSidebar() {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre visible y oculto\r\n-      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n-      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n-      if (this.isSidebarCollapsed) {\r\n-          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n-          this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n-          this.isSidebarHidden = false;\r\n-      } else {\r\n-          // Si por alguna razón está expandido en este rango, lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n-          this.isSidebarHidden = false;\r\n-      }\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n-    } else {\r\n-      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n-      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n-    }\r\n+  toggleSidebar(): void {\r\n+    this.isSidebarOpen = !this.isSidebarOpen;\r\n   }\r\n-\r\n-  /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n-   */\r\n-  closeSidebarOnMobile() {\r\n-    if (window.innerWidth < 768) {\r\n-      this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748769230861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,104 @@\n-import { Component, OnInit, HostBinding } from '@angular/core';\r\n+import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive } from '@angular/router';\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n-    RouterLinkActive\r\n+    RouterLinkActive,\r\n+    RouterOutlet // Necesario para <router-outlet>\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  isSidebarOpen: boolean = true; // Por defecto, lo iniciamos como 'true' para pantallas grandes\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n \r\n-  @HostBinding('class.open') get opened() {\r\n-    return this.isSidebarOpen;\r\n-  }\r\n+  window: Window = window; // Para usar window.innerWidth en el template\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    // En el inicio del componente, verifica el tamaño de la ventana.\r\n-    // Si es una pantalla pequeña (menos de 768px), el sidebar debe estar cerrado por defecto.\r\n-    if (window.innerWidth < 768) {\r\n-      this.isSidebarOpen = false;\r\n+    this.checkScreenSize();\r\n+  }\r\n+\r\n+  @HostListener('window:resize', ['$event'])\r\n+  onResize(event: any) {\r\n+    this.checkScreenSize();\r\n+  }\r\n+\r\n+  /**\r\n+   * Determina el estado inicial o por defecto del sidebar\r\n+   * basándose en el ancho actual de la pantalla.\r\n+   */\r\n+  checkScreenSize() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n+      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n+      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n+      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // En tabletas/escritorios pequeños, colapsado por defecto\r\n+      this.isSidebarCollapsed = true;\r\n+      this.isSidebarHidden = false; // No está completamente oculto\r\n+      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n+    } else {\r\n+      // En escritorios grandes, expandido por defecto\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n-  toggleSidebar(): void {\r\n-    this.isSidebarOpen = !this.isSidebarOpen;\r\n+  /**\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   */\r\n+  toggleSidebar() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // Comportamiento en móviles: alterna entre visible y oculto\r\n+      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n+      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      if (this.isSidebarCollapsed) {\r\n+          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n+          this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n+          this.isSidebarHidden = false;\r\n+      } else {\r\n+          // Si por alguna razón está expandido en este rango, lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n+          this.isSidebarHidden = false;\r\n+      }\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+    } else {\r\n+      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+    }\r\n   }\r\n+\r\n+  /**\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   */\r\n+  closeSidebarOnMobile() {\r\n+    if (window.innerWidth < 768) {\r\n+      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n+    }\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748769903939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+import { Component, OnInit, HostListener } from '@angular/core';\r\n+import { CommonModule } from '@angular/common';\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n+\r\n+@Component({\r\n+  selector: 'app-patient-sidebar-menu',\r\n+  standalone: true,\r\n+  imports: [\r\n+    CommonModule,\r\n+    RouterLink,\r\n+    RouterLinkActive,\r\n+   \r\n+  ],\r\n+  templateUrl: './patient-sidebar-menu.component.html',\r\n+  styleUrls: ['./patient-sidebar-menu.component.css']\r\n+})\r\n+export class PatientSidebarMenuComponent implements OnInit {\r\n+\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n+\r\n+  window: Window = window; // Para usar window.innerWidth en el template\r\n+\r\n+  constructor() { }\r\n+\r\n+  ngOnInit(): void {\r\n+    this.checkScreenSize();\r\n+  }\r\n+\r\n+  @HostListener('window:resize', ['$event'])\r\n+  onResize(event: any) {\r\n+    this.checkScreenSize();\r\n+  }\r\n+\r\n+  /**\r\n+   * Determina el estado inicial o por defecto del sidebar\r\n+   * basándose en el ancho actual de la pantalla.\r\n+   */\r\n+  checkScreenSize() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n+      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n+      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n+      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // En tabletas/escritorios pequeños, colapsado por defecto\r\n+      this.isSidebarCollapsed = true;\r\n+      this.isSidebarHidden = false; // No está completamente oculto\r\n+      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n+    } else {\r\n+      // En escritorios grandes, expandido por defecto\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   */\r\n+  toggleSidebar() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // Comportamiento en móviles: alterna entre visible y oculto\r\n+      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n+      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      if (this.isSidebarCollapsed) {\r\n+          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n+          this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n+          this.isSidebarHidden = false;\r\n+      } else {\r\n+          // Si por alguna razón está expandido en este rango, lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n+          this.isSidebarHidden = false;\r\n+      }\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+    } else {\r\n+      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   */\r\n+  closeSidebarOnMobile() {\r\n+    if (window.innerWidth < 768) {\r\n+      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748771131240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,28 @@\n+// patient-sidebar-menu.component.ts\r\n import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-   \r\n+    RouterOutlet\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n+  // Estas propiedades controlarán las clases CSS en tu HTML\r\n   isSidebarHidden: boolean = false;\r\n   isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false; // Controla la visibilidad del sidebar en móvil\r\n \r\n-  window: Window = window; // Para usar window.innerWidth en el template\r\n-\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n     this.checkScreenSize();\r\n@@ -100,109 +100,5 @@\n       this.isSidebarVisibleMobile = false;\r\n       this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n     }\r\n   }\r\n-}\n-import { Component, OnInit, HostListener } from '@angular/core';\r\n-import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n-\r\n-@Component({\r\n-  selector: 'app-patient-sidebar-menu',\r\n-  standalone: true,\r\n-  imports: [\r\n-    CommonModule,\r\n-    RouterLink,\r\n-    RouterLinkActive,\r\n-    RouterOutlet // Necesario para <router-outlet>\r\n-  ],\r\n-  templateUrl: './patient-sidebar-menu.component.html',\r\n-  styleUrls: ['./patient-sidebar-menu.component.css']\r\n-})\r\n-export class PatientSidebarMenuComponent implements OnInit {\r\n-\r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n-\r\n-  window: Window = window; // Para usar window.innerWidth en el template\r\n-\r\n-  constructor() { }\r\n-\r\n-  ngOnInit(): void {\r\n-    this.checkScreenSize();\r\n-  }\r\n-\r\n-  @HostListener('window:resize', ['$event'])\r\n-  onResize(event: any) {\r\n-    this.checkScreenSize();\r\n-  }\r\n-\r\n-  /**\r\n-   * Determina el estado inicial o por defecto del sidebar\r\n-   * basándose en el ancho actual de la pantalla.\r\n-   */\r\n-  checkScreenSize() {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n-      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n-      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños, colapsado por defecto\r\n-      this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false; // No está completamente oculto\r\n-      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n-    } else {\r\n-      // En escritorios grandes, expandido por defecto\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n-   */\r\n-  toggleSidebar() {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre visible y oculto\r\n-      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n-      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n-      if (this.isSidebarCollapsed) {\r\n-          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n-          this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n-          this.isSidebarHidden = false;\r\n-      } else {\r\n-          // Si por alguna razón está expandido en este rango, lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n-          this.isSidebarHidden = false;\r\n-      }\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n-    } else {\r\n-      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n-      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n-   */\r\n-  closeSidebarOnMobile() {\r\n-    if (window.innerWidth < 768) {\r\n-      this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748772449363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-    RouterOutlet\r\n+   \r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n"
                },
                {
                    "date": 1748773191312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,104 +1,104 @@\n-// patient-sidebar-menu.component.ts\r\n import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n+import { RouterLink, RouterLinkActive } from '@angular/router'; // RouterOutlet is not used here, so removed\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-   \r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Estas propiedades controlarán las clases CSS en tu HTML\r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false; // Controla la visibilidad del sidebar en móvil\r\n+  // Estas propiedades controlarán las clases CSS en tu HTML y el estado del sidebar\r\n+  isSidebarHidden: boolean = false; // True si el sidebar está completamente oculto (fuera de vista)\r\n+  isSidebarCollapsed: boolean = false; // True si el sidebar está colapsado (solo íconos, pero visible)\r\n+  isSidebarVisibleMobile: boolean = false; // True si el sidebar está visible en pantallas móviles\r\n \r\n+  // Nueva propiedad para saber si estamos en una vista móvil\r\n+  isMobileView: boolean = false;\r\n+\r\n+  // Puntos de quiebre para el diseño responsivo\r\n+  private readonly MOBILE_BREAKPOINT: number = 768; // Ancho para pantallas móviles\r\n+  private readonly TABLET_BREAKPOINT: number = 1024; // Ancho para tabletas o escritorios pequeños\r\n+\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n+    // Establece el estado inicial del sidebar al cargar el componente\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   @HostListener('window:resize', ['$event'])\r\n-  onResize(event: any) {\r\n+  onResize(event: Event) {\r\n+    // Actualiza el estado del sidebar cada vez que la ventana cambia de tamaño\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   /**\r\n-   * Determina el estado inicial o por defecto del sidebar\r\n+   * Determina el estado del sidebar (hidden, collapsed, o visible/expanded)\r\n    * basándose en el ancho actual de la pantalla.\r\n+   * Se ejecuta en la inicialización y al redimensionar la ventana.\r\n    */\r\n-  checkScreenSize() {\r\n+  private checkScreenSize(): void {\r\n     const screenWidth = window.innerWidth;\r\n \r\n-    if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n-      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n-      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños, colapsado por defecto\r\n-      this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false; // No está completamente oculto\r\n-      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n+    this.isMobileView = screenWidth < this.MOBILE_BREAKPOINT;\r\n+\r\n+    if (this.isMobileView) {\r\n+      // En móviles, el sidebar está oculto por defecto, y solo se muestra al activar `isSidebarVisibleMobile`\r\n+      this.isSidebarHidden = true;\r\n+      this.isSidebarCollapsed = false;\r\n+      // isSidebarVisibleMobile no se reinicia aquí para mantener el estado si ya estaba abierto\r\n+    } else if (screenWidth >= this.MOBILE_BREAKPOINT && screenWidth < this.TABLET_BREAKPOINT) {\r\n+      // En tabletas/escritorios pequeños (entre 768px y 1024px)\r\n+      // Se puede optar por un sidebar colapsado por defecto o un control más manual\r\n+      this.isSidebarCollapsed = true; // Colapsado por defecto en este rango\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false; // No aplica la visibilidad móvil\r\n     } else {\r\n-      // En escritorios grandes, expandido por defecto\r\n+      // En escritorios grandes (>= 1024px), el sidebar está expandido por defecto\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarVisibleMobile = false; // No aplica la visibilidad móvil\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   * Alterna el estado del sidebar según el dispositivo y la interacción del usuario.\r\n+   * Este es el método llamado por el botón de menú.\r\n    */\r\n-  toggleSidebar() {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre visible y oculto\r\n+  toggleSidebar(): void {\r\n+    if (this.isMobileView) {\r\n+      // En móvil: alterna la visibilidad del sidebar (abrir/cerrar)\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n-      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n-      if (this.isSidebarCollapsed) {\r\n-          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n-          this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n-          this.isSidebarHidden = false;\r\n-      } else {\r\n-          // Si por alguna razón está expandido en este rango, lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n-          this.isSidebarHidden = false;\r\n-      }\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      // Cuando está visible en móvil, no está \"oculto\" por la clase `sidebar-hidden`\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n+      // Aseguramos que no esté colapsado en móvil\r\n+      this.isSidebarCollapsed = false;\r\n     } else {\r\n-      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      // En desktop (tabletas y escritorios grandes):\r\n+      // Si está expandido, lo colapsa. Si está colapsado, lo expande.\r\n+      // Aquí, no queremos que se \"oculte\" completamente con el botón de toggle.\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      this.isSidebarHidden = false; // Aseguramos que no esté completamente oculto en desktop con este botón\r\n+      this.isSidebarVisibleMobile = false; // Aseguramos que el estado móvil no interfiera\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   * Cierra el sidebar específicamente cuando se hace clic en un enlace en un dispositivo móvil.\r\n+   * Esto mejora la experiencia de usuario en pantallas pequeñas.\r\n    */\r\n-  closeSidebarOnMobile() {\r\n-    if (window.innerWidth < 768) {\r\n+  closeSidebarOnMobile(): void {\r\n+    if (this.isMobileView) {\r\n       this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n+      this.isSidebarHidden = true; // Cuando se cierra en móvil, debe estar completamente oculto\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748773599577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,104 +1,104 @@\n+// patient-sidebar-menu.component.ts\r\n import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive } from '@angular/router'; // RouterOutlet is not used here, so removed\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n+   \r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Estas propiedades controlarán las clases CSS en tu HTML y el estado del sidebar\r\n-  isSidebarHidden: boolean = false; // True si el sidebar está completamente oculto (fuera de vista)\r\n-  isSidebarCollapsed: boolean = false; // True si el sidebar está colapsado (solo íconos, pero visible)\r\n-  isSidebarVisibleMobile: boolean = false; // True si el sidebar está visible en pantallas móviles\r\n+  // Estas propiedades controlarán las clases CSS en tu HTML\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false; // Controla la visibilidad del sidebar en móvil\r\n \r\n-  // Nueva propiedad para saber si estamos en una vista móvil\r\n-  isMobileView: boolean = false;\r\n-\r\n-  // Puntos de quiebre para el diseño responsivo\r\n-  private readonly MOBILE_BREAKPOINT: number = 768; // Ancho para pantallas móviles\r\n-  private readonly TABLET_BREAKPOINT: number = 1024; // Ancho para tabletas o escritorios pequeños\r\n-\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    // Establece el estado inicial del sidebar al cargar el componente\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   @HostListener('window:resize', ['$event'])\r\n-  onResize(event: Event) {\r\n-    // Actualiza el estado del sidebar cada vez que la ventana cambia de tamaño\r\n+  onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   /**\r\n-   * Determina el estado del sidebar (hidden, collapsed, o visible/expanded)\r\n+   * Determina el estado inicial o por defecto del sidebar\r\n    * basándose en el ancho actual de la pantalla.\r\n-   * Se ejecuta en la inicialización y al redimensionar la ventana.\r\n    */\r\n-  private checkScreenSize(): void {\r\n+  checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n-    this.isMobileView = screenWidth < this.MOBILE_BREAKPOINT;\r\n-\r\n-    if (this.isMobileView) {\r\n-      // En móviles, el sidebar está oculto por defecto, y solo se muestra al activar `isSidebarVisibleMobile`\r\n-      this.isSidebarHidden = true;\r\n-      this.isSidebarCollapsed = false;\r\n-      // isSidebarVisibleMobile no se reinicia aquí para mantener el estado si ya estaba abierto\r\n-    } else if (screenWidth >= this.MOBILE_BREAKPOINT && screenWidth < this.TABLET_BREAKPOINT) {\r\n-      // En tabletas/escritorios pequeños (entre 768px y 1024px)\r\n-      // Se puede optar por un sidebar colapsado por defecto o un control más manual\r\n-      this.isSidebarCollapsed = true; // Colapsado por defecto en este rango\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false; // No aplica la visibilidad móvil\r\n+    if (screenWidth < 768) {\r\n+      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n+      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n+      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n+      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // En tabletas/escritorios pequeños, colapsado por defecto\r\n+      this.isSidebarCollapsed = true;\r\n+      this.isSidebarHidden = false; // No está completamente oculto\r\n+      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n     } else {\r\n-      // En escritorios grandes (>= 1024px), el sidebar está expandido por defecto\r\n+      // En escritorios grandes, expandido por defecto\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false; // No aplica la visibilidad móvil\r\n+      this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar según el dispositivo y la interacción del usuario.\r\n-   * Este es el método llamado por el botón de menú.\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n    */\r\n-  toggleSidebar(): void {\r\n-    if (this.isMobileView) {\r\n-      // En móvil: alterna la visibilidad del sidebar (abrir/cerrar)\r\n+  toggleSidebar() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // Comportamiento en móviles: alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      // Cuando está visible en móvil, no está \"oculto\" por la clase `sidebar-hidden`\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n-      // Aseguramos que no esté colapsado en móvil\r\n-      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n+      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      if (this.isSidebarCollapsed) {\r\n+          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n+          this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n+          this.isSidebarHidden = false;\r\n+      } else {\r\n+          // Si por alguna razón está expandido en este rango, lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n+          this.isSidebarHidden = false;\r\n+      }\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     } else {\r\n-      // En desktop (tabletas y escritorios grandes):\r\n-      // Si está expandido, lo colapsa. Si está colapsado, lo expande.\r\n-      // Aquí, no queremos que se \"oculte\" completamente con el botón de toggle.\r\n+      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Aseguramos que no esté completamente oculto en desktop con este botón\r\n-      this.isSidebarVisibleMobile = false; // Aseguramos que el estado móvil no interfiera\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Cierra el sidebar específicamente cuando se hace clic en un enlace en un dispositivo móvil.\r\n-   * Esto mejora la experiencia de usuario en pantallas pequeñas.\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n    */\r\n-  closeSidebarOnMobile(): void {\r\n-    if (this.isMobileView) {\r\n+  closeSidebarOnMobile() {\r\n+    if (window.innerWidth < 768) {\r\n       this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true; // Cuando se cierra en móvil, debe estar completamente oculto\r\n+      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748773818783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n-// patient-sidebar-menu.component.ts\r\n import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n@@ -16,13 +15,14 @@\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Estas propiedades controlarán las clases CSS en tu HTML\r\n   isSidebarHidden: boolean = false;\r\n   isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false; // Controla la visibilidad del sidebar en móvil\r\n+  isSidebarVisibleMobile: boolean = false;\r\n \r\n+  window: Window = window; // Para usar window.innerWidth en el template\r\n+\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n     this.checkScreenSize();\r\n"
                },
                {
                    "date": 1748773909435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,28 @@\n import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // Importa RouterOutlet\r\n+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // RouterOutlet is imported but not used in the template, so it can be removed if not needed elsewhere in this component.\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-   \r\n+    // RouterOutlet // Remove if not used in patient-sidebar-menu.component.html\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n+  isSidebarHidden: boolean = false; // Controls if the sidebar is completely off-screen (desktop hidden or mobile default)\r\n+  isSidebarCollapsed: boolean = false; // Controls if the sidebar is in its collapsed state (desktop/tablet)\r\n+  isSidebarVisibleMobile: boolean = false; // Controls if the sidebar is explicitly shown as an overlay on mobile\r\n \r\n-  window: Window = window; // Para usar window.innerWidth en el template\r\n+  // Flag to determine if we are in a mobile view. Useful for rendering specific elements.\r\n+  isMobileView: boolean = false;\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n@@ -33,72 +34,81 @@\n     this.checkScreenSize();\r\n   }\r\n \r\n   /**\r\n-   * Determina el estado inicial o por defecto del sidebar\r\n-   * basándose en el ancho actual de la pantalla.\r\n+   * Determines the initial or default state of the sidebar\r\n+   * based on the current screen width.\r\n+   * This runs on init and resize.\r\n    */\r\n   checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true; // El sidebar está completamente fuera de la vista\r\n-      this.isSidebarCollapsed = false; // No aplica el estado colapsado\r\n-      this.isSidebarVisibleMobile = false; // El sidebar no está visible en móvil al inicio\r\n+      // Mobile view (less than 768px): Sidebar is hidden by default.\r\n+      this.isMobileView = true;\r\n+      this.isSidebarHidden = true; // Hidden off-screen\r\n+      this.isSidebarCollapsed = false; // Not applicable for mobile default state\r\n+      this.isSidebarVisibleMobile = false; // Not visible initially\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños, colapsado por defecto\r\n-      this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false; // No está completamente oculto\r\n-      this.isSidebarVisibleMobile = false; // No aplica el estado móvil visible\r\n+      // Tablet/Small Desktop: Collapsed by default.\r\n+      this.isMobileView = false;\r\n+      this.isSidebarCollapsed = true; // Collapsed\r\n+      this.isSidebarHidden = false; // Not completely hidden\r\n+      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n     } else {\r\n-      // En escritorios grandes, expandido por defecto\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+      // Large Desktops (>= 1025px): Expanded by default.\r\n+      this.isMobileView = false;\r\n+      this.isSidebarCollapsed = false; // Expanded\r\n+      this.isSidebarHidden = false; // Not hidden\r\n+      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   * Toggles the sidebar state (hidden, collapsed, expanded)\r\n+   * depending on the current screen size and user interaction.\r\n    */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre visible y oculto\r\n+      // Mobile behavior: Toggles between visible and hidden (overlay)\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Sincroniza hidden con visibleMobile\r\n-      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n+      // When mobile sidebar is visible, it's not \"hidden\" in the sense of translateX(-100%)\r\n+      // When it's not visible, it IS hidden.\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarCollapsed = false; // Ensure it's not collapsed on mobile\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      // Tablet/Small Desktop behavior: Toggles between collapsed and hidden\r\n       if (this.isSidebarCollapsed) {\r\n-          this.isSidebarHidden = true; // Si está colapsado, al hacer clic, lo oculta completamente\r\n-          this.isSidebarCollapsed = false;\r\n+        // If it's collapsed, clicking hides it completely\r\n+        this.isSidebarHidden = true;\r\n+        this.isSidebarCollapsed = false;\r\n       } else if (this.isSidebarHidden) {\r\n-          this.isSidebarCollapsed = true; // Si está oculto, al hacer clic, lo vuelve a colapsar\r\n-          this.isSidebarHidden = false;\r\n+        // If it's hidden, clicking restores it to collapsed\r\n+        this.isSidebarCollapsed = true;\r\n+        this.isSidebarHidden = false;\r\n       } else {\r\n-          // Si por alguna razón está expandido en este rango, lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n-          this.isSidebarHidden = false;\r\n+        // If it's expanded (shouldn't be default in this range but possible), collapse it\r\n+        this.isSidebarCollapsed = true;\r\n+        this.isSidebarHidden = false;\r\n       }\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n     } else {\r\n-      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      // Large Desktops behavior: Toggles between expanded and collapsed\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      this.isSidebarHidden = false; // Ensure it's not completely hidden when toggling between expanded/collapsed\r\n+      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   * Closes the sidebar when a link is clicked on mobile.\r\n+   * This is called by (click)=\"closeSidebarOnMobile()\" on each RouterLink.\r\n    */\r\n   closeSidebarOnMobile() {\r\n     if (window.innerWidth < 768) {\r\n-      this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true; // Lo vuelve a ocultar completamente\r\n+      this.isSidebarVisibleMobile = false; // Hide the mobile overlay\r\n+      this.isSidebarHidden = true; // Set to hidden off-screen\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748774128509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,26 @@\n import { Component, OnInit, HostListener } from '@angular/core';\r\n import { CommonModule } from '@angular/common';\r\n-import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router'; // RouterOutlet is imported but not used in the template, so it can be removed if not needed elsewhere in this component.\r\n+import { RouterLink, RouterLinkActive } from '@angular/router'; // RouterOutlet removed if not used\r\n \r\n @Component({\r\n   selector: 'app-patient-sidebar-menu',\r\n   standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     RouterLink,\r\n     RouterLinkActive,\r\n-    // RouterOutlet // Remove if not used in patient-sidebar-menu.component.html\r\n   ],\r\n   templateUrl: './patient-sidebar-menu.component.html',\r\n   styleUrls: ['./patient-sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  isSidebarHidden: boolean = false; // Controls if the sidebar is completely off-screen (desktop hidden or mobile default)\r\n+  isSidebarHidden: boolean = false; // Controls if the sidebar is completely off-screen (desktop/tablet)\r\n   isSidebarCollapsed: boolean = false; // Controls if the sidebar is in its collapsed state (desktop/tablet)\r\n   isSidebarVisibleMobile: boolean = false; // Controls if the sidebar is explicitly shown as an overlay on mobile\r\n \r\n-  // Flag to determine if we are in a mobile view. Useful for rendering specific elements.\r\n-  isMobileView: boolean = false;\r\n+  isMobileView: boolean = false; // Flag to determine if we are in a mobile view.\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n@@ -45,15 +43,15 @@\n     if (screenWidth < 768) {\r\n       // Mobile view (less than 768px): Sidebar is hidden by default.\r\n       this.isMobileView = true;\r\n       this.isSidebarHidden = true; // Hidden off-screen\r\n-      this.isSidebarCollapsed = false; // Not applicable for mobile default state\r\n+      this.isSidebarCollapsed = false; // Not applicable\r\n       this.isSidebarVisibleMobile = false; // Not visible initially\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n       // Tablet/Small Desktop: Collapsed by default.\r\n       this.isMobileView = false;\r\n       this.isSidebarCollapsed = true; // Collapsed\r\n-      this.isSidebarHidden = false; // Not completely hidden\r\n+      this.isSidebarHidden = false; // Not hidden\r\n       this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n     } else {\r\n       // Large Desktops (>= 1025px): Expanded by default.\r\n       this.isMobileView = false;\r\n@@ -82,16 +80,11 @@\n       if (this.isSidebarCollapsed) {\r\n         // If it's collapsed, clicking hides it completely\r\n         this.isSidebarHidden = true;\r\n         this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-        // If it's hidden, clicking restores it to collapsed\r\n+      } else { // If it's hidden or any other state, clicking restores it to collapsed\r\n         this.isSidebarCollapsed = true;\r\n         this.isSidebarHidden = false;\r\n-      } else {\r\n-        // If it's expanded (shouldn't be default in this range but possible), collapse it\r\n-        this.isSidebarCollapsed = true;\r\n-        this.isSidebarHidden = false;\r\n       }\r\n       this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n     } else {\r\n       // Large Desktops behavior: Toggles between expanded and collapsed\r\n@@ -105,9 +98,9 @@\n    * Closes the sidebar when a link is clicked on mobile.\r\n    * This is called by (click)=\"closeSidebarOnMobile()\" on each RouterLink.\r\n    */\r\n   closeSidebarOnMobile() {\r\n-    if (window.innerWidth < 768) {\r\n+    if (this.isMobileView) { // Only apply this logic if in mobile view\r\n       this.isSidebarVisibleMobile = false; // Hide the mobile overlay\r\n       this.isSidebarHidden = true; // Set to hidden off-screen\r\n     }\r\n   }\r\n"
                }
            ],
            "date": 1747613253475,
            "name": "Commit-0",
            "content": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; // Si usas directivas como ngIf, ngFor, etc. en la plantilla del menú\r\n// --- Importa RouterLink y RouterLinkActive para que routerLink funcione ---\r\nimport { RouterLink, RouterLinkActive } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-patient-sidebar-menu', // Este es el selector que usarás en tus layouts de paciente\r\n  standalone: true, // <--- Marca como standalone\r\n  imports: [\r\n    CommonModule, // Si aplica\r\n    // --- **Asegúrate de que RouterLink y RouterLinkActive estén en este array** ---\r\n    RouterLink,\r\n    RouterLinkActive\r\n  ],\r\n  templateUrl: './patient-sidebar-menu.component.html',\r\n  styleUrls: ['./patient-sidebar-menu.component.css']\r\n})\r\nexport class PatientSidebarMenuComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}"
        }
    ]
}