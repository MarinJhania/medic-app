{
    "sourceFile": "src/app/sidebar-menu/sidebar-menu.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1747556011150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747557172261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n import { Component, OnInit } from '@angular/core';\r\n \r\n @Component({\r\n-  selector: 'app-sidebar-menu',\r\n+  selector: 'app-sidebar-menu', // <--- Este selector debe coincidir\r\n   templateUrl: './sidebar-menu.component.html',\r\n   styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n-export class SidebarMenuComponent implements OnInit {\r\n+export class SidebarMenuComponent {\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n"
                },
                {
                    "date": 1747557259357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,17 @@\n-import { Component, OnInit } from '@angular/core';\r\n+import { Component } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-sidebar-menu', // <--- Este selector debe coincidir\r\n   templateUrl: './sidebar-menu.component.html',\r\n-  styleUrls: ['./sidebar-menu.component.css']\r\n+  styleUrls: ['./sidebar-menu.component.css'],\r\n+  standalone: true // Asegúrate de que esté marcado como standalone\r\n })\r\n export class SidebarMenuComponent {\r\n \r\n   constructor() { }\r\n \r\n-  ngOnInit(): void {\r\n-  }\r\n+  // ngOnInit se usa para lógica de inicialización, no es estrictamente necesario para un menú estático\r\n+  // ngOnInit(): void {\r\n+  // }\r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747558277095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,14 @@\n import { Component } from '@angular/core';\r\n+import { RouterLink, RouterLinkActive } from '@angular/router';\r\n+import { CommonModule } from '@angular/common'; // Importa CommonModule si lo necesitas para otras directivas\r\n \r\n @Component({\r\n-  selector: 'app-sidebar-menu', // <--- Este selector debe coincidir\r\n+  selector: 'app-sidebar-menu',\r\n+  standalone: true,\r\n+  imports: [RouterLink, RouterLinkActive, CommonModule], // <--- Importa RouterLink y RouterLinkActive\r\n   templateUrl: './sidebar-menu.component.html',\r\n-  styleUrls: ['./sidebar-menu.component.css'],\r\n-  standalone: true // Asegúrate de que esté marcado como standalone\r\n+  styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n export class SidebarMenuComponent {\r\n-\r\n   constructor() { }\r\n-\r\n-  // ngOnInit se usa para lógica de inicialización, no es estrictamente necesario para un menú estático\r\n-  // ngOnInit(): void {\r\n-  // }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747563946138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,20 @@\n+// En sidebar-menu.component.ts\r\n import { Component } from '@angular/core';\r\n-import { RouterLink, RouterLinkActive } from '@angular/router';\r\n-import { CommonModule } from '@angular/common'; // Importa CommonModule si lo necesitas para otras directivas\r\n+import { RouterLink, RouterLinkActive } from '@angular/router'; // <--- Importa estas directivas\r\n+import { CommonModule } from '@angular/common'; // Si usas ngIf, ngFor, etc.\r\n \r\n @Component({\r\n   selector: 'app-sidebar-menu',\r\n-  standalone: true,\r\n-  imports: [RouterLink, RouterLinkActive, CommonModule], // <--- Importa RouterLink y RouterLinkActive\r\n-  templateUrl: './sidebar-menu.component.html',\r\n-  styleUrls: ['./sidebar-menu.component.css']\r\n+  standalone: true, // <-- Asegúrate de que sea standalone si usas esta opción\r\n+  imports: [\r\n+    CommonModule, // Si aplica\r\n+    RouterLink,        // <--- Agrégalos aquí\r\n+    RouterLinkActive   // <--- Agrégalos aquí\r\n+    // O RouterModule, pero es menos específico\r\n+  ],\r\n+  templateUrl: './sidebar-menu.component.html', // O template: `...`\r\n+  styleUrls: ['./sidebar-menu.component.css'],\r\n })\r\n export class SidebarMenuComponent {\r\n-  constructor() { }\r\n+  // ...\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747563989979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,14 @@\n-// En sidebar-menu.component.ts\r\n import { Component } from '@angular/core';\r\n-import { RouterLink, RouterLinkActive } from '@angular/router'; // <--- Importa estas directivas\r\n-import { CommonModule } from '@angular/common'; // Si usas ngIf, ngFor, etc.\r\n+import { RouterLink, RouterLinkActive } from '@angular/router';\r\n+import { CommonModule } from '@angular/common'; // Importa CommonModule si lo necesitas para otras directivas\r\n \r\n @Component({\r\n   selector: 'app-sidebar-menu',\r\n-  standalone: true, // <-- Asegúrate de que sea standalone si usas esta opción\r\n-  imports: [\r\n-    CommonModule, // Si aplica\r\n-    RouterLink,        // <--- Agrégalos aquí\r\n-    RouterLinkActive   // <--- Agrégalos aquí\r\n-    // O RouterModule, pero es menos específico\r\n-  ],\r\n-  templateUrl: './sidebar-menu.component.html', // O template: `...`\r\n-  styleUrls: ['./sidebar-menu.component.css'],\r\n+  standalone: true,\r\n+  imports: [RouterLink, RouterLinkActive, CommonModule], // <--- Importa RouterLink y RouterLinkActive\r\n+  templateUrl: './sidebar-menu.component.html',\r\n+  styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n export class SidebarMenuComponent {\r\n-  // ...\r\n+  constructor() { }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748741508791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,80 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit, HostListener } from '@angular/core'; // Importa OnInit y HostListener\r\n import { RouterLink, RouterLinkActive } from '@angular/router';\r\n-import { CommonModule } from '@angular/common'; // Importa CommonModule si lo necesitas para otras directivas\r\n+import { CommonModule } from '@angular/common';\r\n \r\n @Component({\r\n   selector: 'app-sidebar-menu',\r\n   standalone: true,\r\n-  imports: [RouterLink, RouterLinkActive, CommonModule], // <--- Importa RouterLink y RouterLinkActive\r\n+  imports: [RouterLink, RouterLinkActive, CommonModule],\r\n   templateUrl: './sidebar-menu.component.html',\r\n   styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n-export class SidebarMenuComponent {\r\n+export class SidebarMenuComponent implements OnInit { // Implementa OnInit\r\n+\r\n+  // Propiedades para controlar el estado del sidebar\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n+\r\n   constructor() { }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n+    this.checkScreenSize();\r\n+  }\r\n+\r\n+  // Escucha los cambios de tamaño de la ventana\r\n+  @HostListener('window:resize', ['$event'])\r\n+  onResize(event: Event) { // Usa Event para el tipo de evento\r\n+    this.checkScreenSize();\r\n+  }\r\n+\r\n+  // Método para determinar el estado por defecto del sidebar según el ancho de la pantalla\r\n+  checkScreenSize() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // En pantallas pequeñas (móviles), el sidebar está oculto por defecto\r\n+      this.isSidebarHidden = true;\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // En pantallas medianas (tabletas/escritorios pequeños), el sidebar está colapsado por defecto\r\n+      this.isSidebarCollapsed = true;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n+    } else {\r\n+      // En pantallas grandes (escritorios), el sidebar está expandido por defecto\r\n+      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n+    }\r\n+  }\r\n+\r\n+  // Método para alternar la visibilidad/estado del sidebar\r\n+  toggleSidebar() {\r\n+    const screenWidth = window.innerWidth;\r\n+\r\n+    if (screenWidth < 768) {\r\n+      // Comportamiento en móviles: alterna entre oculto y visible\r\n+      this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n+    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n+      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      if (this.isSidebarCollapsed) {\r\n+          this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n+          this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+          this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n+          this.isSidebarHidden = false;\r\n+      } else {\r\n+          // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n+      }\r\n+    } else {\r\n+      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+    }\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748741621693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import { Component, OnInit, HostListener } from '@angular/core'; // Importa OnInit y HostListener\r\n+import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n import { RouterLink, RouterLinkActive } from '@angular/router';\r\n-import { CommonModule } from '@angular/common';\r\n+import { CommonModule } from '@angular/common'; // Importa CommonModule para ngClass si lo usas\r\n \r\n @Component({\r\n   selector: 'app-sidebar-menu',\r\n   standalone: true,\r\n@@ -22,42 +22,48 @@\n     // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n     this.checkScreenSize();\r\n   }\r\n \r\n-  // Escucha los cambios de tamaño de la ventana\r\n+  // Escucha los cambios de tamaño de la ventana del navegador\r\n   @HostListener('window:resize', ['$event'])\r\n-  onResize(event: Event) { // Usa Event para el tipo de evento\r\n+  onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n-  // Método para determinar el estado por defecto del sidebar según el ancho de la pantalla\r\n+  /**\r\n+   * Determina el estado inicial o por defecto del sidebar\r\n+   * basándose en el ancho actual de la pantalla.\r\n+   */\r\n   checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // En pantallas pequeñas (móviles), el sidebar está oculto por defecto\r\n+      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n       this.isSidebarHidden = true;\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En pantallas medianas (tabletas/escritorios pequeños), el sidebar está colapsado por defecto\r\n+      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n       this.isSidebarCollapsed = true;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     } else {\r\n-      // En pantallas grandes (escritorios), el sidebar está expandido por defecto\r\n+      // En escritorios grandes (más de 1024px), expandido por defecto\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n-  // Método para alternar la visibilidad/estado del sidebar\r\n+  /**\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño de la pantalla actual.\r\n+   */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre oculto y visible\r\n+      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n       this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n       // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n@@ -76,5 +82,5 @@\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n       this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n     }\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1748774741978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,23 +8,22 @@\n   imports: [RouterLink, RouterLinkActive, CommonModule],\r\n   templateUrl: './sidebar-menu.component.html',\r\n   styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n-export class SidebarMenuComponent implements OnInit { // Implementa OnInit\r\n+export class DoctorSidebarMenuComponent implements OnInit {\r\n \r\n-  // Propiedades para controlar el estado del sidebar\r\n   isSidebarHidden: boolean = false;\r\n   isSidebarCollapsed: boolean = false;\r\n   isSidebarVisibleMobile: boolean = false;\r\n \r\n+  isMobileView: boolean = false;\r\n+\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n     this.checkScreenSize();\r\n   }\r\n \r\n-  // Escucha los cambios de tamaño de la ventana del navegador\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n@@ -37,50 +36,63 @@\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n       // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n+      this.isMobileView = true;\r\n       this.isSidebarHidden = true;\r\n       this.isSidebarCollapsed = false;\r\n-      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n+      this.isSidebarVisibleMobile = false;\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n+      // En tabletas/escritorios pequeños, colapsado por defecto\r\n+      this.isMobileView = false;\r\n       this.isSidebarCollapsed = true;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     } else {\r\n-      // En escritorios grandes (más de 1024px), expandido por defecto\r\n+      // En escritorios grandes, expandido por defecto\r\n+      this.isMobileView = false;\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n    * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual.\r\n+   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n    */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n+      // Comportamiento en móviles: alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarCollapsed = false;\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n       // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n       if (this.isSidebarCollapsed) {\r\n-          this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n-          this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-          this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n-          this.isSidebarHidden = false;\r\n-      } else {\r\n-          // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n+        this.isSidebarHidden = true;\r\n+        this.isSidebarCollapsed = false;\r\n+      } else { // Si está oculto o cualquier otro estado, lo vuelve a colapsar\r\n+        this.isSidebarCollapsed = true;\r\n+        this.isSidebarHidden = false;\r\n       }\r\n+      this.isSidebarVisibleMobile = false;\r\n     } else {\r\n       // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarHidden = false;\r\n+      this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n-}\r\n+\r\n+  /**\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n+   */\r\n+  closeSidebarOnMobile() {\r\n+    if (this.isMobileView) {\r\n+      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = true;\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748775073272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,22 +8,23 @@\n   imports: [RouterLink, RouterLinkActive, CommonModule],\r\n   templateUrl: './sidebar-menu.component.html',\r\n   styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n-export class DoctorSidebarMenuComponent implements OnInit {\r\n+export class SidebarMenuComponent implements OnInit { // Implementa OnInit\r\n \r\n+  // Propiedades para controlar el estado del sidebar\r\n   isSidebarHidden: boolean = false;\r\n   isSidebarCollapsed: boolean = false;\r\n   isSidebarVisibleMobile: boolean = false;\r\n \r\n-  isMobileView: boolean = false;\r\n-\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n+    // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n     this.checkScreenSize();\r\n   }\r\n \r\n+  // Escucha los cambios de tamaño de la ventana del navegador\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n@@ -36,63 +37,50 @@\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n       // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isMobileView = true;\r\n       this.isSidebarHidden = true;\r\n       this.isSidebarCollapsed = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños, colapsado por defecto\r\n-      this.isMobileView = false;\r\n+      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n       this.isSidebarCollapsed = true;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     } else {\r\n-      // En escritorios grandes, expandido por defecto\r\n-      this.isMobileView = false;\r\n+      // En escritorios grandes (más de 1024px), expandido por defecto\r\n       this.isSidebarCollapsed = false;\r\n       this.isSidebarHidden = false;\r\n       this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n   /**\r\n    * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual y la interacción del usuario.\r\n+   * dependiendo del tamaño de la pantalla actual.\r\n    */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: alterna entre visible y oculto\r\n+      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarCollapsed = false;\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n       // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n       if (this.isSidebarCollapsed) {\r\n-        this.isSidebarHidden = true;\r\n-        this.isSidebarCollapsed = false;\r\n-      } else { // Si está oculto o cualquier otro estado, lo vuelve a colapsar\r\n-        this.isSidebarCollapsed = true;\r\n-        this.isSidebarHidden = false;\r\n+          this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n+          this.isSidebarCollapsed = false;\r\n+      } else if (this.isSidebarHidden) {\r\n+          this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n+          this.isSidebarHidden = false;\r\n+      } else {\r\n+          // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n+          this.isSidebarCollapsed = true;\r\n       }\r\n-      this.isSidebarVisibleMobile = false;\r\n     } else {\r\n       // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false;\r\n\\ No newline at end of file\n-      this.isSidebarVisibleMobile = false;\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n     }\r\n   }\r\n-\r\n-  /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en móvil.\r\n-   */\r\n-  closeSidebarOnMobile() {\r\n-    if (this.isMobileView) {\r\n-      this.isSidebarVisibleMobile = false;\r\n-      this.isSidebarHidden = true;\r\n-    }\r\n-  }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1748775515556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,79 +8,96 @@\n   imports: [RouterLink, RouterLinkActive, CommonModule],\r\n   templateUrl: './sidebar-menu.component.html',\r\n   styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n-export class SidebarMenuComponent implements OnInit { // Implementa OnInit\r\n+export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Propiedades para controlar el estado del sidebar\r\n-  isSidebarHidden: boolean = false;\r\n-  isSidebarCollapsed: boolean = false;\r\n-  isSidebarVisibleMobile: boolean = false;\r\n+  isSidebarHidden: boolean = false; // Controls if the sidebar is completely off-screen (desktop/tablet)\r\n+  isSidebarCollapsed: boolean = false; // Controls if the sidebar is in its collapsed state (desktop/tablet)\r\n+  isSidebarVisibleMobile: boolean = false; // Controls if the sidebar is explicitly shown as an overlay on mobile\r\n \r\n+  isMobileView: boolean = false; // Flag to determine if we are in a mobile view.\r\n+\r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n-    // Inicializa el estado del sidebar basado en el ancho de la pantalla al cargar\r\n     this.checkScreenSize();\r\n   }\r\n \r\n-  // Escucha los cambios de tamaño de la ventana del navegador\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   /**\r\n-   * Determina el estado inicial o por defecto del sidebar\r\n-   * basándose en el ancho actual de la pantalla.\r\n+   * Determines the initial or default state of the sidebar\r\n+   * based on the current screen width.\r\n+   * This runs on init and resize.\r\n    */\r\n   checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // En móviles (menos de 768px), el sidebar está oculto por defecto\r\n-      this.isSidebarHidden = true;\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarVisibleMobile = false; // Asegura que esté oculto al inicio en móviles\r\n+      // Mobile view (less than 768px): Sidebar is hidden by default.\r\n+      this.isMobileView = true;\r\n+      this.isSidebarHidden = true; // Hidden off-screen\r\n+      this.isSidebarCollapsed = false; // Not applicable\r\n+      this.isSidebarVisibleMobile = false; // Not visible initially\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // En tabletas/escritorios pequeños (entre 768px y 1024px), colapsado por defecto\r\n-      this.isSidebarCollapsed = true;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+      // Tablet/Small Desktop: Collapsed by default.\r\n+      this.isMobileView = false;\r\n+      this.isSidebarCollapsed = true; // Collapsed\r\n+      this.isSidebarHidden = false; // Not hidden\r\n+      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n     } else {\r\n-      // En escritorios grandes (más de 1024px), expandido por defecto\r\n-      this.isSidebarCollapsed = false;\r\n-      this.isSidebarHidden = false;\r\n-      this.isSidebarVisibleMobile = false;\r\n+      // Large Desktops (>= 1025px): Expanded by default.\r\n+      this.isMobileView = false;\r\n+      this.isSidebarCollapsed = false; // Expanded\r\n+      this.isSidebarHidden = false; // Not hidden\r\n+      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño de la pantalla actual.\r\n+   * Toggles the sidebar state (hidden, collapsed, expanded)\r\n+   * depending on the current screen size and user interaction.\r\n    */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento en móviles: solo alterna entre visible y oculto\r\n+      // Mobile behavior: Toggles between visible and hidden (overlay)\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile; // Si es visible, no está hidden\r\n+      // When mobile sidebar is visible, it's not \"hidden\" in the sense of translateX(-100%)\r\n+      // When it's not visible, it IS hidden.\r\n+      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n+      this.isSidebarCollapsed = false; // Ensure it's not collapsed on mobile\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento en tabletas/escritorios pequeños: alterna entre colapsado y oculto\r\n+      // Tablet/Small Desktop behavior: Toggles between collapsed and hidden\r\n       if (this.isSidebarCollapsed) {\r\n-          this.isSidebarHidden = true; // Si está colapsado, pasa a oculto\r\n-          this.isSidebarCollapsed = false;\r\n-      } else if (this.isSidebarHidden) {\r\n-          this.isSidebarCollapsed = true; // Si está oculto, pasa a colapsado\r\n-          this.isSidebarHidden = false;\r\n-      } else {\r\n-          // Si por alguna razón no tiene ninguna de las dos clases, lo colapsa\r\n-          this.isSidebarCollapsed = true;\r\n+        // If it's collapsed, clicking hides it completely\r\n+        this.isSidebarHidden = true;\r\n+        this.isSidebarCollapsed = false;\r\n+      } else { // If it's hidden or any other state, clicking restores it to collapsed\r\n+        this.isSidebarCollapsed = true;\r\n+        this.isSidebarHidden = false;\r\n       }\r\n+      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n     } else {\r\n-      // Comportamiento en escritorios grandes: alterna entre expandido y colapsado\r\n+      // Large Desktops behavior: Toggles between expanded and collapsed\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto en este estado\r\n+      this.isSidebarHidden = false; // Ensure it's not completely hidden when toggling between expanded/collapsed\r\n+      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n     }\r\n   }\r\n-}\r\n+\r\n+  /**\r\n+   * Closes the sidebar when a link is clicked on mobile.\r\n+   * This is called by (click)=\"closeSidebarOnMobile()\" on each RouterLink.\r\n+   */\r\n+  closeSidebarOnMobile() {\r\n+    if (this.isMobileView) { // Only apply this logic if in mobile view\r\n+      this.isSidebarVisibleMobile = false; // Hide the mobile overlay\r\n+      this.isSidebarHidden = true; // Set to hidden off-screen\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748776200040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n+import { Component, OnInit, HostListener } from '@angular/core';\r\n import { RouterLink, RouterLinkActive } from '@angular/router';\r\n-import { CommonModule } from '@angular/common'; // Importa CommonModule para ngClass si lo usas\r\n+import { CommonModule } from '@angular/common';\r\n \r\n @Component({\r\n   selector: 'app-sidebar-menu',\r\n   standalone: true,\r\n@@ -10,94 +10,99 @@\n   styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  isSidebarHidden: boolean = false; // Controls if the sidebar is completely off-screen (desktop/tablet)\r\n-  isSidebarCollapsed: boolean = false; // Controls if the sidebar is in its collapsed state (desktop/tablet)\r\n-  isSidebarVisibleMobile: boolean = false; // Controls if the sidebar is explicitly shown as an overlay on mobile\r\n+  // Controla si el sidebar está completamente fuera de pantalla (desktop/tablet)\r\n+  isSidebarHidden: boolean = false;\r\n+  // Controla si el sidebar está en su estado colapsado (desktop/tablet)\r\n+  isSidebarCollapsed: boolean = false;\r\n+  // Controla si el sidebar se muestra explícitamente como una superposición en dispositivos móviles\r\n+  isSidebarVisibleMobile: boolean = false;\r\n \r\n-  isMobileView: boolean = false; // Flag to determine if we are in a mobile view.\r\n+  // Bandera para determinar si estamos en una vista móvil.\r\n+  isMobileView: boolean = false;\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n+  // Escucha el evento de redimensionamiento de la ventana\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   /**\r\n-   * Determines the initial or default state of the sidebar\r\n-   * based on the current screen width.\r\n-   * This runs on init and resize.\r\n+   * Determina el estado inicial o predeterminado del sidebar\r\n+   * según el ancho actual de la pantalla.\r\n+   * Esto se ejecuta al iniciar y al redimensionar la ventana.\r\n    */\r\n   checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Mobile view (less than 768px): Sidebar is hidden by default.\r\n+      // Vista móvil (menos de 768px): El sidebar está oculto por defecto.\r\n       this.isMobileView = true;\r\n-      this.isSidebarHidden = true; // Hidden off-screen\r\n-      this.isSidebarCollapsed = false; // Not applicable\r\n-      this.isSidebarVisibleMobile = false; // Not visible initially\r\n+      this.isSidebarHidden = true; // Oculto fuera de pantalla\r\n+      this.isSidebarCollapsed = false; // No aplica\r\n+      this.isSidebarVisibleMobile = false; // No visible inicialmente\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Tablet/Small Desktop: Collapsed by default.\r\n+      // Tableta/Escritorio pequeño: Colapsado por defecto.\r\n       this.isMobileView = false;\r\n-      this.isSidebarCollapsed = true; // Collapsed\r\n-      this.isSidebarHidden = false; // Not hidden\r\n-      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n+      this.isSidebarCollapsed = true; // Colapsado\r\n+      this.isSidebarHidden = false; // No oculto\r\n+      this.isSidebarVisibleMobile = false; // No es una superposición móvil\r\n     } else {\r\n-      // Large Desktops (>= 1025px): Expanded by default.\r\n+      // Escritorios grandes (>= 1025px): Expandido por defecto.\r\n       this.isMobileView = false;\r\n-      this.isSidebarCollapsed = false; // Expanded\r\n-      this.isSidebarHidden = false; // Not hidden\r\n-      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n+      this.isSidebarCollapsed = false; // Expandido\r\n+      this.isSidebarHidden = false; // No oculto\r\n+      this.isSidebarVisibleMobile = false; // No es una superposición móvil\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Toggles the sidebar state (hidden, collapsed, expanded)\r\n-   * depending on the current screen size and user interaction.\r\n+   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n+   * dependiendo del tamaño actual de la pantalla y la interacción del usuario.\r\n    */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Mobile behavior: Toggles between visible and hidden (overlay)\r\n+      // Comportamiento móvil: Alterna entre visible y oculto (superposición)\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      // When mobile sidebar is visible, it's not \"hidden\" in the sense of translateX(-100%)\r\n-      // When it's not visible, it IS hidden.\r\n+      // Cuando el sidebar móvil está visible, no está \"oculto\" en el sentido de translateX(-100%)\r\n+      // Cuando no está visible, SÍ está oculto.\r\n       this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarCollapsed = false; // Ensure it's not collapsed on mobile\r\n+      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Tablet/Small Desktop behavior: Toggles between collapsed and hidden\r\n+      // Comportamiento de tableta/escritorio pequeño: Alterna entre colapsado y oculto\r\n       if (this.isSidebarCollapsed) {\r\n-        // If it's collapsed, clicking hides it completely\r\n+        // Si está colapsado, al hacer clic lo oculta completamente\r\n         this.isSidebarHidden = true;\r\n         this.isSidebarCollapsed = false;\r\n-      } else { // If it's hidden or any other state, clicking restores it to collapsed\r\n+      } else { // Si está oculto o en cualquier otro estado, al hacer clic lo restaura a colapsado\r\n         this.isSidebarCollapsed = true;\r\n         this.isSidebarHidden = false;\r\n       }\r\n-      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     } else {\r\n-      // Large Desktops behavior: Toggles between expanded and collapsed\r\n+      // Comportamiento de escritorios grandes: Alterna entre expandido y colapsado\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Ensure it's not completely hidden when toggling between expanded/collapsed\r\n-      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n+      this.isSidebarHidden = false; // Asegura que no esté completamente oculto al alternar entre expandido/colapsado\r\n+      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Closes the sidebar when a link is clicked on mobile.\r\n-   * This is called by (click)=\"closeSidebarOnMobile()\" on each RouterLink.\r\n+   * Cierra el sidebar cuando se hace clic en un enlace en dispositivos móviles.\r\n+   * Esto se llama con (click)=\"closeSidebarOnMobile()\" en cada RouterLink.\r\n    */\r\n   closeSidebarOnMobile() {\r\n-    if (this.isMobileView) { // Only apply this logic if in mobile view\r\n-      this.isSidebarVisibleMobile = false; // Hide the mobile overlay\r\n-      this.isSidebarHidden = true; // Set to hidden off-screen\r\n+    if (this.isMobileView) { // Solo aplica esta lógica si está en vista móvil\r\n+      this.isSidebarVisibleMobile = false; // Oculta la superposición móvil\r\n+      this.isSidebarHidden = true; // Establece como oculto fuera de pantalla\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748776280520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import { Component, OnInit, HostListener } from '@angular/core';\r\n+import { Component, OnInit, HostListener } from '@angular/core'; // Importa HostListener y OnInit\r\n import { RouterLink, RouterLinkActive } from '@angular/router';\r\n-import { CommonModule } from '@angular/common';\r\n+import { CommonModule } from '@angular/common'; // Importa CommonModule para ngClass si lo usas\r\n \r\n @Component({\r\n   selector: 'app-sidebar-menu',\r\n   standalone: true,\r\n@@ -10,99 +10,94 @@\n   styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n export class PatientSidebarMenuComponent implements OnInit {\r\n \r\n-  // Controla si el sidebar está completamente fuera de pantalla (desktop/tablet)\r\n-  isSidebarHidden: boolean = false;\r\n-  // Controla si el sidebar está en su estado colapsado (desktop/tablet)\r\n-  isSidebarCollapsed: boolean = false;\r\n-  // Controla si el sidebar se muestra explícitamente como una superposición en dispositivos móviles\r\n-  isSidebarVisibleMobile: boolean = false;\r\n+  isSidebarHidden: boolean = false; // Controls if the sidebar is completely off-screen (desktop/tablet)\r\n+  isSidebarCollapsed: boolean = false; // Controls if the sidebar is in its collapsed state (desktop/tablet)\r\n+  isSidebarVisibleMobile: boolean = false; // Controls if the sidebar is explicitly shown as an overlay on mobile\r\n \r\n-  // Bandera para determinar si estamos en una vista móvil.\r\n-  isMobileView: boolean = false;\r\n+  isMobileView: boolean = false; // Flag to determine if we are in a mobile view.\r\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n-  // Escucha el evento de redimensionamiento de la ventana\r\n   @HostListener('window:resize', ['$event'])\r\n   onResize(event: any) {\r\n     this.checkScreenSize();\r\n   }\r\n \r\n   /**\r\n-   * Determina el estado inicial o predeterminado del sidebar\r\n-   * según el ancho actual de la pantalla.\r\n-   * Esto se ejecuta al iniciar y al redimensionar la ventana.\r\n+   * Determines the initial or default state of the sidebar\r\n+   * based on the current screen width.\r\n+   * This runs on init and resize.\r\n    */\r\n   checkScreenSize() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Vista móvil (menos de 768px): El sidebar está oculto por defecto.\r\n+      // Mobile view (less than 768px): Sidebar is hidden by default.\r\n       this.isMobileView = true;\r\n-      this.isSidebarHidden = true; // Oculto fuera de pantalla\r\n-      this.isSidebarCollapsed = false; // No aplica\r\n-      this.isSidebarVisibleMobile = false; // No visible inicialmente\r\n+      this.isSidebarHidden = true; // Hidden off-screen\r\n+      this.isSidebarCollapsed = false; // Not applicable\r\n+      this.isSidebarVisibleMobile = false; // Not visible initially\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Tableta/Escritorio pequeño: Colapsado por defecto.\r\n+      // Tablet/Small Desktop: Collapsed by default.\r\n       this.isMobileView = false;\r\n-      this.isSidebarCollapsed = true; // Colapsado\r\n-      this.isSidebarHidden = false; // No oculto\r\n-      this.isSidebarVisibleMobile = false; // No es una superposición móvil\r\n+      this.isSidebarCollapsed = true; // Collapsed\r\n+      this.isSidebarHidden = false; // Not hidden\r\n+      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n     } else {\r\n-      // Escritorios grandes (>= 1025px): Expandido por defecto.\r\n+      // Large Desktops (>= 1025px): Expanded by default.\r\n       this.isMobileView = false;\r\n-      this.isSidebarCollapsed = false; // Expandido\r\n-      this.isSidebarHidden = false; // No oculto\r\n-      this.isSidebarVisibleMobile = false; // No es una superposición móvil\r\n+      this.isSidebarCollapsed = false; // Expanded\r\n+      this.isSidebarHidden = false; // Not hidden\r\n+      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Alterna el estado del sidebar (oculto, colapsado, expandido)\r\n-   * dependiendo del tamaño actual de la pantalla y la interacción del usuario.\r\n+   * Toggles the sidebar state (hidden, collapsed, expanded)\r\n+   * depending on the current screen size and user interaction.\r\n    */\r\n   toggleSidebar() {\r\n     const screenWidth = window.innerWidth;\r\n \r\n     if (screenWidth < 768) {\r\n-      // Comportamiento móvil: Alterna entre visible y oculto (superposición)\r\n+      // Mobile behavior: Toggles between visible and hidden (overlay)\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      // Cuando el sidebar móvil está visible, no está \"oculto\" en el sentido de translateX(-100%)\r\n-      // Cuando no está visible, SÍ está oculto.\r\n+      // When mobile sidebar is visible, it's not \"hidden\" in the sense of translateX(-100%)\r\n+      // When it's not visible, it IS hidden.\r\n       this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarCollapsed = false; // Asegura que no esté colapsado en móvil\r\n+      this.isSidebarCollapsed = false; // Ensure it's not collapsed on mobile\r\n     } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Comportamiento de tableta/escritorio pequeño: Alterna entre colapsado y oculto\r\n+      // Tablet/Small Desktop behavior: Toggles between collapsed and hidden\r\n       if (this.isSidebarCollapsed) {\r\n-        // Si está colapsado, al hacer clic lo oculta completamente\r\n+        // If it's collapsed, clicking hides it completely\r\n         this.isSidebarHidden = true;\r\n         this.isSidebarCollapsed = false;\r\n-      } else { // Si está oculto o en cualquier otro estado, al hacer clic lo restaura a colapsado\r\n+      } else { // If it's hidden or any other state, clicking restores it to collapsed\r\n         this.isSidebarCollapsed = true;\r\n         this.isSidebarHidden = false;\r\n       }\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n     } else {\r\n-      // Comportamiento de escritorios grandes: Alterna entre expandido y colapsado\r\n+      // Large Desktops behavior: Toggles between expanded and collapsed\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Asegura que no esté completamente oculto al alternar entre expandido/colapsado\r\n-      this.isSidebarVisibleMobile = false; // No aplica en este rango\r\n+      this.isSidebarHidden = false; // Ensure it's not completely hidden when toggling between expanded/collapsed\r\n+      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n     }\r\n   }\r\n \r\n   /**\r\n-   * Cierra el sidebar cuando se hace clic en un enlace en dispositivos móviles.\r\n-   * Esto se llama con (click)=\"closeSidebarOnMobile()\" en cada RouterLink.\r\n+   * Closes the sidebar when a link is clicked on mobile.\r\n+   * This is called by (click)=\"closeSidebarOnMobile()\" on each RouterLink.\r\n    */\r\n   closeSidebarOnMobile() {\r\n-    if (this.isMobileView) { // Solo aplica esta lógica si está en vista móvil\r\n-      this.isSidebarVisibleMobile = false; // Oculta la superposición móvil\r\n-      this.isSidebarHidden = true; // Establece como oculto fuera de pantalla\r\n+    if (this.isMobileView) { // Only apply this logic if in mobile view\r\n+      this.isSidebarVisibleMobile = false; // Hide the mobile overlay\r\n+      this.isSidebarHidden = true; // Set to hidden off-screen\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748776666697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,96 +8,45 @@\n   imports: [RouterLink, RouterLinkActive, CommonModule],\r\n   templateUrl: './sidebar-menu.component.html',\r\n   styleUrls: ['./sidebar-menu.component.css']\r\n })\r\n-export class PatientSidebarMenuComponent implements OnInit {\r\n+export class SidebarMenuComponent implements OnInit {\r\n+  isSidebarHidden: boolean = false;\r\n+  isSidebarCollapsed: boolean = false;\r\n+  isSidebarVisibleMobile: boolean = false;\r\n+  isMobileView: boolean = false; // Add this property\r\n \r\n-  isSidebarHidden: boolean = false; // Controls if the sidebar is completely off-screen (desktop/tablet)\r\n-  isSidebarCollapsed: boolean = false; // Controls if the sidebar is in its collapsed state (desktop/tablet)\r\n-  isSidebarVisibleMobile: boolean = false; // Controls if the sidebar is explicitly shown as an overlay on mobile\r\n-\r\n-  isMobileView: boolean = false; // Flag to determine if we are in a mobile view.\r\n-\r\n-  constructor() { }\r\n-\r\n   ngOnInit(): void {\r\n-    this.checkScreenSize();\r\n+    this.checkMobileView(); // Check initial view on component load\r\n   }\r\n \r\n   @HostListener('window:resize', ['$event'])\r\n-  onResize(event: any) {\r\n-    this.checkScreenSize();\r\n+  onResize(event: Event): void {\r\n+    this.checkMobileView(); // Update view on window resize\r\n   }\r\n \r\n-  /**\r\n-   * Determines the initial or default state of the sidebar\r\n-   * based on the current screen width.\r\n-   * This runs on init and resize.\r\n-   */\r\n-  checkScreenSize() {\r\n-    const screenWidth = window.innerWidth;\r\n+  checkMobileView(): void {\r\n+    // Define your mobile breakpoint, e.g., 768px for common mobile devices\r\n+    this.isMobileView = window.innerWidth <= 768;\r\n \r\n-    if (screenWidth < 768) {\r\n-      // Mobile view (less than 768px): Sidebar is hidden by default.\r\n-      this.isMobileView = true;\r\n-      this.isSidebarHidden = true; // Hidden off-screen\r\n-      this.isSidebarCollapsed = false; // Not applicable\r\n-      this.isSidebarVisibleMobile = false; // Not visible initially\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Tablet/Small Desktop: Collapsed by default.\r\n-      this.isMobileView = false;\r\n-      this.isSidebarCollapsed = true; // Collapsed\r\n-      this.isSidebarHidden = false; // Not hidden\r\n-      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n-    } else {\r\n-      // Large Desktops (>= 1025px): Expanded by default.\r\n-      this.isMobileView = false;\r\n-      this.isSidebarCollapsed = false; // Expanded\r\n-      this.isSidebarHidden = false; // Not hidden\r\n-      this.isSidebarVisibleMobile = false; // Not a mobile overlay\r\n+    // If not in mobile view, ensure the mobile sidebar is not visible\r\n+    if (!this.isMobileView) {\r\n+      this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n \r\n-  /**\r\n-   * Toggles the sidebar state (hidden, collapsed, expanded)\r\n-   * depending on the current screen size and user interaction.\r\n-   */\r\n-  toggleSidebar() {\r\n-    const screenWidth = window.innerWidth;\r\n-\r\n-    if (screenWidth < 768) {\r\n-      // Mobile behavior: Toggles between visible and hidden (overlay)\r\n+  toggleSidebar(): void {\r\n+    if (this.isMobileView) {\r\n       this.isSidebarVisibleMobile = !this.isSidebarVisibleMobile;\r\n-      // When mobile sidebar is visible, it's not \"hidden\" in the sense of translateX(-100%)\r\n-      // When it's not visible, it IS hidden.\r\n-      this.isSidebarHidden = !this.isSidebarVisibleMobile;\r\n-      this.isSidebarCollapsed = false; // Ensure it's not collapsed on mobile\r\n-    } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n-      // Tablet/Small Desktop behavior: Toggles between collapsed and hidden\r\n-      if (this.isSidebarCollapsed) {\r\n-        // If it's collapsed, clicking hides it completely\r\n-        this.isSidebarHidden = true;\r\n-        this.isSidebarCollapsed = false;\r\n-      } else { // If it's hidden or any other state, clicking restores it to collapsed\r\n-        this.isSidebarCollapsed = true;\r\n-        this.isSidebarHidden = false;\r\n-      }\r\n-      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n     } else {\r\n-      // Large Desktops behavior: Toggles between expanded and collapsed\r\n       this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n-      this.isSidebarHidden = false; // Ensure it's not completely hidden when toggling between expanded/collapsed\r\n-      this.isSidebarVisibleMobile = false; // Not applicable in this range\r\n+      this.isSidebarHidden = false; // Ensure it's not hidden when toggling collapse\r\n     }\r\n   }\r\n \r\n-  /**\r\n-   * Closes the sidebar when a link is clicked on mobile.\r\n-   * This is called by (click)=\"closeSidebarOnMobile()\" on each RouterLink.\r\n-   */\r\n-  closeSidebarOnMobile() {\r\n-    if (this.isMobileView) { // Only apply this logic if in mobile view\r\n-      this.isSidebarVisibleMobile = false; // Hide the mobile overlay\r\n-      this.isSidebarHidden = true; // Set to hidden off-screen\r\n+  // Add the missing method\r\n+  closeSidebarOnMobile(): void {\r\n+    if (this.isMobileView) {\r\n+      this.isSidebarVisibleMobile = false;\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1747556011150,
            "name": "Commit-0",
            "content": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sidebar-menu',\r\n  templateUrl: './sidebar-menu.component.html',\r\n  styleUrls: ['./sidebar-menu.component.css']\r\n})\r\nexport class SidebarMenuComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}"
        }
    ]
}